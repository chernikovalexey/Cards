// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart() {
  this.x = 0;
  delete this.x;
}
var A = new dart;
var B = new dart;
var C = new dart;
var D = new dart;
var E = new dart;
var F = new dart;
var G = new dart;
var H = new dart;
var J = new dart;
var K = new dart;
var L = new dart;
var M = new dart;
var N = new dart;
var O = new dart;
var P = new dart;
var Q = new dart;
var R = new dart;
var S = new dart;
var T = new dart;
var U = new dart;
var V = new dart;
var W = new dart;
var X = new dart;
var Y = new dart;
var Z = new dart;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = Object.create(null);

// Native classes
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    if (fields instanceof Array)
      fields = fields[0];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["", "Bobbin.dart", , N, {
  "^": "",
  Bobbin: {
    "^": "Object;list,nFrame,rewindSpeed,callbackFired,allAsleep,rewindComplete",
    allAsleep$0: function() {
      return this.allAsleep.call$0();
    },
    rewindComplete$0: function() {
      return this.rewindComplete.call$0();
    },
    enterFrame$1: function(cards) {
      var frame, t1, numAsleep, b, t2, t3, t4;
      ++this.nFrame;
      frame = [];
      for (t1 = new H.ListIterator(cards, cards.length, 0, null), numAsleep = 0; t1.moveNext$0();) {
        b = t1.__internal$_current;
        if (!b.get$awake() || H.interceptedTypeCast(b.get$userData(), "$isSprite").isStatic === true)
          ++numAsleep;
        t2 = J.clone$0$x(J.get$position$x(b));
        t3 = b.get$angle();
        t4 = new N.BTransform(null, null);
        t4.pos = t2;
        t4.angle = t3;
        frame.push(t4);
      }
      if (numAsleep < cards.length)
        this.list.push(frame);
      if (numAsleep === cards.length && !this.callbackFired) {
        this.allAsleep$0();
        this.callbackFired = true;
      }
    },
    previousFrame$1: function(cards) {
      var t1, rewindSpeed, t2, frame, t3, clen, len, i, b;
      if (this.list.length === 0)
        return false;
      t1 = this.rewindSpeed += 0.05;
      rewindSpeed = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1));
      t1 = this.list;
      t2 = t1.length;
      if (t2 < rewindSpeed) {
        this.rewindSpeed = 1;
        frame = C.JSArray_methods.get$last(t1);
        C.JSArray_methods.set$length(this.list, 0);
      } else {
        t3 = t2 - rewindSpeed;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        frame = t1[t3];
        C.JSArray_methods.removeRange$2(t1, t3, t2);
      }
      clen = cards.length;
      t1 = J.getInterceptor$asx(frame);
      len = t1.get$length(frame);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      while (true) {
        if (!(i < len && i < clen))
          break;
        if (i >= cards.length)
          return H.ioore(cards, i);
        b = cards[i];
        if (H.interceptedTypeCast(b.get$userData(), "$isSprite").isStatic !== true)
          J.setTransform$2$x(b, t1.$index(frame, i).get$pos(), t1.$index(frame, i).get$angle());
        ++i;
      }
      return true;
    },
    erase$0: function() {
      this.nFrame = 0;
      this.rewindSpeed = 1;
      this.callbackFired = false;
      C.JSArray_methods.set$length(this.list, 0);
    }
  },
  BTransform: {
    "^": "Object;pos<,angle<"
  }
}],
["", "BoundedCard.dart", , Y, {
  "^": "",
  BoundedCard: {
    "^": "Object;b,e,pos<",
    BoundedCard$1: function(e) {
      var bd, fd, sd, t1, t2;
      this.e = e;
      bd = V.BodyDef$();
      bd.type = 2;
      bd.position = this.pos;
      bd.bullet = true;
      fd = V.FixtureDef$();
      sd = V.PolygonShape$();
      t1 = $.GameEngine_scale;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = e.currentZoom;
      sd.setAsBox$2(45 / t1 / 2 * t2, 2.5 / t1 / 2 * t2);
      fd.shape = sd;
      fd.isSensor = true;
      t2 = e.world.createBody$1(bd);
      this.b = t2;
      t2.createFixture$1(fd);
      this.b.userData = Q.EnergySprite$(e.world, true);
    }
  }
}],
["", "Camera.dart", , L, {
  "^": "",
  Camera: {
    "^": "Object;hasBounds,finalZoom,startZoom,currentZoom,targetOffsetX,targetOffsetY,pxOffsetX,pxOffsetY,bx1,by1,bx2,by2,ignoreXAnim,ignoreYAnim,firedMovingEnd,firedZoomEnd,ignoreAutoCheck,movingEnd,zoomEnd,zoomAnimation,xAnim,yAnim,e",
    movingEnd$0: function() {
      return this.movingEnd.call$0();
    },
    zoomEnd$0: function() {
      return this.zoomEnd.call$0();
    },
    update$1: function(delta) {
      var ppx, t1, ppy, t2, t3, dx, dy, updated;
      ppx = this.pxOffsetX;
      t1 = this.xAnim;
      if (!t1.isFinished && !this.ignoreXAnim)
        this.pxOffsetX = t1.next$0();
      ppy = this.pxOffsetY;
      t1 = this.yAnim;
      if (!t1.isFinished && !this.ignoreYAnim)
        this.pxOffsetY = t1.next$0();
      t1 = J.getInterceptor(ppx);
      if (t1.$eq(ppx, this.pxOffsetX) && J.$eq(ppy, this.pxOffsetY) && !this.firedMovingEnd) {
        this.firedMovingEnd = true;
        this.movingEnd$0();
      } else if (!t1.$eq(ppx, this.pxOffsetX) || !J.$eq(ppy, this.pxOffsetY))
        this.firedMovingEnd = false;
      t1 = this.xAnim;
      if (t1.isFinished) {
        t1.start = this.targetOffsetX;
        t1.numFrames = 75;
      }
      t1 = this.yAnim;
      if (t1.isFinished) {
        t1.start = this.targetOffsetY;
        t1.numFrames = 75;
      }
      t1 = $.get$Input_keys();
      t2 = t1.$index(0, "space").get$down();
      t3 = this.e;
      if (t2) {
        t3.setCanvasCursor$1("grab");
        t1 = $.Input_mouseDeltaX;
        t2 = $.GameEngine_scale;
        if (typeof t2 !== "number")
          return H.iae(t2);
        dx = t1 * t2;
        dy = $.Input_mouseDeltaY * t2;
        if ($.Input_isMouseLeftDown) {
          this.e.setCanvasCursor$1("grabbing");
          if (dx !== 0) {
            this.targetOffsetX = J.$sub$n(this.targetOffsetX, dx);
            updated = true;
          } else
            updated = false;
          if (dy !== 0) {
            this.targetOffsetY += dy;
            updated = true;
          }
        } else
          updated = false;
        this.xAnim.numFrames = 1750;
        this.yAnim.numFrames = 1750;
        this.e.toggleBoundedCard$1(false);
      } else {
        t3.toggleBoundedCard$1(true);
        if (t1.$index(0, "arrow_up").get$down()) {
          this.targetOffsetY -= 5.05;
          updated = true;
        } else
          updated = false;
        if (t1.$index(0, "arrow_left").get$down()) {
          this.targetOffsetX = J.$sub$n(this.targetOffsetX, 5.05);
          updated = true;
        }
        if (t1.$index(0, "arrow_down").get$down()) {
          this.targetOffsetY += 5.05;
          updated = true;
        }
        if (t1.$index(0, "arrow_right").get$down()) {
          this.targetOffsetX = J.$add$ns(this.targetOffsetX, 5.05);
          updated = true;
        }
      }
      if (this.hasBounds && !this.ignoreAutoCheck) {
        this.checkTarget$0();
        updated = true;
      }
      if (updated)
        this.updateEngine$0();
      t1 = this.zoomAnimation;
      if (!t1.isFinished) {
        this.currentZoom = t1.next$0();
        this.updateZoom$0();
        if (this.zoomAnimation.isFinished && !this.firedZoomEnd) {
          this.firedZoomEnd = true;
          this.zoomEnd$0();
        } else
          this.firedZoomEnd = false;
      }
    },
    setBounds$4: function(bx1, by1, bx2, by2) {
      this.hasBounds = true;
      this.bx1 = bx1;
      this.bx2 = bx2;
      this.by1 = by1;
      this.by2 = by2;
      this.xAnim = R.DoubleAnimation$(this.pxOffsetX, bx1, 75);
      this.yAnim = R.DoubleAnimation$(this.pxOffsetY, by2, 75);
    },
    updateEngine$0: function() {
      var t1 = this.xAnim;
      t1.start = this.pxOffsetX;
      t1.end = this.targetOffsetX;
      t1.isFinished = false;
      t1 = this.yAnim;
      t1.start = this.pxOffsetY;
      t1.end = this.targetOffsetY;
      t1.isFinished = false;
      this.updateZoom$0();
    },
    updateZoom$0: function() {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.e;
      t2 = new Float32Array(H._checkLength(2));
      t2[0] = 0;
      t2[1] = 0;
      t3 = this.pxOffsetX;
      t4 = $.Input_canvasHeight;
      t5 = $.GameEngine_scale;
      if (typeof t4 !== "number")
        return t4.$div();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t6 = this.pxOffsetY;
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = new Float32Array(H._checkLength(2));
      t7[0] = t3;
      t7[1] = t4 / t5 - t6;
      t6 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t6.setFrom$1(new T.Vector2(t2));
      t2 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t2.setFrom$1(new T.Vector2(t7));
      t2 = new Y.CanvasViewportTransform(null, t6, 20, t2);
      t2.yFlip = true;
      t1.viewport = t2;
      t2 = this.e;
      t1 = t2.viewport;
      t6 = this.currentZoom;
      if (typeof t6 !== "number")
        return H.iae(t6);
      t6 = 85 * t6;
      t1.scale = t6;
      $.GameEngine_scale = t6;
      t2.debugDraw = B.SuperCanvasDraw$(t1, t2.g);
    },
    checkTarget$2: function(ignoreXCheck, ignoreYCheck) {
      var t1, t2, t3, t4;
      if (!ignoreXCheck) {
        if (J.$le$n(J.$div$n(this.targetOffsetX, $.GameEngine_scale), J.$div$n(this.bx1, 85)))
          this.targetOffsetX = J.$mul$ns(J.$div$n(this.bx1, 85), $.GameEngine_scale);
        t1 = J.$div$n(this.targetOffsetX, $.GameEngine_scale);
        t2 = $.Input_canvasWidth;
        t3 = $.GameEngine_scale;
        if (typeof t2 !== "number")
          return t2.$div();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (J.$ge$n(J.$add$ns(t1, t2 / t3), J.$div$n(this.bx2, 85))) {
          t1 = J.$div$n(this.bx2, 85);
          t2 = $.Input_canvasWidth;
          t3 = $.GameEngine_scale;
          if (typeof t2 !== "number")
            return t2.$div();
          if (typeof t3 !== "number")
            return H.iae(t3);
          this.targetOffsetX = J.$mul$ns(J.$sub$n(t1, t2 / t3), $.GameEngine_scale);
        }
      }
      if (!ignoreYCheck) {
        t1 = this.targetOffsetY;
        t2 = $.GameEngine_scale;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = $.Input_canvasHeight;
        if (typeof t3 !== "number")
          return t3.$div();
        t3 /= t2;
        t4 = this.by1;
        if (typeof t4 !== "number")
          return t4.$div();
        t4 /= 85;
        if (-t1 / t2 - t3 <= t4) {
          t1 = -(t4 + t3) * t2;
          this.targetOffsetY = t1;
        }
        t3 = this.by2;
        if (typeof t3 !== "number")
          return t3.$div();
        t3 /= 85;
        if (-t1 / t2 >= t3)
          this.targetOffsetY = -t3 * t2;
      }
    },
    checkTarget$0: function() {
      return this.checkTarget$2(false, false);
    },
    static: {"^": "Camera_FRAME_COUNT"}
  },
  closure2: {
    "^": "Closure:46;",
    call$0: function() {
    }
  },
  closure3: {
    "^": "Closure:46;",
    call$0: function() {
    }
  }
}],
["", "CardContactListener.dart", , Q, {
  "^": "",
  CardContactListener: {
    "^": "ContactListener;e,contactingBodies",
    endContact$1: function(contact) {
      var fx = contact.get$fixtureA().get$isSensor() === true ? contact.get$fixtureB() : contact.get$fixtureA();
      J.get$body$x(contact.get$fixtureA()).userData.set$contactOverlay(false);
      J.get$body$x(contact.get$fixtureB()).userData.set$contactOverlay(false);
      C.JSArray_methods.remove$1(this.contactingBodies, J.get$body$x(fx));
    },
    preSolve$2: function(contact, oldManifold) {
    },
    beginContact$1: function(contact) {
      var t1, fx;
      t1 = contact.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      if ((t1 & 2) !== 2)
        return;
      fx = contact.fixtureA.get$isSensor() === true ? contact.fixtureB : contact.fixtureA;
      if (!this.e.physicsEnabled)
        if (fx.get$isSensor() !== true) {
          t1 = J.getInterceptor$x(fx);
          t1 = t1.get$body(fx).userData != null && !t1.get$body(fx).userData.get$isHint() && !t1.get$body(fx).userData.get$isInner();
        } else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        J.get$body$x(contact.fixtureA).userData.set$contactOverlay(true);
        J.get$body$x(contact.fixtureB).userData.set$contactOverlay(true);
        this.contactingBodies.push(J.get$body$x(fx));
      }
    }
  }
}],
["", "Chapter.dart", , D, {
  "^": "",
  Chapter_load: function(ready) {
    H.interceptedTypeCast(J.$index$asx($.get$context(), "Features"), "$isJsObject").callMethod$2("getChapters", [P.JsFunction_JsFunction$withThis(new D.Chapter_load_closure(ready))]);
  },
  Chapter_getFinishedLevelsAmount: function(chapter, levels) {
    var finished, i, levelName;
    if (typeof levels !== "number")
      return H.iae(levels);
    finished = 0;
    i = 1;
    for (; i <= levels; ++i) {
      levelName = "level_" + C.JSInt_methods.toString$0(chapter) + "_" + C.JSInt_methods.toString$0(i);
      if (window.localStorage.getItem(levelName) != null)
        if (J.$index$asx(C.JsonCodec_null_null.decode$1(window.localStorage.getItem(levelName)), "cd") === true)
          ++finished;
    }
    return finished;
  },
  Chapter_load_closure: {
    "^": "Closure:49;ready_0",
    call$2: [function(obj, str) {
      var t1, t2;
      t1 = J.$index$asx(C.JsonCodec_null_null.decode$1(str), "chapters");
      $.Chapter_chapters = t1;
      t2 = this.ready_0;
      if (t2 != null)
        t2.call$1(t1);
    }, "call$2", null, 4, 0, null, 47, 48, "call"]
  }
}],
["", "ChapterShower.dart", , O, {
  "^": "",
  ChapterShower_show: [function(chapters) {
    var t1, id, chapter, line, t2, el, t3, t4, totalStars, left, t5, finished, bar;
    J.set$innerHtml$x(document.querySelector("#chapter-es"), "");
    A.Input_attachSingleEscClickCallback(new O.ChapterShower_show_closure());
    for (t1 = J.get$iterator$ax(chapters), id = 0; t1.moveNext$0();) {
      chapter = t1.get$current();
      line = H.S(chapter);
      H.printString(line);
      t2 = document.querySelector("#chapter-es");
      ++id;
      el = H.interceptedTypeCast(document.querySelector(".chapter-template"), "$isDivElement");
      t3 = el.querySelector(".chapter");
      t3.toString;
      t4 = C.JSInt_methods.toString$0(id);
      t3.setAttribute("data-" + H.S(new W._DataAttributeMap(new W._ElementAttributeMap(t3))._toHyphenedName$1("id")), t4);
      t4 = J.getInterceptor$asx(chapter);
      J.set$innerHtml$x(el.querySelector(".chapter-title"), t4.$index(chapter, "name"));
      totalStars = $.StarManager_total;
      if (t4.$index(chapter, "unlocked") !== true) {
        left = J.$sub$n(t4.$index(chapter, "unlock_stars"), totalStars);
        t3 = el.querySelector(".stars-left-layout");
        t4 = $.get$sprintf();
        t5 = $.get$context();
        J.set$innerHtml$x(t3, t4.call$2(J.$index$asx(t5, "Features").callMethod$2("getNounPlural", [left, J.$index$asx(J.$index$asx(t5, "locale"), "unlock_left1"), J.$index$asx(J.$index$asx(t5, "locale"), "unlock_left2"), J.$index$asx(J.$index$asx(t5, "locale"), "unlock_left3")]), [J.toString$0(left)]));
        t4 = el.querySelector(".chapter");
        t3 = J.getInterceptor$x(t4);
        t3.get$classes(t4).add$1(0, "chapter-locked");
        t3.set$title(t4, J.$index$asx(J.$index$asx(t5, "locale"), "click_to_unlock"));
      } else {
        finished = D.Chapter_getFinishedLevelsAmount(id, t4.$index(chapter, "levels"));
        J.get$classes$x(el.querySelector(".chapter")).remove$1(0, "chapter-locked");
        t3 = el.querySelector(".current-bar").style;
        t5 = t4.$index(chapter, "levels");
        if (typeof t5 !== "number")
          return H.iae(t5);
        J.set$width$x(t3, C.JSNumber_methods.toString$0(240 * finished / t5) + "px");
        J.set$innerHtml$x(el.querySelector(".finished-levels"), C.JSInt_methods.toString$0(finished));
        J.set$innerHtml$x(el.querySelector(".all-levels"), J.toString$0(t4.$index(chapter, "levels")));
        J.set$innerHtml$x(el.querySelector(".earned-stars"), J.toString$0(T.StarManager_getResult(id)));
      }
      J.insertAdjacentHtml$2$x(t2, "beforeend", el.innerHTML);
    }
    bar = Q.Scroll_setup("chapter-vs", "chapter-es", "chapter-scrollbar", "v");
    t1 = $.get$context();
    J.$index$asx(t1, "dw_Scrollbar_Co").callMethod$2("addEvent", [bar, "on_scroll", new O.ChapterShower_show_closure0()]);
    t1.callMethod$2("html2canvas", [document.querySelector(".chapter-list"), P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_literal(["onrendered", new O.ChapterShower_show_closure1()], null, null))]);
    t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".chapter"), null);
    t1.forEach$1(t1, new O.ChapterShower_show_closure2());
    t1 = document.querySelector(".go-to-menu-button");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new O.ChapterShower_show_closure3(), false);
  }, "call$1", "ChapterShower_show$closure", 2, 0, 2],
  ChapterShower_show_closure: {
    "^": "Closure:46;",
    call$0: function() {
      J.click$0$x(document.querySelector(".go-to-menu-button"));
    }
  },
  ChapterShower_show_closure0: {
    "^": "Closure:52;",
    call$2: [function(x, y) {
      J.set$transform$x(document.querySelector("#chapter-blur-g").style, C.JSString_methods.$add("translatey(", J.toString$0(J.$add$ns(y, 76))) + "px)");
    }, "call$2", null, 4, 0, null, 50, 51, "call"]
  },
  ChapterShower_show_closure1: {
    "^": "Closure:54;",
    call$1: [function(canvas) {
      var t1, g, t2;
      t1 = J.getInterceptor$x(canvas);
      t1.set$id(canvas, "chapter-blur-g");
      document.querySelector(".chapter-blurry-bar").appendChild(canvas);
      g = t1.getContext$1(canvas, "2d");
      t2 = J.getInterceptor$x(g);
      t2.set$fillStyle(g, "rgba(0, 0, 0, 0.5)");
      t2.fillRect$4(g, 0, 0, t1.get$width(canvas), t1.get$height(canvas));
    }, "call$1", null, 2, 0, null, 53, "call"]
  },
  ChapterShower_show_closure2: {
    "^": "Closure:55;",
    call$1: function(e) {
      J.addEventListener$3$x(e, "click", new O.ChapterShower_show__closure0(e), false);
    }
  },
  ChapterShower_show__closure0: {
    "^": "Closure:44;e_0",
    call$1: [function($event) {
      var t1, t2, chapter, t3;
      t1 = this.e_0;
      t2 = J.getInterceptor$x(t1);
      if (!t2.get$classes(t1).readClasses$0().contains$1(0, "chapter-locked")) {
        $.Input_keyDown = null;
        t1 = t2.get$dataset(t1);
        chapter = H.Primitives_parseInt(t1._attributes._element.getAttribute("data-" + H.S(t1._toHyphenedName$1("id"))), null, null);
        t1 = $.manager;
        t2 = $.engine;
        C.JSArray_methods.remove$1(t1.states, t2);
        t2 = $.manager;
        t1 = $.engine;
        t3 = P.LinkedHashMap_LinkedHashMap$_literal(["chapter", chapter], null, null);
        t2.states.push(t1);
        t1.start$1(0, t3);
        T.updateCanvasPositionAndDimension(null);
        J.get$classes$x(document.querySelector("#chapter-selection")).add$1(0, "hidden");
        J.get$classes$x(document.querySelector(".buttons")).remove$1(0, "hidden");
        J.get$classes$x(document.querySelector(".selectors")).remove$1(0, "hidden");
        T.updateAttempts();
      } else {
        t1 = t2.get$dataset(t1);
        t1 = t1._attributes._element.getAttribute("data-" + H.S(t1._toHyphenedName$1("id")));
        H.interceptedTypeCast(J.$index$asx($.get$context(), "Features"), "$isJsObject").callMethod$2("unlockChapter", [t1]);
        B.WebApi_onOrderSuccess(new O.ChapterShower_show___closure());
      }
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  ChapterShower_show___closure: {
    "^": "Closure:46;",
    call$0: function() {
      D.Chapter_load(O.ChapterShower_show$closure());
    }
  },
  ChapterShower_show_closure3: {
    "^": "Closure:44;",
    call$1: [function($event) {
      T.fadeBoxOut(document.querySelector("#chapter-selection"), 125, new O.ChapterShower_show__closure());
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  ChapterShower_show__closure: {
    "^": "Closure:46;",
    call$0: function() {
      T.showMainMenu();
    }
  }
}],
["", "Color4.dart", , A, {
  "^": "",
  Color4: {
    "^": "Object;x*,y*,z,a*",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return !!t1.$isColor3 && J.$eq(this.x, other.x) && this.y === other.y && this.z === other.z && J.$eq(this.a, t1.get$a(other));
    }
  }
}],
["", "DoubleAnimation.dart", , R, {
  "^": "",
  DoubleAnimation: {
    "^": "Object;isFinished,frame,numFrames,start,end,lastDelta,lastValue",
    next$0: [function() {
      var t1, val;
      t1 = this.frame >= this.numFrames;
      this.isFinished = t1;
      if (t1)
        return this.end;
      t1 = this.start;
      val = J.$add$ns(t1, J.$mul$ns(J.$sub$n(this.end, t1), Math.sin(H.checkNum(this.frame / this.numFrames * 3.141592653589793 / 2))));
      this.lastDelta = J.$sub$n(val, this.lastValue);
      this.lastValue = val;
      ++this.frame;
      return val;
    }, "call$0", "get$next", 0, 0, 56],
    DoubleAnimation$3: function(start, end, numFrames) {
      this.start = start;
      this.end = end;
      this.lastDelta = 0;
      this.lastValue = start;
      if (J.$eq(start, end))
        this.isFinished = true;
      this.numFrames = numFrames;
    },
    static: {DoubleAnimation$: function(start, end, numFrames) {
        var t1 = new R.DoubleAnimation(false, 0, null, null, null, null, null);
        t1.DoubleAnimation$3(start, end, numFrames);
        return t1;
      }}
  }
}],
["", "EnergySprite.dart", , Q, {
  "^": "",
  EnergySprite: {
    "^": "Sprite;inner,effects,glowBorders,glowAdd,frame,energyStep,alwaysAnimate,current,isCard,energy,isInner,isHidden,active,connectedToEnergy,energySupport,isStatic,isHint,contactOverlay,enabled,px,py,gravity,id,bFrom,color,canvasDraw,center,axis",
    deactivate$0: function() {
      this.active = false;
      this.connectedToEnergy = false;
    },
    render$2: function(g, b) {
      var t1 = this.energy;
      if (t1 < 0)
        this.energy = 0;
      else if (t1 > 1)
        this.energy = 1;
      this.current = b;
      if (this.isHidden)
        return;
      R.Sprite.prototype.render$2.call(this, g, b);
      ++this.frame;
      t1 = this.active;
      if (!t1 && this.energy <= 0)
        return;
      if (t1 && this.energy <= 1 - this.energyStep)
        this.energy = this.energy + this.energyStep;
      else if (t1)
        this.energy = 1;
      else if (this.energy >= this.energyStep)
        this.energy = this.energy - this.energyStep;
      else
        this.energy = 0;
      for (t1 = this.effects, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1.__internal$_current.render$2(g, b);
    },
    update$1: function(e) {
      var t1;
      if (!e.get$physicsEnabled())
        return;
      t1 = this.active;
      if (t1 && !this.connectedToEnergy) {
        this.active = false;
        this.connectedToEnergy = false;
      } else if (!t1 && this.connectedToEnergy)
        this.active = true;
    },
    makeSensor$2: function(sensor, it) {
      var f, t1;
      for (f = it.get$fixtureList(); f != null; f = f.get$next())
        f.set$isSensor(sensor);
      t1 = this.color;
      t1.a = sensor ? 0.4 : 0.8;
    },
    EnergySprite$2: function(w, isCard) {
      var k, t1;
      this.energySupport = true;
      k = this.isCard ? 1.65 : 1;
      t1 = this.effects;
      t1.push(M.GlowSprite$(0.5, 0.75, 0.02 / k));
      t1.push(M.GlowSprite$(0.2, 0.45, 0.03 / k));
      t1.push(M.GlowSprite$(0.1, 0.25, 0.04 / k));
      this.color = new A.Color4(234, 140, 64, 0.75);
    },
    $isEnergySprite: true,
    static: {EnergySprite$: function(w, isCard) {
        var t1 = new Q.EnergySprite(null, [], 1, 1, 0, 0.2, false, null, isCard, 0, false, false, false, false, false, false, false, false, true, 0, 0, 0, null, null, null, null, null, null);
        t1.Sprite$0();
        t1.EnergySprite$2(w, isCard);
        return t1;
      }}
  }
}],
["", "FeatureManager.dart", , B, {
  "^": "",
  FeatureManager: {
    "^": "Object;"
  }
}],
["", "GameEngine.dart", , X, {
  "^": "",
  HItem: {
    "^": "Object;remove>,card<",
    remove$0: function($receiver) {
      return this.remove.call$0();
    },
    remove$1: function($receiver, arg0) {
      return this.remove.call$1(arg0);
    }
  },
  GameEngine: {
    "^": "State;lastStepTime,physicsEnabled<,isPaused<,ready,canFinishLevel,finishedCurrentLevel,traversed,world,pool,contactListener,g,viewport,debugDraw,bcard,bobbin,obstaclesBobbin,camera,traverser,level,from,to<,history,cards<,stars,levels,staticBlocksSelected,isRewinding,frontRewind,frontRewindLevelComplete,frontRewindLevelFailed,onLevelEndCallback,cardDensity,cardFriction,cardRestitution,currentZoom,i",
    frontRewindLevelComplete$0: function() {
      return this.frontRewindLevelComplete.call$0();
    },
    frontRewindLevelFailed$0: function() {
      return this.frontRewindLevelFailed.call$0();
    },
    onLevelEndCallback$0: function() {
      return this.onLevelEndCallback.call$0();
    },
    start$1: [function(_, params) {
      var t1, t2, t3, t4;
      if (params != null) {
        this.initializeWorld$0();
        t1 = new Float32Array(H._checkLength(2));
        t1[0] = 0;
        t1[1] = 0;
        t2 = $.Input_canvasHeight;
        t3 = $.GameEngine_scale;
        if (typeof t2 !== "number")
          return t2.$div();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = new Float32Array(H._checkLength(2));
        t4[0] = 0;
        t4[1] = t2 / t3;
        t3 = new T.Vector2(new Float32Array(H._checkLength(2)));
        t3.setFrom$1(new T.Vector2(t1));
        t1 = new T.Vector2(new Float32Array(H._checkLength(2)));
        t1.setFrom$1(new T.Vector2(t4));
        t1 = new Y.CanvasViewportTransform(null, t3, 20, t1);
        t1.yFlip = true;
        this.viewport = t1;
        t1.scale = $.GameEngine_scale;
        this.debugDraw = B.SuperCanvasDraw$(t1, this.g);
        M.GameWizard_init();
        t1 = J.getInterceptor$asx(params);
        t3 = t1.$index(params, "chapter");
        t1 = t1.$index(params, "continue") != null && t1.$index(params, "continue") === true;
        t2 = new Q.Level(null, null, [], null, null, null);
        t2.preload$3(0, new X.GameEngine_start_closure(this), t3, t1);
        t2.chapter = t3;
        t2.engine = this;
        this.level = t2;
      }
    }, "call$1", "get$start", 0, 2, null, 22, 57],
    initializeWorld$0: function() {
      var t1, t2, allAsleepCallback;
      t1 = new V.DefaultWorldPool(null, null, null);
      t1.DefaultWorldPool$0();
      this.pool = t1;
      this.contactListener = new Q.CardContactListener(this, H.setRuntimeTypeInfo([], [V.Body]));
      t1 = new Float32Array(H._checkLength(2));
      t1[0] = 0;
      t1[1] = -10;
      t1 = V.World$(new T.Vector2(t1), true, this.pool);
      this.world = t1;
      t2 = this.contactListener;
      t1._contactManager.contactListener = t2;
      this.traverser = new X.Traverser(H.setRuntimeTypeInfo([], [V.Body]), this, null, false);
      allAsleepCallback = new X.GameEngine_initializeWorld_closure(this);
      t2 = new N.Bobbin([], 0, 1, false, null, null);
      t2.allAsleep = new X.GameEngine_initializeWorld_closure0(allAsleepCallback);
      this.bobbin = t2;
      t2 = new N.Bobbin([], 0, 1, false, null, null);
      t2.allAsleep = new X.GameEngine_initializeWorld_closure1(allAsleepCallback);
      this.obstaclesBobbin = t2;
    },
    setCanvasCursor$1: function(_class) {
      var t1 = $.canvas;
      t1.toString;
      new W._ElementCssClassSet(t1).clear$0(0);
      t1 = $.canvas;
      t1.toString;
      new W._ElementCssClassSet(t1).add$1(0, _class + "-cursor");
    },
    createHelperFixture$2: function(w, h) {
      var fd, s;
      fd = V.FixtureDef$();
      fd.isSensor = true;
      s = V.PolygonShape$();
      s.setAsBox$2(w / 2, h / 2);
      fd.shape = s;
      fd.userData = false;
      return fd;
    },
    adjustFixture$2: function(fd, _dynamic) {
      if (_dynamic) {
        fd.density = this.cardDensity;
        fd.friction = this.cardFriction;
        fd.restitution = this.cardRestitution;
      } else
        fd.friction = 0.7;
    },
    createPolygonShape$5: function(x, y, width, height, _dynamic) {
      var sd, t1, t2, fd, bd, t3, body;
      sd = V.PolygonShape$();
      t1 = width / 2;
      t2 = height / 2;
      sd.setAsBox$2(t1, t2);
      fd = V.FixtureDef$();
      fd.shape = sd;
      this.adjustFixture$2(fd, _dynamic);
      bd = V.BodyDef$();
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = x + t1;
      t3[1] = y + t2;
      bd.position = new T.Vector2(t3);
      if (_dynamic)
        bd.angularDamping = 10.5;
      body = this.world.createBody$1(bd);
      body.createFixture$1(fd);
      body.createFixture$1(this.createHelperFixture$2(width, height));
      return body;
    },
    createPolygonShape$4: function(x, y, width, height) {
      return this.createPolygonShape$5(x, y, width, height, false);
    },
    canPut$1: function(ignorePhysics) {
      var t1 = $.get$Input_keys();
      if (!t1.$index(0, "z").get$down())
        if (!$.Input_isAltDown)
          if (!t1.$index(0, "space").get$down())
            if ($.Input_isMouseLeftClicked || t1.$index(0, "enter").get$clicked())
              if (this.contactListener.contactingBodies.length === 0)
                t1 = ignorePhysics || !this.physicsEnabled;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    canPut$0: function() {
      return this.canPut$1(false);
    },
    addCard$7: function(x, y, angle, isStatic, sub, col, isHint) {
      var cs, t1, t2, fd, def, card, sprite;
      cs = V.PolygonShape$();
      t1 = $.GameEngine_scale;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.currentZoom;
      cs.setAsBox$2(45 / t1 / 2 * t2, 2.5 / t1 / 2 * t2);
      fd = V.FixtureDef$();
      fd.shape = cs;
      fd.density = this.cardDensity;
      fd.friction = this.cardFriction;
      fd.restitution = this.cardRestitution;
      def = V.BodyDef$();
      def.type = this.getBodyType$1(this.physicsEnabled);
      t2 = new Float32Array(H._checkLength(2));
      t2[0] = x;
      t2[1] = y;
      def.position = new T.Vector2(t2);
      def.angularDamping = 10.5;
      def.bullet = true;
      def.angle = angle;
      card = this.world.createBody$1(def);
      card.createFixture$1(fd);
      t2 = $.GameEngine_scale;
      if (typeof t2 !== "number")
        return H.iae(t2);
      card.createFixture$1(this.createHelperFixture$2(45 / t2, 2.5 / t2));
      sprite = Q.EnergySprite$(this.world, true);
      sprite.isStatic = isStatic;
      t1 = isStatic === true;
      sprite.energySupport = !t1 || sub != null;
      sprite.isHint = isHint;
      if (col != null)
        sprite.color = col;
      else if (t1)
        sprite.color = new A.Color4(217, 214, 179, 1);
      card.userData = sprite;
      if (sub == null) {
        sub = this.level.current;
        this.cards.push(card);
      } else
        sub.get$cards().push(card);
      if (!isHint) {
        if (t1) {
          sub.set$staticBlocksRemaining(J.$sub$n(sub.get$staticBlocksRemaining(), 1));
          if (J.$eq(sub.get$staticBlocksRemaining(), 0))
            this.staticBlocksSelected = false;
        } else
          sub.set$dynamicBlocksRemaining(J.$sub$n(sub.get$dynamicBlocksRemaining(), 1));
        T.updateBlockButtons(this);
      }
      return card;
    },
    addCard$5: function(x, y, angle, isStatic, sub) {
      return this.addCard$7(x, y, angle, isStatic, sub, null, false);
    },
    addCard$4: function(x, y, angle, isStatic) {
      return this.addCard$7(x, y, angle, isStatic, null, null, false);
    },
    getBodyType$3: function(activeness, isStatic, isHint) {
      return activeness && isStatic !== true && !isHint ? 2 : 0;
    },
    getBodyType$1: function(activeness) {
      return this.getBodyType$3(activeness, false, false);
    },
    togglePhysics$1: function(active) {
      var t1, t2, body, sprite, t3, obstacle;
      this.traversed = false;
      this.physicsEnabled = active;
      if (active) {
        t1 = this.level.current;
        t2 = t1.get$attemptsUsed();
        if (typeof t2 !== "number")
          return t2.$add();
        t1.set$attemptsUsed(t2 + 1);
        A.UserManager_decrement("allAttempts");
        this.bobbin.erase$0();
        this.bobbin.enterFrame$1(this.cards);
      } else
        H.interceptedTypeCast(this.to.userData, "$isSprite").deactivate$0();
      for (t1 = this.cards, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        body = t1.__internal$_current;
        sprite = H.interceptedTypeCast(body.get$userData(), "$isEnergySprite");
        t2 = sprite.isStatic;
        t3 = sprite.isHint;
        J.set$type$x(body, active && t2 !== true && !t3 ? 2 : 0);
        if (!this.physicsEnabled) {
          sprite.active = false;
          sprite.connectedToEnergy = false;
        }
      }
      if (this.physicsEnabled) {
        this.obstaclesBobbin.erase$0();
        this.obstaclesBobbin.enterFrame$1(this.level.current.get$obstacles());
      }
      for (t1 = this.level.current.get$obstacles(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        obstacle = t1.__internal$_current;
        t2 = H.interceptedTypeCast(obstacle.get$userData(), "$isSprite").isStatic !== true;
        if (t2)
          J.set$type$x(obstacle, active && t2 && true ? 2 : 0);
      }
    },
    toggleBoundedCard$1: function(visible) {
      H.interceptedTypeCast(this.bcard.b.userData, "$isSprite").isHidden = !visible;
    },
    update$1: function(delta) {
      var t1, cardsRewind, obstaclesRewind, obstacle, t2, mass, t3, card, minDelta, angle, angle0, speed, t4, t5, col, cp, cardsToRemove, contacting, last, s, sprite;
      if (!this.ready || this.isPaused)
        return;
      if ($.get$Input_keys().$index(0, "esc").get$clicked() && !this.finishedCurrentLevel) {
        R.PromptWindow_close();
        A.Tooltip_closeAll();
        if (!J.get$classes$x(document.querySelector("#wizard-controls")).readClasses$0().contains$1(0, "hidden"))
          J.click$0$x(document.querySelector(".wizard-try"));
        else if ($.hints.purchasesOpened)
          J.click$0$x(document.querySelector(".close-purchases"));
        else {
          $.RatingShower_pauseState = true;
          Z.RatingShower_show(this, 0, 0);
          $.RatingShower_pauseState = false;
        }
        this.saveCurrentProgress$0();
      }
      $.RatingShower_wasJustPaused = false;
      this.setCanvasCursor$1("none");
      this.camera.update$1(delta);
      if (this.physicsEnabled) {
        this.bobbin.enterFrame$1(this.cards);
        t1 = this.level;
        if (t1 != null && t1.current != null)
          this.obstaclesBobbin.enterFrame$1(t1.current.get$obstacles());
      }
      if (this.isRewinding) {
        t1 = this.level;
        if (t1 != null && t1.current != null) {
          cardsRewind = this.bobbin.previousFrame$1(this.cards);
          obstaclesRewind = this.obstaclesBobbin.previousFrame$1(this.level.current.get$obstacles());
          t1 = cardsRewind || obstaclesRewind;
          this.isRewinding = t1;
        } else
          t1 = true;
        if (!t1) {
          this.bobbin.erase$0();
          this.obstaclesBobbin.erase$0();
          t1 = this.bobbin;
          if (t1.rewindComplete != null)
            t1.rewindComplete$0();
          t1 = this.obstaclesBobbin;
          if (t1.rewindComplete != null)
            t1.rewindComplete$0();
        }
      }
      t1 = this.level;
      if (t1 != null && t1.current != null) {
        for (t1 = t1.current.get$obstacles(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          obstacle = t1.__internal$_current;
          t2 = J.getInterceptor$x(obstacle);
          obstacle.get$userData().set$px(J.get$x$x(t2.get$position(obstacle)));
          obstacle.get$userData().set$py(J.get$y$x(t2.get$position(obstacle)));
          mass = obstacle.get$mass();
          if (mass === 0)
            mass += 0.01;
          if (obstacle.get$userData().get$gravity() !== 0) {
            t2 = obstacle.get$userData().get$gravity();
            t3 = new Float32Array(2);
            t3[0] = 0;
            t3[1] = t2;
            obstacle.applyForce$2(new T.Vector2(t3), obstacle.get$worldCenter());
          } else {
            t2 = new Float32Array(2);
            t2[0] = 0;
            t2[1] = mass * -10 * 0.98;
            obstacle.applyForce$2(new T.Vector2(t2), obstacle.get$worldCenter());
          }
        }
        for (t1 = this.cards, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          card = t1.__internal$_current;
          t2 = J.getInterceptor$x(card);
          card.get$userData().set$px(J.get$x$x(t2.get$position(card)));
          card.get$userData().set$py(J.get$y$x(t2.get$position(card)));
        }
      }
      t1 = this.world;
      t2 = t1._flags;
      if ((t2 & 1) === 1) {
        t2 = t1._contactManager;
        t2.broadPhase.updatePairs$1(t2.get$_addPair());
        t2 = t1._flags &= 4294967294;
      }
      t1._flags = t2 | 2;
      t2 = t1.timestep;
      t2.dt = 0.016666666666666666;
      t2.velocityIterations = 10;
      t2.positionIterations = 10;
      t2.inv_dt = 60;
      t2.dtRatio = t1._inverseTimestep * 0.016666666666666666;
      t2.warmStarting = t1._warmStarting;
      t1._contactManager.collide$0();
      if (t2.dt > 0) {
        t1.solve$1(t2);
        if (t1._continuousPhysics)
          t1.solveTimeOfImpact$0();
        t1._inverseTimestep = t2.inv_dt;
      }
      if ((t1._flags & 4) === 4)
        t1.clearForces$0();
      t1._flags &= 4294967293;
      t1 = this.level;
      if (t1 != null && t1.current != null) {
        for (t1 = t1.current.get$obstacles(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          obstacle = t1.__internal$_current;
          minDelta = Math.abs(obstacle.get$userData().get$gravity()) > 0.1 || obstacle.get$userData().get$gravity() === 0 ? 0.001 : 0.00001;
          t2 = J.getInterceptor$x(obstacle);
          if (Math.abs(obstacle.get$userData().get$px() - J.get$x$x(t2.get$position(obstacle))) <= minDelta && Math.abs(obstacle.get$userData().get$py() - J.get$y$x(t2.get$position(obstacle))) <= minDelta)
            obstacle.set$awake(false);
        }
        for (t1 = this.cards, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          card = t1.__internal$_current;
          minDelta = Math.abs(this.level.current.get$gravity()) > 0.1 ? 1e-7 : 0.001;
          if (this.traversed)
            if (!this.traverser.hasPath) {
              t2 = J.getInterceptor$x(card);
              t2 = Math.abs(card.get$userData().get$px() - J.get$x$x(t2.get$position(card))) <= minDelta && Math.abs(card.get$userData().get$py() - J.get$y$x(t2.get$position(card))) <= minDelta;
            } else
              t2 = false;
          else
            t2 = false;
          if (t2)
            card.set$awake(false);
        }
      }
      t1 = this.bcard;
      if (t1 != null) {
        angle = t1.b.sweep.angle;
        t2 = $.get$Input_keys();
        if (t2.$index(0, "q").get$down())
          angle0 = angle + 0.04363323129985824;
        else
          angle0 = t2.$index(0, "e").get$down() ? angle - 0.04363323129985824 : angle - $.Input_wheelDirection * 0.1308996938995747;
        if (angle0 !== angle) {
          M.GameWizard_onBlockRotate();
          J.$index$asx($.get$context(), "Features").callMethod$1("scrollParentTop");
        }
        t3 = $.GameEngine_scale;
        if (typeof t3 !== "number")
          return H.iae(t3);
        speed = 1 / t3;
        if ($.Input_mouseMoved) {
          t3 = $.Input_mouseX;
          t4 = $.Input_mouseY;
          t5 = new Float32Array(H._checkLength(2));
          t5[0] = t3;
          t5[1] = t4;
          t1.pos = new T.Vector2(t5);
        }
        if (t2.$index(0, "w").get$down()) {
          t3 = t1.pos.storage;
          t3[1] = t3[1] + speed;
        }
        if (t2.$index(0, "a").get$down()) {
          t3 = t1.pos.storage;
          t3[0] = t3[0] - speed;
        }
        if (t2.$index(0, "s").get$down()) {
          t3 = t1.pos.storage;
          t3[1] = t3[1] - speed;
        }
        if (t2.$index(0, "d").get$down()) {
          t2 = t1.pos.storage;
          t2[0] = t2[0] + speed;
        }
        t1.b.setTransform$2(0, t1.pos, angle0);
        t2 = t1.e;
        t3 = t2.level.current;
        if (t3 != null) {
          if (t2.staticBlocksSelected) {
            col = new A.Color4(217, 214, 179, 1);
            if (t2.physicsEnabled || J.$eq(t3.get$staticBlocksRemaining(), 0))
              col = new A.Color4(134, 133, 119, 1);
          } else {
            col = new A.Color4(234, 140, 64, 1);
            if (t2.physicsEnabled || J.$eq(t3.get$dynamicBlocksRemaining(), 0))
              col = new A.Color4(113, 86, 64, 1);
          }
          t2 = t1.e;
          if (t2.physicsEnabled) {
            col = new A.Color4(0, 0, 0, 0);
            t2.setCanvasCursor$1("default");
          }
          H.interceptedTypeCast(t1.b.userData, "$isSprite").color = col;
        }
      }
      cp = this.canPut$0();
      t1 = this.level.current;
      if (t1 != null)
        if (!(this.staticBlocksSelected && J.$gt$n(t1.get$staticBlocksRemaining(), 0)))
          t1 = !this.staticBlocksSelected && J.$gt$n(this.level.current.get$dynamicBlocksRemaining(), 0);
        else
          t1 = true;
      else
        t1 = false;
      if (t1) {
        if (cp) {
          t1 = this.bcard.b;
          t2 = t1.originTransform.position.storage;
          this.addHistoryState$2(this.addCard$4(t2[0], t2[1], t1.sweep.angle, this.staticBlocksSelected), false);
        } else if (this.canPut$1(true))
          T.blink("#toggle-physics");
      } else if (cp && this.staticBlocksSelected && J.$eq(this.level.current.get$staticBlocksRemaining(), 0))
        T.blink(".static");
      else if (cp && !this.staticBlocksSelected && J.$eq(this.level.current.get$dynamicBlocksRemaining(), 0))
        T.blink(".dynamic");
      if (this.canPut$0() && J.$eq(this.level.current.get$dynamicBlocksRemaining(), 0) && J.$eq(this.level.current.get$staticBlocksRemaining(), 0))
        if ($.get$GameWizard_storage().getItem("runout_occured") == null && C.JSArray_methods.contains$1($.manager.states, $.engine)) {
          A.Tooltip_show(document.querySelector(".dynamic"), J.$index$asx(J.$index$asx($.get$context(), "locale"), "wizard_limited_amount"), 2, null, 1500, 300, 0, 0, 0, 0);
          $.get$GameWizard_storage().setItem("runout_occured", "true");
        }
      t1 = $.get$Input_keys();
      if (!(t1.$index(0, "shift").get$down() && t1.$index(0, "z").get$clicked()))
        t2 = t1.$index(0, "z").get$down() && t1.$index(0, "shift").get$clicked();
      else
        t2 = true;
      if (t2) {
        this.toggleBoundedCard$1(false);
        this.zoom$1(0, true);
      } else {
        if (!(t1.$index(0, "z").get$down() && $.Input_isAltClicked))
          t2 = $.Input_isAltDown && t1.$index(0, "z").get$clicked();
        else
          t2 = true;
        if (t2) {
          this.toggleBoundedCard$1(false);
          this.zoom$1(0, false);
        }
      }
      if (t1.$index(0, "1").get$clicked()) {
        this.staticBlocksSelected = false;
        T.updateBlockButtons(this);
      }
      if (t1.$index(0, "2").get$clicked() && J.$gt$n(this.level.current.get$staticBlocksRemaining(), 0)) {
        this.staticBlocksSelected = true;
        T.updateBlockButtons(this);
      }
      if (!((t1.$index(0, "ctrl").get$down() || $.Input_isCmdDown) && t1.$index(0, "shift").get$clicked()))
        t2 = (t1.$index(0, "ctrl").get$clicked() || $.Input_isCmdClicked) && t1.$index(0, "shift").get$down();
      else
        t2 = true;
      if (t2)
        J.click$0$x(document.querySelector("#toggle-physics"));
      if (this.contactListener.contactingBodies.length !== 0)
        t2 = ($.Input_isMouseRightClicked || t1.$index(0, "delete").get$clicked()) && !this.isRewinding;
      else
        t2 = false;
      if (t2) {
        cardsToRemove = H.setRuntimeTypeInfo([], [V.Body]);
        C.JSArray_methods.addAll$1(cardsToRemove, this.contactListener.contactingBodies);
        C.JSArray_methods.set$length(this.contactListener.contactingBodies, 0);
        for (t1 = new H.ListIterator(cardsToRemove, cardsToRemove.length, 0, null); t1.moveNext$0();) {
          contacting = t1.__internal$_current;
          if (C.JSArray_methods.contains$1(this.cards, contacting)) {
            this.removeCard$1(contacting);
            this.addHistoryState$2(contacting, true);
          }
        }
      } else if ((t1.$index(0, "ctrl").get$down() || $.Input_isCmdDown) && t1.$index(0, "z").get$clicked() && this.history.length > 0)
        if (!this.physicsEnabled) {
          t1 = this.history;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          last = t1.pop();
          t1 = last.card;
          s = H.interceptedTypeCast(t1.get$userData(), "$isEnergySprite").isStatic;
          if (last.remove) {
            t2 = J.getInterceptor$x(t1);
            this.addCard$4(J.get$x$x(t2.get$position(t1)), J.get$y$x(t2.get$position(t1)), t1.get$angle(), s);
          } else
            this.removeCard$1(t1);
        } else
          J.click$0$x(document.querySelector("#toggle-physics"));
      for (t1 = this.cards, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        H.interceptedTypeCast(t1.__internal$_current.get$userData(), "$isEnergySprite").update$1(this);
      this.finishedCurrentLevel = false;
      t1 = this.to;
      if (t1 != null) {
        sprite = H.interceptedTypeCast(t1.userData, "$isEnergySprite");
        if (this.physicsEnabled) {
          sprite.update$1(this);
          if (sprite.energy >= 1 - sprite.energyStep && this.canFinishLevel && this.level.current != null) {
            this.onLevelEndCallback$0();
            this.finishedCurrentLevel = true;
            this.level.current.set$completed(true);
            this.level.current.getRating$0();
            this.saveCurrentProgress$0();
            if (!this.frontRewind) {
              t1 = this.level;
              T.StarManager_saveFrom(t1.chapter, t1.subLevels);
              Z.RatingShower_show(this, this.level.current.get$rating(), 0);
            }
            if (J.$eq(this.level.chapter, 1) && J.$eq(J.get$index$x(this.level.current), 1))
              M.GameWizard_finish();
            if (this.frontRewind)
              this.frontRewindLevelComplete$0();
          }
        } else {
          sprite.active = false;
          sprite.connectedToEnergy = false;
        }
      }
      A.Input_update();
    },
    countCards$1: function(isStatic) {
      var t1, n;
      for (t1 = this.cards, t1 = new H.ListIterator(t1, t1.length, 0, null), n = 0; t1.moveNext$0();)
        n += J.$eq(H.interceptedTypeCast(t1.__internal$_current.get$userData(), "$isEnergySprite").isStatic, isStatic) ? 1 : 0;
      return n;
    },
    saveCurrentProgress$0: function() {
      var t1, id;
      t1 = this.level;
      if (t1 != null && t1.current != null) {
        t1.saveAsLastLevel$0();
        id = C.JSString_methods.$add(C.JSString_methods.$add("level_", J.toString$0(this.level.chapter)) + "_", J.toString$0(J.get$index$x(this.level.current)));
        if (this.ready)
          t1 = window.localStorage.getItem(id) != null || this.cards.length !== 0;
        else
          t1 = false;
        if (t1)
          window.localStorage.setItem(id, Q.LevelSerializer_toJSON(this.cards, this.bobbin.list, this.level.current.get$obstacles(), this.obstaclesBobbin.list, this.level.current.get$completed()));
      }
    },
    restartLevel$0: function() {
      T.applyPhysicsLabelToButton();
      H.interceptedTypeCast(this.to.userData, "$isEnergySprite").energy = 0;
    },
    addHistoryState$2: function(body, remove) {
      var t1, t2, current, item;
      for (t1 = this.history, t2 = new H.ListIterator(t1, t1.length, 0, null), current = 0; t2.moveNext$0();) {
        item = t2.__internal$_current;
        if (J.$eq(body.get$userData().get$isStatic(), item.get$card().get$userData().get$isStatic()))
          ++current;
      }
      if (body.get$userData().get$isStatic() === true) {
        t2 = this.level.current.get$maxStaticBlocks();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = current < t2;
      } else
        t2 = false;
      if (!t2)
        if (body.get$userData().get$isStatic() !== true) {
          t2 = this.level.current.get$maxDynamicBlocks();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = current < t2;
        } else
          t2 = false;
      else
        t2 = true;
      if (!t2)
        if (t1.length >= 1)
          C.JSArray_methods.removeRange$2(t1, 0, 1);
      t1.push(new X.HItem(remove, body));
    },
    render$0: function() {
      if (this.ready) {
        var b = this.world._bodyList;
        for (; b != null;) {
          if (b.get$userData() != null)
            H.interceptedTypeCast(b.get$userData(), "$isSprite").render$2(this.debugDraw, b);
          b = b.get$next();
        }
      }
    },
    rewind$1: function(list) {
      this.togglePhysics$1(false);
      this.isRewinding = true;
    },
    rewind$0: function() {
      return this.rewind$1(null);
    },
    removeCard$1: function(c) {
      var t1, _history, t2, item, sprite;
      t1 = this.history;
      if (t1.length > 0) {
        _history = [];
        _history.$builtinTypeInfo = [X.HItem];
        C.JSArray_methods.addAll$1(_history, t1);
        for (t2 = new H.ListIterator(_history, _history.length, 0, null); t2.moveNext$0();) {
          item = t2.__internal$_current;
          if (J.get$remove$ax(item) !== true && J.$eq(item.get$card(), c))
            C.JSArray_methods.remove$1(t1, item);
        }
      }
      this.world.destroyBody$1(c);
      C.JSArray_methods.remove$1(this.cards, c);
      sprite = H.interceptedTypeCast(c.get$userData(), "$isEnergySprite");
      if (!sprite.isHint) {
        if (sprite.isStatic === true && J.$le$n(J.$add$ns(this.level.current.get$staticBlocksRemaining(), 1), this.level.current.get$maxStaticBlocks())) {
          t1 = this.level.current;
          t1.set$staticBlocksRemaining(J.$add$ns(t1.get$staticBlocksRemaining(), 1));
        } else if (J.$le$n(J.$add$ns(this.level.current.get$dynamicBlocksRemaining(), 1), this.level.current.get$maxDynamicBlocks())) {
          t1 = this.level.current;
          t1.set$dynamicBlocksRemaining(J.$add$ns(t1.get$dynamicBlocksRemaining(), 1));
        }
        T.updateBlockButtons(this);
      }
    },
    centerBetweenCubes$1: function(newZoom) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.camera;
      t2 = this.from.originTransform.position.storage;
      t3 = t2[0];
      t4 = this.to.originTransform.position.storage;
      t5 = t4[0];
      t6 = $.Input_canvasWidth;
      t7 = $.GameEngine_scale;
      if (typeof t6 !== "number")
        return t6.$div();
      if (typeof t7 !== "number")
        return H.iae(t7);
      t1.targetOffsetX = (t3 + (t5 - t3) / 2 - t6 / t7 / 2) * t7;
      t2 = t2[1];
      t4 = t4[1];
      t6 = $.Input_canvasHeight;
      if (typeof t6 !== "number")
        return t6.$div();
      t1.targetOffsetY = -(t2 + (t4 - t2) / 2 - t6 / t7 / 2) * t7;
      t1.checkTarget$0();
      this.camera.updateEngine$0();
      this.currentZoom = newZoom;
    },
    zoom$1: function(_, zoomIn) {
      var newZoom, newZoom0, t1, t2;
      if (zoomIn) {
        newZoom = this.currentZoom;
        newZoom0 = newZoom <= 2.8 ? newZoom + 0.2 : newZoom;
        t1 = newZoom;
        newZoom = newZoom0;
      } else {
        newZoom = this.currentZoom;
        newZoom0 = newZoom >= 1.2 ? newZoom - 0.2 : newZoom;
        t1 = newZoom;
        newZoom = newZoom0;
      }
      if (newZoom !== t1) {
        t2 = this.camera;
        t2.finalZoom = newZoom;
        t2.startZoom = t1;
        t2.zoomAnimation = R.DoubleAnimation$(t1, newZoom, 75);
        this.camera.updateZoom$0();
        this.camera.ignoreAutoCheck = true;
        this.centerBetweenCubes$1(newZoom);
        this.camera.zoomEnd = new X.GameEngine_zoom_closure(this);
      }
    },
    clear$1: function(_, noLocalStorageClear) {
      var _cards, t1;
      if (!noLocalStorageClear)
        J.remove$1$ax(window.localStorage, C.JSString_methods.$add(C.JSString_methods.$add("level_", J.toString$0(this.level.chapter)) + "_", J.toString$0(J.$add$ns(J.get$index$x(this.level.current), 1))));
      T.applyPhysicsLabelToButton();
      C.JSArray_methods.set$length(this.history, 0);
      this.bobbin.erase$0();
      this.obstaclesBobbin.erase$0();
      _cards = H.setRuntimeTypeInfo([], [V.Body]);
      C.JSArray_methods.addAll$1(_cards, this.cards);
      for (t1 = new H.ListIterator(_cards, _cards.length, 0, null); t1.moveNext$0();)
        this.removeCard$1(t1.__internal$_current);
    },
    clear$0: function($receiver) {
      return this.clear$1($receiver, false);
    },
    static: {"^": "GameEngine_NSCALE,GameEngine_NCARD_WIDTH,GameEngine_NCARD_HEIGHT,GameEngine_NENERGY_BLOCK_WIDTH,GameEngine_NENERGY_BLOCK_HEIGHT,GameEngine_GRAVITY,GameEngine_scale"}
  },
  closure: {
    "^": "Closure:46;",
    call$0: function() {
    }
  },
  closure0: {
    "^": "Closure:46;",
    call$0: function() {
    }
  },
  closure1: {
    "^": "Closure:46;",
    call$0: function() {
    }
  },
  GameEngine_start_closure: {
    "^": "Closure:46;this_0",
    call$0: function() {
      var t1, t2;
      t1 = $.lastAttemptsUsed;
      if (t1 !== -1) {
        this.this_0.level.current.set$attemptsUsed(t1);
        $.lastAttemptsUsed = -1;
      }
      t1 = this.this_0;
      t1.ready = true;
      t2 = new Float32Array(H._checkLength(2));
      t2[0] = 0;
      t2[1] = 0;
      t2 = new Y.BoundedCard(null, null, new T.Vector2(t2));
      t2.BoundedCard$1(t1);
      t1.bcard = t2;
    }
  },
  GameEngine_initializeWorld_closure: {
    "^": "Closure:58;this_0",
    call$1: function(cardsReady) {
      var t1, t2, card;
      t1 = this.this_0;
      t2 = t1.traverser;
      C.JSArray_methods.set$length(t2.traversed, 0);
      t2.hasPath = false;
      t2 = t1.from.contactList;
      if (t2 != null)
        t1.traverser.traverseEdges$1(t2);
      if (!t1.traverser.hasPath) {
        if (t1.cards.length !== 0 && cardsReady)
          M.GameWizard_showRewind();
        for (t2 = t1.cards, t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
          card = t2.__internal$_current;
          if (t1.traverser.checkEnergyConnection$1(card))
            t1.traverser.traverseEdges$1(card.get$contactList());
        }
      }
      if (!t1.traverser.hasPath && t1.frontRewind)
        t1.frontRewindLevelFailed$0();
      t1.traversed = true;
    },
    call$0: function() {
      return this.call$1(false);
    }
  },
  GameEngine_initializeWorld_closure0: {
    "^": "Closure:46;allAsleepCallback_1",
    call$0: function() {
      return this.allAsleepCallback_1.call$1(true);
    }
  },
  GameEngine_initializeWorld_closure1: {
    "^": "Closure:46;allAsleepCallback_2",
    call$0: function() {
      return this.allAsleepCallback_2.call$1(false);
    }
  },
  GameEngine_zoom_closure: {
    "^": "Closure:46;this_0",
    call$0: function() {
      this.this_0.camera.ignoreAutoCheck = false;
    }
  }
}],
["", "GameWizard.dart", , M, {
  "^": "",
  GameWizard_enterStep: function(box, callback) {
    var t1, setNewBox;
    t1 = $.GameWizard_currentBox;
    if (t1 == null ? box != null : t1 !== box) {
      R.PromptWindow_close();
      setNewBox = new M.GameWizard_enterStep_closure(box, callback);
      t1 = $.GameWizard_currentBox;
      if (t1 != null)
        T.fadeBoxOut(t1, 175, setNewBox);
      else
        setNewBox.call$0();
    }
  },
  GameWizard_finish: function() {
    $.GameWizard_showing = false;
    var t1 = $.GameWizard_currentBox;
    if (t1 != null) {
      T.fadeBoxOut(t1, 175, null);
      T.fadeBoxOut($.get$GameWizard_progress(), 175, null);
      A.Tooltip_closeAll();
    }
  },
  GameWizard_init: function() {
    C.EventStreamProvider_click._forElementList$1(W._FrozenElementList$_wrap(document.querySelectorAll(".progress-step"), null)).listen$1(new M.GameWizard_init_closure());
    var t1 = J.get$onClick$x(document.querySelector(".show-goal"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.GameWizard_init_closure0()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
  },
  GameWizard_manage: function(chapter, level) {
    var t1 = J.getInterceptor(chapter);
    if (t1.$eq(chapter, 1) && J.$eq(level, 1))
      M.GameWizard_showOverview();
    else if (t1.$eq(chapter, 1) && J.$eq(level, 3))
      M.GameWizard_showRotation();
    else if (t1.$eq(chapter, 1) && J.$eq(level, 6))
      ;
    else if (t1.$eq(chapter, 1) && J.$eq(level, 5))
      M.GameWizard_showZoom();
    else if (t1.$eq(chapter, 1) && J.$eq(level, 8))
      M.GameWizard_showStaticAppear();
    M.GameWizard_tryShowingHintsTooltip();
  },
  GameWizard_showHowto: function(closeCallback) {
    var t1, t2, showClose, change;
    A.Tooltip_closeAll();
    t1 = document.querySelector("#tutorial-player");
    t1.toString;
    t2 = $.get$context();
    t1.setAttribute("src", J.get$src$x(J.$index$asx(J.$index$asx(t2, "Features"), "tutorial_img")));
    J.get$classes$x(document.querySelector("#howto")).remove$1(0, "hidden");
    L.animate(document.querySelector("#howto"), 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", 0, "opacity", 1], null, null));
    J.set$opacity$x(document.querySelector(".close-howto").style, "0.0");
    P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 225, 0, 0), new M.GameWizard_showHowto_closure());
    showClose = new M.GameWizard_showHowto_closure0();
    if ($.get$GameWizard_storage().getItem("seen_howto") != null)
      showClose.call$0();
    else
      P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 8), showClose);
    change = new M.GameWizard_showHowto_closure1([P.LinkedHashMap_LinkedHashMap$_literal(["time", 0, "text", J.$index$asx(J.$index$asx(t2, "locale"), "wizard_place")], null, null), P.LinkedHashMap_LinkedHashMap$_literal(["time", 3500, "text", J.$index$asx(J.$index$asx(t2, "locale"), "wizard_apply")], null, null), P.LinkedHashMap_LinkedHashMap$_literal(["time", 7000, "text", J.$index$asx(J.$index$asx(t2, "locale"), "goal_desc")], null, null)]);
    P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 40500, 0, 0), new M.GameWizard_showHowto_closure2(change));
    change.call$0();
    t1 = document.querySelector(".close-howto");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new M.GameWizard_showHowto_closure3(closeCallback), false);
  },
  GameWizard_showOverview: function() {
    $.GameWizard_showing = true;
    var showTooltips = new M.GameWizard_showOverview_closure();
    if ($.get$GameWizard_storage().getItem("seen_howto") == null)
      M.GameWizard_showHowto(showTooltips);
    else
      showTooltips.call$0();
  },
  GameWizard_showRewind: function() {
    if ($.get$GameWizard_storage().getItem("apply_fail_occured") == null && C.JSArray_methods.contains$1($.manager.states, $.engine)) {
      A.Tooltip_show(document.querySelector("#toggle-physics"), J.$index$asx(J.$index$asx($.get$context(), "locale"), "wizard_rewind"), 3, new M.GameWizard_showRewind_closure(), 0, 300, 0, 0, 0, 0);
      $.get$GameWizard_storage().setItem("apply_fail_occured", "true");
    }
  },
  GameWizard_showRotation: function() {
    P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 1), new M.GameWizard_showRotation_closure());
  },
  GameWizard_onBlockRotate: function() {
    if ($.GameWizard_showingRotation) {
      $.GameWizard_showingRotation = false;
      P.Timer_Timer(P.Duration$(0, 0, 0, 475, 0, 0), new M.GameWizard_onBlockRotate_closure());
    }
  },
  GameWizard_tryShowingHintsTooltip: function() {
    P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 20000, 0, 0), new M.GameWizard_tryShowingHintsTooltip_closure());
  },
  GameWizard_showZoom: function() {
    P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 3), new M.GameWizard_showZoom_closure());
  },
  GameWizard_showStaticAppear: function() {
    var _static = document.querySelector(".static");
    P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 1), new M.GameWizard_showStaticAppear_closure(_static));
  },
  GameWizard_enterStep_closure: {
    "^": "Closure:46;box_0,callback_1",
    call$0: function() {
      var t1 = this.box_0;
      T.fadeBoxIn(t1, 175, this.callback_1);
      $.GameWizard_currentBox = t1;
    }
  },
  GameWizard_init_closure: {
    "^": "Closure:44;",
    call$1: [function($event) {
      var t1 = J.getInterceptor$x($event);
      if (J.get$classes$x(t1.get$target($event)).readClasses$0().contains$1(0, "wizard-controls"))
        M.GameWizard_enterStep(document.querySelector("#wizard-controls"), new M.GameWizard_init__closure());
      else if (J.get$classes$x(t1.get$target($event)).readClasses$0().contains$1(0, "wizard-try"))
        M.GameWizard_enterStep(document.querySelector("#wizard-try"), new M.GameWizard_init__closure0());
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_init__closure: {
    "^": "Closure:46;",
    call$0: function() {
      A.Tooltip_closeAll();
      Z.RatingShower_blurGameBox();
    }
  },
  GameWizard_init__closure0: {
    "^": "Closure:46;",
    call$0: function() {
      Z.RatingShower_unblurGameBox();
    }
  },
  GameWizard_init_closure0: {
    "^": "Closure:44;",
    call$1: [function($event) {
      M.GameWizard_showHowto(null);
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showHowto_closure: {
    "^": "Closure:59;",
    call$1: function(timer) {
      var t1 = $.get$context();
      if (t1.callMethod$2("imageLoaded", [J.$index$asx(J.$index$asx(t1, "Features"), "tutorial_img")]) === true) {
        L.animate(document.querySelector(".howto-loading"), 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["opacity", 0], null, null));
        L.animate(document.querySelector("#tutorial-player"), 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["opacity", 1], null, null));
        timer.cancel$0();
      }
    }
  },
  GameWizard_showHowto_closure0: {
    "^": "Closure:46;",
    call$0: function() {
      L.animate(document.querySelector(".close-howto"), 350, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["opacity", 0.5], null, null));
      $.get$GameWizard_storage().setItem("seen_howto", "true");
    }
  },
  GameWizard_showHowto_closure1: {
    "^": "Closure:46;frames_0",
    call$0: function() {
      var t1, i, text;
      for (t1 = this.frames_0, i = 0; i < 3; ++i) {
        text = t1[i].$index(0, "text");
        P.Timer_Timer(new P.Duration(0 + J.$mul$ns(t1[i].$index(0, "time"), 1000) + 0), new M.GameWizard_showHowto__closure(text));
      }
    }
  },
  GameWizard_showHowto__closure: {
    "^": "Closure:46;text_1",
    call$0: function() {
      J.set$innerHtml$x(document.querySelector(".howto-goal"), this.text_1);
    }
  },
  GameWizard_showHowto_closure2: {
    "^": "Closure:59;change_2",
    call$1: function(timer) {
      return this.change_2.call$0();
    }
  },
  GameWizard_showHowto_closure3: {
    "^": "Closure:44;closeCallback_3",
    call$1: [function($event) {
      var t1;
      L.animate(document.querySelector("#howto"), 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", 800, "opacity", 0], null, null));
      t1 = this.closeCallback_3;
      if (t1 != null)
        t1.call$0();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showOverview_closure: {
    "^": "Closure:46;",
    call$0: function() {
      var t1, t2, bodyStream;
      if ($.engine.cards.length === 0) {
        $.hints.addHintCard$5(1.671, 2.5, 0, 1, false);
        t1 = J.$index$asx(J.$index$asx($.get$context(), "locale"), "wizard_place");
        t2 = $.Input_canvasX;
        if (typeof t2 !== "number")
          return t2.$add();
        A.Tooltip_showSimple(t1, t2 + 225, 335, null, "");
        t2 = J.get$onClick$x(document.querySelector("body"));
        bodyStream = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new M.GameWizard_showOverview__closure()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)]);
        bodyStream._tryResume$0();
        t2 = J.get$onClick$x(document.querySelector("body"));
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new M.GameWizard_showOverview__closure0(bodyStream)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      }
    }
  },
  GameWizard_showOverview__closure: {
    "^": "Closure:60;",
    call$1: [function($event) {
      var t1, toggleStream;
      if (J.get$classes$x(J.get$target$x($event)).readClasses$0().contains$1(0, "ignore-close-all"))
        return;
      A.Tooltip_closeAll();
      $.hints.clearHintCards$0();
      A.Tooltip_show(document.querySelector("#toggle-physics"), J.$index$asx(J.$index$asx($.get$context(), "locale"), "wizard_apply"), 3, null, 0, 300, 0, 0, 0, 0);
      t1 = J.get$onClick$x(document.querySelector("#toggle-physics"));
      toggleStream = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.GameWizard_showOverview___closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      toggleStream._tryResume$0();
      t1 = J.get$onClick$x(document.querySelector("#toggle-physics"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.GameWizard_showOverview___closure0(toggleStream)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showOverview___closure: {
    "^": "Closure:44;",
    call$1: [function($event) {
      A.Tooltip_closeAll();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showOverview___closure0: {
    "^": "Closure:44;toggleStream_0",
    call$1: [function($event) {
      this.toggleStream_0.cancel$0();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showOverview__closure0: {
    "^": "Closure:44;bodyStream_1",
    call$1: [function($event) {
      this.bodyStream_1.cancel$0();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showRewind_closure: {
    "^": "Closure:46;",
    call$0: function() {
      var t1, t2, bodyStream;
      t1 = J.$index$asx(J.$index$asx($.get$context(), "locale"), "wizard_remove");
      t2 = $.Input_canvasX;
      if (typeof t2 !== "number")
        return t2.$add();
      A.Tooltip_showSimple(t1, t2 + 200, 225, null, "");
      t2 = J.get$onContextMenu$x(document.querySelector("body"));
      bodyStream = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new M.GameWizard_showRewind__closure()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)]);
      bodyStream._tryResume$0();
      t2 = J.get$onContextMenu$x(document.querySelector("body"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new M.GameWizard_showRewind__closure0(bodyStream)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
    }
  },
  GameWizard_showRewind__closure: {
    "^": "Closure:44;",
    call$1: [function($event) {
      if (J.get$classes$x(J.get$target$x($event)).readClasses$0().contains$1(0, "ignore-close-all"))
        return;
      A.Tooltip_closeAll();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showRewind__closure0: {
    "^": "Closure:44;bodyStream_0",
    call$1: [function($event) {
      this.bodyStream_0.cancel$0();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showRotation_closure: {
    "^": "Closure:46;",
    call$0: function() {
      var t1, t2;
      if (C.JSArray_methods.contains$1($.manager.states, $.engine)) {
        $.GameWizard_showingRotation = true;
        t1 = J.$index$asx(J.$index$asx($.get$context(), "locale"), "wizard_rotate");
        t2 = $.Input_canvasX;
        if (typeof t2 !== "number")
          return t2.$add();
        A.Tooltip_showSimple(t1, t2 + 100, 285, null, "");
      }
    }
  },
  GameWizard_onBlockRotate_closure: {
    "^": "Closure:46;",
    call$0: function() {
      A.Tooltip_closeAll();
    }
  },
  GameWizard_tryShowingHintsTooltip_closure: {
    "^": "Closure:59;",
    call$1: function(timer) {
      timer.cancel$0();
    }
  },
  GameWizard_showZoom_closure: {
    "^": "Closure:46;",
    call$0: function() {
      if (C.JSArray_methods.contains$1($.manager.states, $.engine)) {
        A.Tooltip_show(document.querySelector("#zoom-out"), J.$index$asx(J.$index$asx($.get$context(), "locale"), "wizard_zoom"), 3, null, 0, 300, -25, -30, 0, 0);
        var t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".zb"), null);
        t1.forEach$1(t1, new M.GameWizard_showZoom__closure());
      }
    }
  },
  GameWizard_showZoom__closure: {
    "^": "Closure:44;",
    call$1: function(el) {
      var t1, stream;
      t1 = J.getInterceptor$x(el);
      stream = t1.get$onClick(el).listen$1(new M.GameWizard_showZoom___closure());
      t1.get$onClick(el).listen$1(new M.GameWizard_showZoom___closure0(stream));
    }
  },
  GameWizard_showZoom___closure: {
    "^": "Closure:44;",
    call$1: [function($event) {
      A.Tooltip_closeAll();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showZoom___closure0: {
    "^": "Closure:44;stream_0",
    call$1: [function($event) {
      this.stream_0.cancel$0();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  GameWizard_showStaticAppear_closure: {
    "^": "Closure:46;_static_0",
    call$0: function() {
      var t1 = this._static_0;
      if (t1.hidden !== true)
        A.Tooltip_show(t1, J.$index$asx(J.$index$asx($.get$context(), "locale"), "wizard_static"), 2, null, 0, 300, 0, 0, -3, 0);
    }
  }
}],
["", "GlowSprite.dart", , M, {
  "^": "",
  GlowSprite: {
    "^": "Sprite;animation,additionalOffset,dFrom,dTo,energy,isInner,isHidden,active,connectedToEnergy,energySupport,isStatic,isHint,contactOverlay,enabled,px,py,gravity,id,bFrom,color,canvasDraw,center,axis",
    render$2: function(g, b) {
      var $parent, bFrom, shape, t1, t2, t3, t4, t5, v, fd, f;
      $parent = H.interceptedTypeCast(b.get$userData(), "$isEnergySprite");
      if (!$parent.active && !$parent.alwaysAnimate)
        return;
      bFrom = $parent.bFrom;
      if (($parent.alwaysAnimate ? b : bFrom) == null)
        return;
      shape = J.clone$0$x(J.get$shape$x(b.get$fixtureList().next));
      this.energy = H.interceptedTypeCast(b.get$userData(), "$isSprite").energy;
      t1 = shape.vertices;
      t2 = t1[0];
      t3 = J.getInterceptor$x(t2);
      t4 = t3.get$x(t2);
      t5 = $.GameEngine_scale;
      if (typeof t5 !== "number")
        return H.iae(t5);
      t3.set$x(t2, J.$add$ns(t4, 45 / t5 * (1 - this.energy) / 2));
      t5 = t1[3];
      t4 = J.getInterceptor$x(t5);
      t2 = t4.get$x(t5);
      t3 = $.GameEngine_scale;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4.set$x(t5, J.$add$ns(t2, 45 / t3 * (1 - this.energy) / 2));
      t3 = t1[1];
      t2 = J.getInterceptor$x(t3);
      t5 = t2.get$x(t3);
      t4 = $.GameEngine_scale;
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2.set$x(t3, J.$sub$n(t5, 45 / t4 * (1 - this.energy) / 2));
      t4 = t1[2];
      t5 = J.getInterceptor$x(t4);
      t3 = t5.get$x(t4);
      t2 = $.GameEngine_scale;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t5.set$x(t4, J.$sub$n(t3, 45 / t2 * (1 - this.energy) / 2));
      for (t1 = new H.ListIterator(t1, 12, 0, null), t2 = this.additionalOffset; t1.moveNext$0();) {
        v = t1.__internal$_current;
        t3 = J.getInterceptor$x(v);
        t4 = t3.get$x(v);
        t3.set$x(v, J.$add$ns(t4, (J.$gt$n(t3.get$x(v), 0) ? 1 : -1) * t2));
        t4 = t3.get$y(v);
        t3.set$y(v, J.$add$ns(t4, (J.$gt$n(t3.get$y(v), 0) ? 1 : -1) * t2));
      }
      this.color.a = this.animation.next$0();
      if (this.animation.isFinished) {
        t1 = R.DoubleAnimation$(this.dTo, this.dFrom, 20);
        this.animation = t1;
        this.dFrom = t1.start;
        this.dTo = t1.end;
      }
      fd = V.FixtureDef$();
      fd.shape = shape;
      f = V.Fixture$();
      f.create$2(null, fd);
      this.canvasDraw = g;
      this.drawShape$3(f, b.get$originTransform(), this.color);
    },
    GlowSprite$3: function(dFrom, dTo, additionalOffset) {
      this.animation = R.DoubleAnimation$(this.dFrom, this.dTo, 20);
      this.color = new A.Color4(29, 78, 187, this.dFrom);
    },
    static: {"^": "GlowSprite_FRAME_COUNT", GlowSprite$: function(dFrom, dTo, additionalOffset) {
        var t1 = new M.GlowSprite(null, additionalOffset, dFrom, dTo, 0, false, false, false, false, false, false, false, false, true, 0, 0, 0, null, null, null, null, null, null);
        t1.Sprite$0();
        t1.GlowSprite$3(dFrom, dTo, additionalOffset);
        return t1;
      }}
  }
}],
["", "HintManager.dart", , X, {
  "^": "",
  HintManager: {
    "^": "Object;engine,purchasesWindowLoaded,purchasesOpened",
    onClick$1: [function(_, e) {
      var balance, t1, t2;
      balance = A.UserManager_getAsInt("balance");
      A.Tooltip_closeAll();
      t1 = J.getInterceptor$n(balance);
      if (t1.$gt(balance, 0)) {
        t2 = $.get$context();
        R.PromptWindow_show(J.$index$asx(J.$index$asx(t2, "locale"), "use_hint_question"), J.$index$asx(J.$index$asx(t2, "locale"), "surely_want"), $.get$sprintf().call$2(J.$index$asx(J.$index$asx(t2, "locale"), "hints_left"), [t1.toString$0(balance), J.$index$asx(t2, "Features").callMethod$2("getNounPlural", [balance, J.$index$asx(J.$index$asx(t2, "locale"), "hint_form1"), J.$index$asx(J.$index$asx(t2, "locale"), "hint_form2"), J.$index$asx(J.$index$asx(t2, "locale"), "hint_form3")])]), J.$index$asx(J.$index$asx(t2, "locale"), "get_more"), this.get$getMoreHints(), new X.HintManager_onClick_closure(this), null, null);
      } else {
        t1 = $.get$context();
        R.PromptWindow_showSimple(J.$index$asx(J.$index$asx(t1, "locale"), "hints_lack"), J.$index$asx(J.$index$asx(t1, "locale"), "spent_hints"), J.$index$asx(J.$index$asx(t1, "locale"), "get_hints"), this.get$getMoreHints());
      }
    }, "call$1", "get$onClick", 2, 0, 7, 9],
    orderSuccessCallback$0: [function() {
      B.WebApi_getUser(new X.HintManager_orderSuccessCallback_closure(this));
    }, "call$0", "get$orderSuccessCallback", 0, 0, 0],
    getMoreHints$1: [function($event) {
      var t1;
      if (!this.purchasesWindowLoaded) {
        H.interceptedTypeCast(J.$index$asx($.get$context(), "Features"), "$isJsObject").callMethod$1("loadPurchasesWindow");
        this.purchasesWindowLoaded = true;
      }
      R.PromptWindow_close();
      A.Tooltip_closeAll();
      B.WebApi_onOrderSuccess(this.get$orderSuccessCallback());
      J.get$classes$x(document.querySelector("#purchases")).remove$1(0, "hidden");
      L.animate(document.querySelector("#purchases"), 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", 0, "opacity", 1], null, null));
      this.purchasesOpened = true;
      J.set$innerHtml$x(document.querySelector("#hints-balance"), A.UserManager_getAsString("balance"));
      t1 = document.querySelector("#attempts-balance");
      J.set$innerHtml$x(t1, J.$eq(A.UserManager_getAsInt("boughtAttempts"), -1) ? "\u221e" : A.UserManager_getAsString("allAttempts"));
      t1 = document.querySelector(".close-purchases");
      t1.toString;
      J._addEventListener$3$x(t1, "click", new X.HintManager_getMoreHints_closure(this), false);
    }, function() {
      return this.getMoreHints$1(null);
    }, "getMoreHints$0", "call$1", "call$0", "get$getMoreHints", 0, 2, 21, 22, 4],
    addHintCard$5: function(x, y, angle, energy, _static) {
      var col, b;
      col = new A.Color4(235, 175, 130, 0.25);
      if (_static === true)
        col = new A.Color4(235, 235, 215, 0.25);
      b = this.engine.addCard$7(x, y, angle, _static, null, col, true);
      b.set$type(0, 0);
      H.interceptedTypeCast(b.userData, "$isEnergySprite").energy = energy;
    },
    clearHintCards$0: function() {
      var _cards, t1, card;
      _cards = H.setRuntimeTypeInfo([], [V.Body]);
      C.JSArray_methods.addAll$1(_cards, this.engine.cards);
      for (t1 = new H.ListIterator(_cards, _cards.length, 0, null); t1.moveNext$0();) {
        card = t1.__internal$_current;
        if (H.interceptedTypeCast(card.get$userData(), "$isEnergySprite").isHint)
          this.engine.removeCard$1(card);
      }
    }
  },
  HintManager_onClick_closure: {
    "^": "Closure:61;this_0",
    call$1: function(positive) {
      var t1, t2, t3;
      if (positive) {
        t1 = J.$index$asx($.get$context(), "Api");
        t2 = this.this_0;
        t3 = t2.engine.level;
        t1.callMethod$2("call", ["getHint", P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_literal(["chapter", t3.chapter, "level", t3.currentSubLevel], null, null)), new X.HintManager_onClick__closure(t2)]);
      } else
        R.PromptWindow_close();
    }
  },
  HintManager_onClick__closure: {
    "^": "Closure:63;this_1",
    call$1: [function(hints) {
      var t1, t2, card, t3;
      t1 = J.getInterceptor$asx(hints);
      t2 = J.$index$asx(t1.$index(hints, "user"), "balance");
      J.$indexSet$ax(J.$index$asx(J.$index$asx($.get$context(), "Features"), "user"), "balance", t2);
      J.set$innerHtml$x(document.querySelector("#hints-amount"), J.toString$0(J.$index$asx(t1.$index(hints, "user"), "balance")));
      for (t1 = J.get$iterator$ax(t1.$index(hints, "hint")), t2 = this.this_1; t1.moveNext$0();) {
        card = t1.get$current();
        t3 = J.getInterceptor$asx(card);
        t2.addHintCard$5(J.toDouble$0$n(t3.$index(card, "x")), J.toDouble$0$n(t3.$index(card, "y")), J.toDouble$0$n(t3.$index(card, "angle")), J.toDouble$0$n(t3.$index(card, "energy")), t3.$index(card, "static"));
      }
      P.Timer_Timer(P.Duration$(0, 0, 0, 6500, 0, 0), new X.HintManager_onClick___closure(t2));
      R.PromptWindow_close();
    }, "call$1", null, 2, 0, null, 62, "call"]
  },
  HintManager_onClick___closure: {
    "^": "Closure:46;this_2",
    call$0: function() {
      this.this_2.clearHintCards$0();
    }
  },
  HintManager_orderSuccessCallback_closure: {
    "^": "Closure:46;this_0",
    call$0: function() {
      var t1, t2, t3;
      t1 = document.querySelector("#hints-amount");
      t2 = document.querySelector("#hints-balance");
      t3 = A.UserManager_getAsString("balance");
      J.set$innerHtml$x(t2, t3);
      J.set$innerHtml$x(t1, t3);
      t3 = document.querySelector("#attempts-balance");
      t1 = document.querySelector(".attempts-left");
      t2 = J.$eq(A.UserManager_getAsInt("boughtAttempts"), -1) ? "\u221e" : A.UserManager_getAsString("allAttempts");
      J.set$innerHtml$x(t1, t2);
      J.set$innerHtml$x(t3, t2);
      B.WebApi_onOrderSuccess(this.this_0.get$orderSuccessCallback());
      if (J.$eq(A.UserManager_getAsInt("boughtAttempts"), -1))
        J.set$innerHtml$x(document.querySelector(".attempt-options"), C.JSString_methods.$add("<div class=\"unlimited-attempts\">", J.$index$asx(J.$index$asx($.get$context(), "locale"), "unlimited_attempts")) + "</div>");
    }
  },
  HintManager_getMoreHints_closure: {
    "^": "Closure:44;this_0",
    call$1: [function($event) {
      J.get$classes$x(document.querySelector(".game-box")).remove$1(0, "blurred");
      L.animate(document.querySelector("#purchases"), 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", 800, "opacity", 0], null, null));
      this.this_0.purchasesOpened = false;
    }, "call$1", null, 2, 0, null, 4, "call"]
  }
}],
["", "Input.dart", , A, {
  "^": "",
  Input_onMouseMove: [function($event) {
    var prevMouseX, prevMouseY, t1, t2, t3, t4, t5;
    prevMouseX = $.Input_mouseX;
    prevMouseY = $.Input_mouseY;
    t1 = J.getInterceptor$x($event);
    t2 = t1.get$client($event);
    t2 = t2.get$x(t2);
    t3 = $.Input_canvasX;
    if (typeof t2 !== "number")
      return t2.$sub();
    if (typeof t3 !== "number")
      return H.iae(t3);
    t4 = $.GameEngine_scale;
    if (typeof t4 !== "number")
      return H.iae(t4);
    t5 = J.$div$n($.Input_camera.pxOffsetX, t4);
    if (typeof t5 !== "number")
      return H.iae(t5);
    $.Input_mouseX = (t2 - t3) / t4 + t5;
    t1 = t1.get$client($event);
    t1 = t1.get$y(t1);
    t5 = $.Input_canvasY;
    if (typeof t1 !== "number")
      return t1.$sub();
    if (typeof t5 !== "number")
      return H.iae(t5);
    t4 = $.GameEngine_scale;
    if (typeof t4 !== "number")
      return H.iae(t4);
    t3 = J.$div$n($.Input_camera.pxOffsetY, t4);
    if (typeof t3 !== "number")
      return H.iae(t3);
    t3 = -(t1 - t5) / t4 - t3;
    $.Input_mouseY = t3;
    $.Input_mouseDeltaX = $.Input_mouseX - prevMouseX;
    $.Input_mouseDeltaY = t3 - prevMouseY;
    $.Input_mouseMoved = true;
  }, "call$1", "Input_onMouseMove$closure", 2, 0, 3, 4],
  Input_onMouseDown: [function($event) {
    var t1, t2;
    t1 = J.getInterceptor$x($event);
    t2 = t1.get$which($event) === 1;
    $.Input_isMouseLeftClicked = t2;
    $.Input_isMouseLeftDown = t2;
    t1 = t1.get$which($event) === 3;
    $.Input_isMouseRightClicked = t1;
    $.Input_isMouseRightDown = t1;
  }, "call$1", "Input_onMouseDown$closure", 2, 0, 3, 4],
  Input_onMouseUp: [function($event) {
    var t1 = J.getInterceptor$x($event);
    if (t1.get$which($event) === 1) {
      $.Input_isMouseLeftClicked = false;
      $.Input_isMouseLeftDown = false;
    } else if (t1.get$which($event) === 3) {
      $.Input_isMouseRightDown = false;
      $.Input_isMouseRightClicked = false;
      t1.preventDefault$0($event);
    }
  }, "call$1", "Input_onMouseUp$closure", 2, 0, 3, 4],
  Input_onContextMenu: [function($event) {
    J.preventDefault$0$x($event);
  }, "call$1", "Input_onContextMenu$closure", 2, 0, 3, 4],
  Input_onMouseWheel: [function($event) {
    var t1;
    $.Input_wheelEvent = $event;
    t1 = J.get$deltaY$x($event);
    if (typeof t1 !== "number")
      return t1.$gt();
    $.Input_wheelDirection = t1 > 0 ? 1 : -1;
  }, "call$1", "Input_onMouseWheel$closure", 2, 0, 5],
  Input_toggle: function($event, down) {
    $.get$Input_keys().forEach$1(0, new A.Input_toggle_closure($event, down));
  },
  Input_onKeyDown: [function($event) {
    var t1 = J.getInterceptor$x($event);
    if (t1.get$altKey($event) === true) {
      $.Input_isAltDown = true;
      $.Input_isAltClicked = true;
    }
    if (t1.get$metaKey($event) === true && J.$index$asx(J.$index$asx($.get$context(), "Features"), "is_macintosh") === true) {
      $.Input_isCmdDown = true;
      $.Input_isCmdClicked = true;
    }
    A.Input_toggle($event, true);
    t1 = $.Input_keyDown;
    if (t1 != null)
      t1.call$1($event);
  }, "call$1", "Input_onKeyDown$closure", 2, 0, 6, 4],
  Input_onKeyUp: [function($event) {
    var t1;
    A.Input_toggle($event, false);
    $.Input_isAltDown = false;
    $.Input_isCmdDown = false;
    t1 = J.getInterceptor$x($event);
    if (t1.get$metaKey($event) !== true && t1.get$keyCode($event) === 91 && J.$index$asx(J.$index$asx($.get$context(), "Features"), "is_macintosh") === true) {
      t1 = $.get$Input_keys();
      t1.$index(0, "z").set$down(false);
      t1.$index(0, "z").set$clicked(false);
    }
  }, "call$1", "Input_onKeyUp$closure", 2, 0, 6, 4],
  Input_update: function() {
    $.Input_isAltClicked = false;
    $.Input_isCmdClicked = false;
    $.Input_mouseMoved = false;
    $.Input_isMouseLeftClicked = false;
    $.Input_isMouseRightClicked = false;
    $.Input_wheelDirection = 0;
    $.Input_mouseDeltaX = 0;
    $.Input_mouseDeltaY = 0;
    $.get$Input_keys().forEach$1(0, new A.Input_update_closure());
  },
  Input_attachSingleEscClickCallback: function(callback) {
    $.Input_keyDown = new A.Input_attachSingleEscClickCallback_closure(callback);
  },
  Key: {
    "^": "Object;code>,down@,clicked@"
  },
  Input_toggle_closure: {
    "^": "Closure:64;event_0,down_1",
    call$2: function(key, val) {
      var t1, t2;
      t1 = J.get$code$x(val);
      t2 = J.get$keyCode$x(this.event_0);
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.down_1;
        val.set$down(t1);
        val.set$clicked(t1);
      }
    }
  },
  Input_update_closure: {
    "^": "Closure:64;",
    call$2: function(key, val) {
      val.set$clicked(false);
    }
  },
  Input_attachSingleEscClickCallback_closure: {
    "^": "Closure:65;callback_0",
    call$1: function(e) {
      var t1, t2, t3;
      t1 = J.get$keyCode$x(e);
      t2 = $.get$Input_keys();
      t3 = J.get$code$x(t2.$index(0, "esc"));
      if (t1 == null ? t3 == null : t1 === t3) {
        t2.$index(0, "esc").set$clicked(false);
        t2.$index(0, "esc").set$down(false);
        $.Input_keyDown = null;
        this.callback_0.call$0();
      }
    }
  }
}],
["", "Level.dart", , Q, {
  "^": "",
  Level: {
    "^": "Object;engine,current,subLevels,currentSubLevel,levels,chapter",
    findLastEmptyLevel$1: function(ch) {
      var t1, index, found, json, t2, level;
      for (t1 = J.getInterceptor(ch), index = 0, found = false; !found;) {
        ++index;
        if (window.localStorage.getItem(C.JSString_methods.$add("level_", t1.toString$0(ch)) + "_" + C.JSInt_methods.toString$0(index)) != null) {
          json = C.JsonCodec_null_null.decode$1(window.localStorage.getItem(C.JSString_methods.$add("level_", t1.toString$0(ch)) + "_" + C.JSInt_methods.toString$0(index)));
          t2 = J.getInterceptor$asx(json);
          if (t2.$index(json, "cd") !== true && J.get$isEmpty$asx(t2.$index(json, "c")) !== true) {
            --index;
            break;
          }
        } else
          found = true;
        if (index === 12)
          found = true;
      }
      t1 = J.get$length$asx(this.levels);
      if (typeof t1 !== "number")
        return H.iae(t1);
      level = J.$sub$n(index >= t1 ? J.get$length$asx(this.levels) : index, 1);
      return (level >= 0 ? level : 0) + 1;
    },
    getLevelsFrom$2: function(chapter, from) {
      var levels, t1, i, t2, level;
      levels = H.setRuntimeTypeInfo([], [P.Map]);
      for (t1 = J.getInterceptor(chapter), i = from; t2 = J.getInterceptor$n(i), t2.$le(i, 12); i = t2.$add(i, 1)) {
        level = C.JSString_methods.$add(C.JSString_methods.$add("level_", t1.toString$0(chapter)) + "_", t2.toString$0(i));
        if (window.localStorage.getItem(level) == null)
          break;
        else
          levels.push(window.localStorage.getItem(level));
      }
      return levels;
    },
    preloadFurtherLevels$0: function() {
      var furtherLevels, i, t1, li, t2, t3, further;
      furtherLevels = this.getLevelsFrom$2(this.chapter, J.$add$ns(this.currentSubLevel, 1));
      if (furtherLevels.length !== 0) {
        for (i = J.$add$ns(this.currentSubLevel, 1), t1 = this.subLevels, li = 0; t2 = J.getInterceptor$n(i), t2.$le(i, J.$add$ns(this.currentSubLevel, furtherLevels.length)); i = t2.$add(i, 1), ++li) {
          t1.push(Z.SubLevel$(this.engine, J.$index$asx(this.levels, t2.$sub(i, 1)), i, true));
          t3 = t2.$sub(i, 1);
          if (t3 >>> 0 !== t3 || t3 >= t1.length)
            return H.ioore(t1, t3);
          further = t1[t3];
          if (li >= furtherLevels.length)
            return H.ioore(furtherLevels, li);
          Q.LevelSerializer_fromJSON(furtherLevels[li], this.engine, further, true);
          further.online$2(false, true);
        }
        t1 = this.current.get$to();
        t2 = this.engine;
        t3 = t2.to;
        t2 = R.Sprite_to(t2.world);
        t3.userData = t2;
        t1.userData = t2;
        this.current.alignCamera$0();
      }
    },
    preload$3: function(_, ready, chapter, _continue) {
      var storage = window.localStorage;
      W.HttpRequest_getString(C.JSString_methods.$add("levels/chapter_", J.toString$0(chapter)) + ".json", null, null).then$1(new Q.Level_preload_closure(this, ready, chapter, _continue, storage));
    },
    next$0: [function() {
      var t1, t2;
      if (J.$ge$n(J.get$length$asx(this.levels), J.$add$ns(this.currentSubLevel, 1))) {
        t1 = this.current;
        if (t1 != null) {
          J.enable$1$x(t1, false);
          this.current.get$to().userData = R.Sprite_from(this.engine.world, true);
        }
        this.currentSubLevel = J.$add$ns(this.currentSubLevel, 1);
        this.loadCurrent$0();
        M.GameWizard_manage(this.chapter, J.get$index$x(this.current));
        t1 = this.engine;
        t2 = t1.currentZoom;
        if (t2 !== 1)
          t1.centerBetweenCubes$1(t2);
      }
    }, "call$0", "get$next", 0, 0, 0],
    loadCurrent$0: function() {
      var t1, i, t2;
      t1 = this.subLevels;
      if (J.$gt$n(this.currentSubLevel, t1.length)) {
        i = t1.length;
        while (true) {
          t2 = this.currentSubLevel;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          ++i;
          t2 = Z.SubLevel$(this.engine, J.$index$asx(this.levels, i - 1), i, false);
          this.current = t2;
          t1.push(t2);
        }
        this.engine.bobbin.erase$0();
        this.engine.obstaclesBobbin.erase$0();
        t1 = this.chapter;
        t2 = this.currentSubLevel;
        $.WebApi_startTime = new P.DateTime(Date.now(), false);
        $.WebApi_chapter = t1;
        $.WebApi_level = t2;
      } else {
        t2 = J.$sub$n(this.currentSubLevel, 1);
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        this.current = t2;
        t2.apply$0();
        this.current.online$1(true);
      }
      this.handleLevelChange$0();
    },
    toggleFinishedFriends$0: function() {
      var finished, t1, fchapter, flevel_js;
      finished = H.interceptedTypeCast(document.querySelector(".friends-finished-button"), "$isDivElement");
      t1 = $.get$context();
      fchapter = J.$index$asx(J.$index$asx(J.$index$asx(t1, "Features"), "chapters"), J.toString$0(this.engine.level.chapter));
      if (fchapter != null) {
        flevel_js = J.$index$asx(fchapter, J.toString$0(this.engine.level.currentSubLevel));
        if (flevel_js != null) {
          finished.toString;
          new W._ElementCssClassSet(finished).remove$1(0, "hidden");
          J.set$innerHtml$x(document.querySelector(".friends-finished-amount"), J.toString$0(J.get$length$asx(J.$index$asx(t1, "Object").callMethod$2("keys", [flevel_js]))));
          J._addEventListener$3$x(finished, "click", new Q.Level_toggleFinishedFriends_closure(this), true);
          t1 = document.querySelector(".close-finished");
          t1.toString;
          J._addEventListener$3$x(t1, "click", new Q.Level_toggleFinishedFriends_closure0(), false);
        } else {
          finished.toString;
          new W._ElementCssClassSet(finished).add$1(0, "hidden");
        }
      } else {
        finished.toString;
        new W._ElementCssClassSet(finished).add$1(0, "hidden");
      }
    },
    previous$0: function() {
      var t1, t2;
      if (J.$gt$n(this.currentSubLevel, 1)) {
        this.currentSubLevel = J.$sub$n(this.currentSubLevel, 1);
        this.current.saveState$0();
        this.current.online$1(false);
        t1 = this.subLevels;
        t2 = J.$sub$n(this.currentSubLevel, 1);
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        this.current = t2;
        t2.apply$0();
        this.handleLevelChange$0();
      }
    },
    handleLevelChange$0: function() {
      var t1, t2;
      t1 = this.subLevels;
      t2 = J.$sub$n(this.currentSubLevel, 1);
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      T.showLevelName(J.get$name$x(t1[t2]));
      this.toggleFinishedFriends$0();
      J.set$innerHtml$x(document.querySelector("#hints-amount"), A.UserManager_getAsString("balance"));
      T.updateBlockButtons(this.engine);
      this.saveAsLastLevel$0();
    },
    saveAsLastLevel$0: function() {
      window.localStorage.setItem("last", C.JsonCodec_null_null.encode$1(P.LinkedHashMap_LinkedHashMap$_literal(["chapter", this.chapter, "level", this.currentSubLevel], null, null)));
    },
    getRating$0: function() {
      var t1, min, sl;
      for (t1 = this.subLevels, t1 = new H.ListIterator(t1, t1.length, 0, null), min = 3; t1.moveNext$0();) {
        sl = t1.__internal$_current;
        if (sl.get$rating() < min)
          min = sl.get$rating();
      }
      return min;
    },
    static: {"^": "Level_targetLevel,Level_last,Level_eng", Level_saveStarsForLoadedLevels: function(_eng, target) {
        var i, t1, t2, storage, levelName, json;
        i = _eng.level.subLevels.length - 1;
        t1 = J.getInterceptor$n(target);
        while (true) {
          t2 = t1.$sub(target, 1);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i >= t2))
            break;
          t2 = _eng.level.subLevels;
          if (i < 0 || i >= t2.length)
            return H.ioore(t2, i);
          t2[i].set$rating(0);
          t2 = _eng.level.chapter;
          storage = window.localStorage;
          levelName = C.JSString_methods.$add("level_", J.toString$0(t2)) + "_" + C.JSInt_methods.toString$0(i + 1);
          if (storage.getItem(levelName) != null) {
            json = C.JsonCodec_null_null.decode$1(storage.getItem(levelName));
            J.$indexSet$ax(json, "cd", false);
            storage.setItem(levelName, C.JsonCodec_null_null.encode$1(json));
          }
          --i;
        }
        t1 = _eng.level;
        T.StarManager_saveFrom(t1.chapter, t1.subLevels);
      }, Level_onFrontRewindLevelComplete: [function() {
        if (!J.$eq($.Level_targetLevel, $.Level_eng.level.currentSubLevel)) {
          if (J.finish$0$x($.Level_eng.level.current) === true) {
            var t1 = $.Level_eng.level;
            T.StarManager_saveFrom(t1.chapter, t1.subLevels);
            $.Level_eng.level.next$0();
            T.applyRewindLabelToButton(null);
          }
        } else
          $.Level_eng.frontRewind = false;
      }, "call$0", "Level_onFrontRewindLevelComplete$closure", 0, 0, 0], Level_onFrontRewindLevelFailed: [function() {
        $.Level_eng.frontRewind = false;
        T.applyPhysicsLabelToButton();
      }, "call$0", "Level_onFrontRewindLevelFailed$closure", 0, 0, 0], Level_onLevelApplied: [function() {
        C.JSArray_methods.set$length($.Level_last.get$frames(), 0);
        C.JSArray_methods.set$length($.Level_last.get$obstaclesFrames(), 0);
        if (J.$lt$n($.Level_targetLevel, $.Level_eng.level.currentSubLevel)) {
          $.Level_eng.level.previous$0();
          $.Level_eng.level.current.set$levelApplied(Q.Level_onLevelApplied$closure());
        } else if (J.$eq($.Level_targetLevel, $.Level_eng.level.currentSubLevel)) {
          $.Level_eng.level.current.set$levelApplied(null);
          T.applyPhysicsLabelToButton();
        }
      }, "call$0", "Level_onLevelApplied$closure", 0, 0, 0]}
  },
  Level_preload_closure: {
    "^": "Closure:13;this_0,ready_1,chapter_2,_continue_3,storage_4",
    call$1: [function(str) {
      var t1, t2, t3, t4, t5, i, t6, i0, level, t7, t8;
      t1 = this.this_0;
      t1.levels = J.$index$asx(C.JsonCodec_null_null.decode$1(str), "levels");
      if (!this._continue_3) {
        t2 = this.storage_4;
        t2 = t2.getItem("last") != null && J.$eq(J.$index$asx(C.JsonCodec_null_null.decode$1(t2.getItem("last")), "chapter"), this.chapter_2);
      } else
        t2 = true;
      if (t2) {
        t1.currentSubLevel = J.$index$asx(C.JsonCodec_null_null.decode$1(this.storage_4.getItem("last")), "level");
        t1.loadCurrent$0();
        t1.preloadFurtherLevels$0();
      } else {
        t2 = this.chapter_2;
        t1.currentSubLevel = t1.findLastEmptyLevel$1(t2);
        if (window.localStorage.getItem(C.JSString_methods.$add(C.JSString_methods.$add("level_", J.toString$0(t2)) + "_", J.toString$0(J.$add$ns(t1.currentSubLevel, 1)))) != null)
          t1.next$0();
        else
          t1.loadCurrent$0();
        t1.preloadFurtherLevels$0();
      }
      this.ready_1.call$0();
      t2 = this.storage_4;
      t3 = this.chapter_2;
      t4 = J.getInterceptor(t3);
      t5 = t1.subLevels;
      i = 0;
      while (true) {
        t6 = t1.currentSubLevel;
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (!(i < t6))
          break;
        i0 = i + 1;
        level = C.JSString_methods.$add("level_", t4.toString$0(t3)) + "_" + C.JSInt_methods.toString$0(i0);
        if (t2.getItem(level) != null) {
          t6 = t2.getItem(level);
          t7 = t1.engine;
          if (i0 !== t1.currentSubLevel) {
            if (i >= t5.length)
              return H.ioore(t5, i);
            t8 = t5[i];
          } else
            t8 = null;
          Q.LevelSerializer_fromJSON(t6, t7, t8, false);
          if (i0 !== t1.currentSubLevel) {
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.complete$0$x(t5[i]);
          }
        }
        i = i0;
      }
      M.GameWizard_manage(t3, J.get$index$x(t1.current));
    }, "call$1", null, 2, 0, null, 48, "call"]
  },
  Level_toggleFinishedFriends_closure: {
    "^": "Closure:44;this_0",
    call$1: [function($event) {
      var box;
      R.PromptWindow_close();
      A.Tooltip_closeAll();
      box = H.interceptedTypeCast(document.querySelector("#friends-finished"), "$isDivElement");
      box.toString;
      new W._ElementCssClassSet(box).remove$1(0, "hidden");
      L.animate(box, 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", 0, "opacity", 1], null, null));
      P.Timer_Timer(P.Duration$(0, 0, 0, 125, 0, 0), new Q.Level_toggleFinishedFriends__closure(this.this_0));
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  Level_toggleFinishedFriends__closure: {
    "^": "Closure:46;this_1",
    call$0: function() {
      var t1, t2;
      t1 = J.$index$asx($.get$context(), "Features");
      t2 = this.this_1.engine.level;
      t1.callMethod$2("showFinishedFriends", [t2.chapter, t2.currentSubLevel, new Q.Level_toggleFinishedFriends___closure()]);
    }
  },
  Level_toggleFinishedFriends___closure: {
    "^": "Closure:46;",
    call$0: [function() {
      var bar, t1;
      J.get$classes$x(document.querySelector(".game-box")).add$1(0, "blurred");
      A.Input_attachSingleEscClickCallback(new Q.Level_toggleFinishedFriends____closure());
      bar = Q.Scroll_setup("finished-vs", "finished-es", "finished-scrollbar", "v");
      t1 = $.get$context();
      J.$index$asx(t1, "dw_Scrollbar_Co").callMethod$2("addEvent", [bar, "on_scroll", new Q.Level_toggleFinishedFriends____closure0()]);
      t1.callMethod$2("html2canvas", [document.querySelector("#finished-es"), P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_literal(["onrendered", new Q.Level_toggleFinishedFriends____closure1()], null, null))]);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Level_toggleFinishedFriends____closure: {
    "^": "Closure:46;",
    call$0: function() {
      J.click$0$x(document.querySelector(".close-finished"));
    }
  },
  Level_toggleFinishedFriends____closure0: {
    "^": "Closure:52;",
    call$2: [function(x, y) {
      J.set$transform$x(document.querySelector("#finished-blur-g").style, C.JSString_methods.$add("translatey(", J.toString$0(J.$add$ns(y, 80))) + "px)");
    }, "call$2", null, 4, 0, null, 50, 51, "call"]
  },
  Level_toggleFinishedFriends____closure1: {
    "^": "Closure:54;",
    call$1: [function(canvas) {
      var t1, g, t2;
      t1 = J.getInterceptor$x(canvas);
      t1.set$id(canvas, "finished-blur-g");
      document.querySelector("#friends-finished .bs-screen-blurry-bar").appendChild(canvas);
      g = t1.getContext$1(canvas, "2d");
      t2 = J.getInterceptor$x(g);
      t2.set$fillStyle(g, "rgba(0, 0, 0, 0.5)");
      t2.fillRect$4(g, 0, 0, t1.get$width(canvas), t1.get$height(canvas));
    }, "call$1", null, 2, 0, null, 53, "call"]
  },
  Level_toggleFinishedFriends_closure0: {
    "^": "Closure:44;",
    call$1: [function($event) {
      J.get$classes$x(document.querySelector(".game-box")).remove$1(0, "blurred");
      L.animate(document.querySelector("#friends-finished"), 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", 800, "opacity", 0], null, null));
    }, "call$1", null, 2, 0, null, 4, "call"]
  }
}],
["", "LevelSerializer.dart", , Q, {
  "^": "",
  LevelSerializer_toJSON: function(cards, $frames, _do, doFrames, completed) {
    var map, t1, body, t2, len, i, t;
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    map.$indexSet(0, "cd", completed);
    map.$indexSet(0, "c", H.setRuntimeTypeInfo([], [P.Map]));
    map.$indexSet(0, "f", []);
    map.$indexSet(0, "do", H.setRuntimeTypeInfo([], [P.Map]));
    map.$indexSet(0, "df", []);
    for (t1 = new H.ListIterator(cards, cards.length, 0, null); t1.moveNext$0();) {
      body = t1.__internal$_current;
      if (!H.interceptedTypeCast(body.get$userData(), "$isEnergySprite").isHint) {
        t2 = J.getInterceptor$x(body);
        J.add$1$ax(map.$index(0, "c"), P.LinkedHashMap_LinkedHashMap$_literal(["x", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(J.get$x$x(t2.get$position(body)) * 1000)) / 1000, "y", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(J.get$y$x(t2.get$position(body)) * 1000)) / 1000, "a", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(body.get$angle() * 1000)) / 1000, "s", H.interceptedTypeCast(body.get$userData(), "$isEnergySprite").isStatic, "e", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(H.interceptedTypeCast(body.get$userData(), "$isEnergySprite").energy * 1000)) / 1000], null, null));
      }
    }
    if (cards.length !== 0)
      for (len = $frames.length, i = 0; i < len; ++i) {
        J.add$1$ax(map.$index(0, "f"), []);
        if (i >= $frames.length)
          return H.ioore($frames, i);
        t1 = J.get$iterator$ax($frames[i]);
        for (; t1.moveNext$0();) {
          t = t1.get$current();
          J.add$1$ax(J.$index$asx(map.$index(0, "f"), i), P.LinkedHashMap_LinkedHashMap$_literal(["x", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t.get$pos().storage[0] * 1000)) / 1000, "y", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t.get$pos().storage[1] * 1000)) / 1000, "a", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t.get$angle() * 1000)) / 1000], null, null));
        }
      }
    for (t1 = new H.ListIterator(_do, _do.length, 0, null); t1.moveNext$0();) {
      body = t1.__internal$_current;
      if (body.get$userData().get$isStatic() !== true) {
        t2 = J.getInterceptor$x(body);
        J.add$1$ax(map.$index(0, "do"), P.LinkedHashMap_LinkedHashMap$_literal(["id", H.interceptedTypeCast(body.get$userData(), "$isSprite").id, "x", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(J.get$x$x(t2.get$position(body)) * 1000)) / 1000, "y", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(J.get$y$x(t2.get$position(body)) * 1000)) / 1000, "a", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(body.get$angle() * 1000)) / 1000], null, null));
      }
    }
    if (_do.length !== 0)
      for (len = doFrames.length, i = 0; i < len; ++i) {
        J.add$1$ax(map.$index(0, "df"), []);
        if (i >= doFrames.length)
          return H.ioore(doFrames, i);
        t1 = J.get$iterator$ax(doFrames[i]);
        for (; t1.moveNext$0();) {
          t = t1.get$current();
          J.add$1$ax(J.$index$asx(map.$index(0, "df"), i), P.LinkedHashMap_LinkedHashMap$_literal(["x", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t.get$pos().storage[0] * 1000)) / 1000, "y", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t.get$pos().storage[1] * 1000)) / 1000, "a", C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t.get$angle() * 1000)) / 1000], null, null));
        }
      }
    return C.JsonCodec_null_null.encode$1(map);
  },
  LevelSerializer_fromJSON: function(json, e, subLevel, further) {
    var state, t1, t2, t3, card, t4, b, $frames, len, i, t, t5, t6, t7, t8, obstacles, id, obstacle, doFrames;
    state = C.JsonCodec_null_null.decode$1(json);
    for (t1 = J.getInterceptor$asx(state), t2 = J.get$iterator$ax(t1.$index(state, "c")), t3 = subLevel != null; t2.moveNext$0();) {
      card = t2.get$current();
      t4 = J.getInterceptor$asx(card);
      b = e.addCard$5(J.toDouble$0$n(t4.$index(card, "x")), J.toDouble$0$n(t4.$index(card, "y")), J.toDouble$0$n(t4.$index(card, "a")), t4.$index(card, "s"), subLevel);
      if (t3)
        b.set$type(0, 0);
      H.interceptedTypeCast(b.userData, "$isEnergySprite").energy = J.toDouble$0$n(t4.$index(card, "e"));
    }
    $frames = [];
    if (J.get$isEmpty$asx(t1.$index(state, "c")) !== true) {
      len = J.get$length$asx(t1.$index(state, "f"));
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i) {
        $frames.push([]);
        for (t2 = J.get$iterator$ax(J.$index$asx(t1.$index(state, "f"), i)); t2.moveNext$0();) {
          t = t2.get$current();
          if (i >= $frames.length)
            return H.ioore($frames, i);
          t4 = $frames[i];
          t5 = J.getInterceptor$asx(t);
          t6 = J.toDouble$0$n(t5.$index(t, "x"));
          t7 = J.toDouble$0$n(t5.$index(t, "y"));
          t8 = new Float32Array(2);
          t8[0] = t6;
          t8[1] = t7;
          t5 = J.toDouble$0$n(t5.$index(t, "a"));
          t7 = new N.BTransform(null, null);
          t7.pos = new T.Vector2(t8);
          t7.angle = t5;
          J.add$1$ax(t4, t7);
        }
      }
    }
    obstacles = t3 ? subLevel.get$obstacles() : e.level.current.get$obstacles();
    for (t2 = J.get$iterator$ax(t1.$index(state, "do")); t2.moveNext$0();) {
      t = t2.get$current();
      t4 = J.getInterceptor$asx(t);
      id = J.toInt$0$n(t4.$index(t, "id"));
      for (t5 = new H.ListIterator(obstacles, obstacles.length, 0, null); t5.moveNext$0();) {
        obstacle = t5.__internal$_current;
        if (H.interceptedTypeCast(obstacle.get$userData(), "$isSprite").id === id) {
          t6 = J.toDouble$0$n(t4.$index(t, "x"));
          t7 = J.toDouble$0$n(t4.$index(t, "y"));
          t8 = new Float32Array(2);
          t8[0] = t6;
          t8[1] = t7;
          J.setTransform$2$x(obstacle, new T.Vector2(t8), J.toDouble$0$n(t4.$index(t, "a")));
        }
      }
    }
    doFrames = [];
    if (J.get$isEmpty$asx(t1.$index(state, "do")) !== true) {
      len = J.get$length$asx(t1.$index(state, "df"));
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i) {
        doFrames.push([]);
        for (t2 = J.get$iterator$ax(J.$index$asx(t1.$index(state, "df"), i)); t2.moveNext$0();) {
          t = t2.get$current();
          if (i >= doFrames.length)
            return H.ioore(doFrames, i);
          t4 = doFrames[i];
          t5 = J.getInterceptor$asx(t);
          t6 = J.toDouble$0$n(t5.$index(t, "x"));
          t7 = J.toDouble$0$n(t5.$index(t, "y"));
          t8 = new Float32Array(2);
          t8[0] = t6;
          t8[1] = t7;
          t5 = J.toDouble$0$n(t5.$index(t, "a"));
          t7 = new N.BTransform(null, null);
          t7.pos = new T.Vector2(t8);
          t7.angle = t5;
          J.add$1$ax(t4, t7);
        }
      }
    }
    T.applyPhysicsLabelToButton();
    if (t3) {
      subLevel.set$frames($frames);
      subLevel.set$obstaclesFrames(doFrames);
      J.enable$1$x(subLevel, false);
      if (!further)
        subLevel.loadRating$0();
    } else {
      e.bobbin.list = $frames;
      e.obstaclesBobbin.list = doFrames;
    }
    return t1.$index(state, "cd");
  },
  LevelSerializer_syncVersions: function() {
    var storage, last, t1, chapter, t2, level, levelName, json, nj, t3, hasFullCards, card, t4, len, i, t;
    storage = window.localStorage;
    last = storage.getItem("last") != null ? C.JsonCodec_null_null.decode$1(storage.getItem("last")) : null;
    t1 = J.getInterceptor$asx(last);
    chapter = 1;
    while (true) {
      t2 = J.get$length$asx($.Chapter_chapters);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(chapter <= t2))
        break;
      for (level = 1; level <= 12; ++level) {
        levelName = "level_" + C.JSInt_methods.toString$0(chapter) + "_" + C.JSInt_methods.toString$0(level);
        if (storage.getItem(levelName) == null)
          break;
        json = C.JsonCodec_null_null.decode$1(storage.getItem(levelName));
        nj = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t2 = J.getInterceptor$x(json);
        if (t2.containsKey$1(json, "cd") === true && t2.containsKey$1(json, "c") === true)
          continue;
        t3 = [];
        t3.$builtinTypeInfo = [P.Map];
        nj.$indexSet(0, "c", t3);
        for (t3 = J.get$iterator$ax(t2.$index(json, "cards")), hasFullCards = false; t3.moveNext$0();) {
          card = t3.get$current();
          t4 = J.getInterceptor$asx(card);
          if (J.toDouble$0$n(t4.$index(card, "energy")) > 0.5)
            hasFullCards = true;
          J.add$1$ax(nj.$index(0, "c"), P.LinkedHashMap_LinkedHashMap$_literal(["x", t4.$index(card, "x"), "y", t4.$index(card, "y"), "a", t4.$index(card, "angle"), "s", t4.$index(card, "static"), "e", t4.$index(card, "energy")], null, null));
        }
        if (t2.containsKey$1(json, "completed") === true)
          nj.$indexSet(0, "cd", t2.$index(json, "completed"));
        else {
          nj.$indexSet(0, "cd", hasFullCards);
          if (!hasFullCards && J.$eq(t1.$index(last, "chapter"), chapter) && !J.$eq(t1.$index(last, "level"), level) && level > 1)
            t1.$indexSet(last, "level", level);
        }
        nj.$indexSet(0, "f", []);
        len = J.get$length$asx(t2.$index(json, "frames"));
        if (typeof len !== "number")
          return H.iae(len);
        i = 0;
        for (; i < len; ++i) {
          J.add$1$ax(nj.$index(0, "f"), []);
          for (t3 = J.get$iterator$ax(J.$index$asx(t2.$index(json, "frames"), i)); t3.moveNext$0();) {
            t = t3.get$current();
            t4 = J.getInterceptor$asx(t);
            J.add$1$ax(J.$index$asx(nj.$index(0, "f"), i), P.LinkedHashMap_LinkedHashMap$_literal(["x", t4.$index(t, "x"), "y", t4.$index(t, "y"), "a", t4.$index(t, "angle")], null, null));
          }
        }
        t2 = [];
        t2.$builtinTypeInfo = [P.Map];
        nj.$indexSet(0, "do", t2);
        nj.$indexSet(0, "df", []);
        storage.setItem(levelName, C.JsonCodec_null_null.encode$1(nj));
      }
      ++chapter;
    }
    if (last != null)
      storage.setItem("last", C.JsonCodec_null_null.encode$1(last));
  }
}],
["", "ParallaxManager.dart", , F, {
  "^": "",
  Star: {
    "^": "Object;extinct<,x*,y*,speed,opacity,size,color",
    update$2: function(delta, modifier) {
      var t1, t2;
      t1 = this.y;
      if (typeof modifier !== "number")
        return H.iae(modifier);
      t1 += this.speed * modifier;
      this.y = t1;
      if (modifier === 1) {
        t2 = $.Input_canvasHeight;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 > t2;
      } else
        t2 = false;
      if (!t2)
        t1 = modifier === -1 && t1 < 0;
      else
        t1 = true;
      if (t1)
        this.extinct = true;
    },
    render$1: function(g) {
      var t1, t2, t3, t4;
      t1 = J.getInterceptor$x(g);
      t1.set$fillStyle(g, C.JSString_methods.$add("rgba(", J.toString$0(this.color.x)) + ", " + C.JSNumber_methods.toString$0(this.color.y) + ", " + C.JSInt_methods.toString$0(this.color.z) + ", " + C.JSNumber_methods.toString$0(this.opacity) + ")");
      t2 = this.x;
      t3 = this.y;
      t4 = this.size;
      t1.fillRect$4(g, t2, t3, t4, t4);
    }
  },
  ParallaxManager: {
    "^": "State;engine,g,lastStepTime,layers,amount,modifier,stars",
    start$1: [function(_, params) {
    }, "call$1", "get$start", 0, 2, null, 22, 57],
    update$1: function(delta) {
      var t1, _stars, star, t2, i, layer, data, t3, t4, t5, t6;
      t1 = this.engine;
      if (t1.ready)
        t1 = t1.physicsEnabled;
      else
        t1 = true;
      if (t1) {
        _stars = H.setRuntimeTypeInfo([], [F.Star]);
        C.JSArray_methods.addAll$1(_stars, this.stars);
        for (t1 = new H.ListIterator(_stars, _stars.length, 0, null); t1.moveNext$0();) {
          star = t1.__internal$_current;
          star.update$2(delta, this.modifier);
          if (star.get$extinct())
            C.JSArray_methods.remove$1(this.stars, star);
        }
        for (t1 = this.amount, t2 = this.layers, i = 0; i < t1 - this.stars.length; ++i) {
          layer = $.get$random().nextInt$1(t2);
          data = F.ParallaxManager_getStarData($.get$random(), layer, t2);
          t3 = $.get$random().nextDouble$0();
          t4 = $.Input_canvasWidth;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t5 = $.get$random().nextDouble$0();
          t6 = $.Input_canvasHeight;
          if (typeof t6 !== "number")
            return H.iae(t6);
          star = new F.Star(false, t3 * t4, t5 * t6, data[0], data[1], 2, $.get$YELLOW());
          if (C.JSInt_methods.$mod($.get$random().nextInt$1(128), 2) === 0)
            star.color = $.get$CYAN();
          if (C.JSInt_methods.$mod($.get$random().nextInt$1(128), 2) === 0)
            star.size = 1;
          this.stars.push(star);
        }
      }
    },
    render$0: function() {
      J.set$fillStyle$x(this.g, "rgba(0, 0, 0, 1)");
      J.fillRect$4$x(this.g, 0, 0, $.Input_canvasWidth, $.Input_canvasHeight);
      for (var t1 = this.stars, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1.__internal$_current.render$1(this.g);
    },
    static: {"^": "ParallaxManager_DOWN,ParallaxManager_UP", ParallaxManager_getStarData: function(random, layer, layers) {
        var speed, opacity;
        speed = (random.nextDouble$0() - layer / layers) * 0.35 / 1.5;
        for (; speed < 0.01;)
          speed += random.nextDouble$0() / 10;
        opacity = speed + speed * layer / layers;
        for (; opacity > 0.25;)
          opacity -= random.nextDouble$0() / 10;
        return [speed, opacity];
      }}
  }
}],
["", "PromptWindow.dart", , R, {
  "^": "",
  PromptWindow___show: function(sel, temp) {
    var template, $window, t1, win;
    if ($.PromptWindow_opened)
      return -1;
    $.PromptWindow_opened = true;
    template = J.get$innerHtml$x(document.querySelector(sel));
    $window = J.$index$asx($.get$context(), "TemplateEngine").callMethod$2("parseTemplate", [template, P.JsObject_JsObject$jsify(temp)]);
    J.insertAdjacentHtml$2$x(document.querySelector("body"), "beforeend", $window);
    t1 = ".p-" + C.JSInt_methods.toString$0($.PromptWindow_id);
    win = document.querySelector(t1);
    J.set$opacity$x(win.style, "0.0");
    J.set$top$x(win.style, "150px");
    t1 = win.querySelector(".prompt-close");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new R.PromptWindow___show_closure(), true);
    L.animate(win, 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["opacity", 1, "top", 200], null, null));
    t1 = $.PromptWindow_id + 1;
    $.PromptWindow_id = t1;
    return t1 - 1;
  },
  PromptWindow_show: function(headline, message, offer_text, offer_button, offerCallback, callback, positive, negative) {
    var nid, t1;
    positive = J.$index$asx(J.$index$asx($.get$context(), "locale"), "positive");
    negative = J.$index$asx(J.$index$asx($.get$context(), "locale"), "negative");
    nid = C.JSInt_methods.toString$0(R.PromptWindow___show(".prompt-window-template", P.LinkedHashMap_LinkedHashMap$_literal(["id", $.PromptWindow_id, "headline", headline, "message", message, "offer_text", offer_text, "offer_button", offer_button, "positive", positive, "negative", negative], null, null)));
    t1 = ".p-" + nid;
    t1 = document.querySelector(t1).querySelector(".prompt-offer");
    t1.hidden = J.$eq(offer_text, "") && J.$eq(offer_button, "");
    t1 = ".po-" + nid;
    t1 = document.querySelector(t1);
    t1.toString;
    J._addEventListener$3$x(t1, "click", offerCallback, true);
    t1 = ".pp-" + nid;
    t1 = document.querySelector(t1);
    t1.toString;
    J._addEventListener$3$x(t1, "click", new R.PromptWindow_show_closure(callback), true);
    t1 = ".pn-" + nid;
    t1 = document.querySelector(t1);
    t1.toString;
    J._addEventListener$3$x(t1, "click", new R.PromptWindow_show_closure0(callback), true);
  },
  PromptWindow_showSimple: function(headline, message, buttonLabel, callback) {
    var t1 = ".btn-" + C.JSInt_methods.toString$0(R.PromptWindow___show(".simple-window-template", P.LinkedHashMap_LinkedHashMap$_literal(["id", $.PromptWindow_id, "headline", headline, "message", message, "buttonLabel", buttonLabel], null, null)));
    t1 = document.querySelector(t1);
    t1.toString;
    J._addEventListener$3$x(t1, "click", new R.PromptWindow_showSimple_closure(callback), true);
  },
  PromptWindow_close: function() {
    var t1, win;
    if (!$.PromptWindow_opened)
      return;
    $.PromptWindow_opened = false;
    t1 = ".p-" + C.JSInt_methods.toString$0($.PromptWindow_id - 1);
    win = document.querySelector(t1);
    L.animate(win, 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["opacity", 0], null, null));
    P.Timer_Timer(P.Duration$(0, 0, 0, 125, 0, 0), new R.PromptWindow_close_closure(win));
  },
  PromptWindow___show_closure: {
    "^": "Closure:44;",
    call$1: [function($event) {
      R.PromptWindow_close();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  PromptWindow_show_closure: {
    "^": "Closure:44;callback_0",
    call$1: [function($event) {
      this.callback_0.call$1(true);
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  PromptWindow_show_closure0: {
    "^": "Closure:44;callback_1",
    call$1: [function($event) {
      this.callback_1.call$1(false);
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  PromptWindow_showSimple_closure: {
    "^": "Closure:44;callback_0",
    call$1: [function($event) {
      R.PromptWindow_close();
      this.callback_0.call$0();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  PromptWindow_close_closure: {
    "^": "Closure:46;win_0",
    call$0: function() {
      J.remove$0$ax(this.win_0);
    }
  }
}],
["", "RatingShower.dart", , Z, {
  "^": "",
  RatingShower_nextLevel: [function($event) {
    var t1, t2;
    t1 = $.RatingShower_e.level;
    if (!J.$eq(t1.currentSubLevel, t1.subLevels.length)) {
      Z.RatingShower_onTypeItemClick($event);
      return;
    }
    Z.RatingShower_hide();
    $.GameWizard_showing = false;
    t1 = $.GameWizard_currentBox;
    if (t1 != null) {
      T.fadeBoxOut(t1, 175, null);
      T.fadeBoxOut($.get$GameWizard_progress(), 175, null);
      A.Tooltip_closeAll();
    }
    t1 = $.RatingShower_e;
    t2 = t1.level;
    if (J.$ge$n(J.get$length$asx(t2.levels), J.$add$ns(t2.currentSubLevel, 1))) {
      C.JSArray_methods.set$length(t1.history, 0);
      if (J.finish$0$x(t1.level.current) === true)
        t1.level.next$0();
    }
    t1 = $.RatingShower_e;
    t1.isPaused = false;
    T.updateBlockButtons(t1);
    J.stopPropagation$0$x($event);
  }, "call$1", "RatingShower_nextLevel$closure", 2, 0, 7, 4],
  RatingShower_restartLevel: [function($event) {
    var t1;
    Z.RatingShower_hide();
    t1 = $.RatingShower_e;
    t1.isPaused = false;
    t1.restartLevel$0();
  }, "call$1", "RatingShower_restartLevel$closure", 2, 0, 8, 4],
  RatingShower_tapeItem: function(l, chapter, index, current) {
    var el, tr, ti, i, t1, levelIndex;
    el = H.interceptedTypeCast(document.querySelector(".tape-item-template"), "$isDivElement");
    J.set$innerHtml$x(el.querySelector(".tape-name"), J.$index$asx(l, "name"));
    tr = H.interceptedTypeCast(el.querySelector(".tape-rating"), "$isDivElement");
    ti = H.interceptedTypeCast(el.querySelector(".tape-item"), "$isDivElement");
    i = 1;
    while (true) {
      t1 = J.get$length$asx($.RatingShower_e.level.levels);
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (!(i <= t1))
        break;
      ti.toString;
      new W._ElementCssClassSet(ti).remove$1(0, "ti-" + C.JSInt_methods.toString$0(i));
      ++i;
    }
    levelIndex = C.JSInt_methods.toString$0(index + 1);
    ti.toString;
    ti.setAttribute("data-" + H.S(new W._DataAttributeMap(new W._ElementAttributeMap(ti))._toHyphenedName$1("level")), levelIndex);
    new W._ElementCssClassSet(ti).add$1(0, "ti-" + levelIndex);
    new W._ElementCssClassSet(ti).remove$1(0, "tape-current-item");
    new W._ElementCssClassSet(ti).remove$1(0, "locked");
    tr.toString;
    new W._ElementCssClassSet(tr).clear$0(0);
    new W._ElementCssClassSet(tr).add$1(0, "tape-rating");
    t1 = $.RatingShower_e.level.subLevels;
    if (index >= t1.length)
      new W._ElementCssClassSet(ti).add$1(0, "locked");
    else
      J.setInnerHtml$1$x(tr, Z.RatingShower_getStars(t1[index].get$rating()));
    if (index === current)
      new W._ElementCssClassSet(ti).add$1(0, "tape-current-item");
    ti.id = J.$add$ns(J.$add$ns(J.toString$0(chapter), "-"), levelIndex);
    return el.innerHTML;
  },
  RatingShower_getStars: function(stars) {
    var tpl, t1, passed, star, passed0, t2;
    tpl = H.interceptedTypeCast(document.querySelector(".star-template"), "$isDivElement");
    for (t1 = W._FrozenElementList$_wrap(tpl.querySelectorAll(".star"), null), t1 = t1.get$iterator(t1), passed = 1; t1.moveNext$0(); passed = passed0) {
      star = t1.__internal$_current;
      passed0 = passed + 1;
      t2 = J.getInterceptor$x(star);
      if (passed <= stars)
        t2.get$classes(star).remove$1(0, "extinct-star");
      else
        t2.get$classes(star).add$1(0, "extinct-star");
    }
    return tpl.innerHTML;
  },
  RatingShower_show: function(engine, rating, oldR) {
    var chapterLevel, t1, s, i, t2, _htmlValidator, nextTapeItem, element, t3, t4, dynamicCardsUsed, staticCardsUsed, time, t5;
    if (J.$eq(A.UserManager_getAsInt("boughtAttempts"), -1)) {
      J.get$classes$x(document.querySelector(".attempts-layout")).add$1(0, "hidden");
      J.get$classes$x(document.querySelector(".unlimited-attempts-layout")).remove$1(0, "hidden");
    } else {
      J.get$classes$x(document.querySelector(".unlimited-attempts-layout")).add$1(0, "hidden");
      J.get$classes$x(document.querySelector(".attempts-layout")).remove$1(0, "hidden");
    }
    A.Tooltip_closeAll();
    $.RatingShower_oldRating = oldR;
    $.RatingShower_newRating = rating;
    $.RatingShower_e = engine;
    engine.isPaused = true;
    J.get$classes$x(document.querySelector(".game-box")).add$1(0, "paused");
    J.set$display$x(document.querySelector(".level-name").style, "none");
    P.Timer_Timer(P.Duration$(0, 0, 0, 87, 0, 0), new Z.RatingShower_show_closure());
    T.fadeBoxIn(document.querySelector("#rating-box"), 175, null);
    J.get$classes$x(document.querySelector(".rating-wrap")).remove$1(0, "hidden");
    J.get$classes$x(document.querySelector(".chapter-rating-wrap")).add$1(0, "hidden");
    J.set$innerHtml$x(document.querySelector(".level-rating"), Z.RatingShower_getStars(rating));
    J.set$innerHtml$x(document.querySelector(".s-level-name"), J.get$name$x($.RatingShower_e.level.current));
    chapterLevel = document.querySelector(".chapter-level");
    J.set$innerHtml$x(chapterLevel.querySelector(".finished-levels"), J.toString$0(J.get$index$x($.RatingShower_e.level.current)));
    J.set$innerHtml$x(chapterLevel.querySelector(".all-levels"), J.toString$0(J.get$length$asx($.RatingShower_e.level.levels)));
    t1 = document.querySelector("#next-level");
    t1.toString;
    J._removeEventListener$3$x(t1, "click", Z.RatingShower_nextLevel$closure(), null);
    t1 = document.querySelector("#next-level");
    t1.toString;
    J._addEventListener$3$x(t1, "click", Z.RatingShower_nextLevel$closure(), null);
    t1 = document.querySelector("#restart-level");
    t1.toString;
    J._removeEventListener$3$x(t1, "click", Z.RatingShower_restartLevel$closure(), null);
    t1 = document.querySelector("#restart-level");
    t1.toString;
    J._addEventListener$3$x(t1, "click", Z.RatingShower_restartLevel$closure(), null);
    J.set$innerHtml$x(document.querySelector("#tape-es"), "");
    s = "";
    i = 0;
    while (true) {
      t1 = J.get$length$asx($.RatingShower_e.level.levels);
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (!(i < t1))
        break;
      t1 = J.$index$asx($.RatingShower_e.level.levels, i);
      t2 = $.RatingShower_e.level;
      s = C.JSString_methods.$add(s, Z.RatingShower_tapeItem(t1, t2.chapter, i, J.$sub$n(t2.currentSubLevel, 1)));
      ++i;
    }
    t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
    _htmlValidator = new W.NodeValidatorBuilder(t1);
    t1.push(W._Html5NodeValidator$(null));
    t1.push(W._TemplatingNodeValidator$());
    _htmlValidator.allowCustomElement$4$attributes$uriAttributes$uriPolicy("div", ["data-target", "data-level"], null, null);
    t1 = H.interceptedTypeCast(document.querySelector("#tape-es"), "$isDivElement");
    t1.textContent = null;
    t1.appendChild(J.createFragment$3$treeSanitizer$validator$x(t1, s, null, _htmlValidator));
    t1 = C.JSString_methods.$add(".ti-", J.toString$0(J.$add$ns($.RatingShower_e.level.currentSubLevel, 1)));
    nextTapeItem = document.querySelector(t1);
    if (nextTapeItem != null && !$.RatingShower_pauseState) {
      t1 = W._FrozenElementList$_wrap(nextTapeItem.querySelectorAll(".star"), null);
      t1.forEach$1(t1, new Z.RatingShower_show_closure0());
      J.get$classes$x(nextTapeItem).remove$1(0, "locked");
    }
    for (t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".tape-item"), null), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
      element = t1.__internal$_current;
      t2 = J.getInterceptor$x(element);
      t3 = t2.get$classes(element);
      t4 = C.JSString_methods.$add("ti-", J.toString$0(J.$add$ns($.RatingShower_e.level.currentSubLevel, 1)));
      if (t3.readClasses$0().contains$1(0, t4) && !t2.get$classes(element).readClasses$0().contains$1(0, "locked")) {
        t2.removeEventListener$2(element, "click", Z.RatingShower_nextLevel$closure());
        t2.addEventListener$2(element, "click", Z.RatingShower_nextLevel$closure());
      } else if (!t2.get$classes(element).readClasses$0().contains$1(0, "locked")) {
        t2.removeEventListener$2(element, "click", Z.RatingShower_onTypeItemClick$closure());
        t2.addEventListener$2(element, "click", Z.RatingShower_onTypeItemClick$closure());
      }
    }
    t1 = document.querySelector("#clear-level");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new Z.RatingShower_show_closure1(engine), null);
    if ($.RatingShower_pauseState) {
      J.get$classes$x(document.querySelector(".level-controls")).add$1(0, "hidden");
      J.get$classes$x(document.querySelector(".pause-controls")).remove$1(0, "hidden");
      J.get$classes$x(document.querySelector(".pause-title")).remove$1(0, "hidden");
      J.get$classes$x(document.querySelector(".chapter-rating-wrap")).add$1(0, "hidden");
      t1 = document.querySelector("#pm-menu");
      t1.toString;
      J._addEventListener$3$x(t1, "click", new Z.RatingShower_show_closure2(engine), null);
      t1 = document.querySelector("#resume-game");
      t1.toString;
      J._removeEventListener$3$x(t1, "click", Z.RatingShower_resume$closure(), null);
      J._addEventListener$3$x(t1, "click", Z.RatingShower_resume$closure(), false);
      J.get$classes$x(document.querySelector(".level-rating")).add$1(0, "hidden");
      J.get$classes$x(document.querySelector(".rating-inner-layout")).remove$1(0, "small-margin");
    } else {
      dynamicCardsUsed = engine.countCards$1(false);
      staticCardsUsed = engine.countCards$1(true);
      t1 = $.RatingShower_newRating;
      t2 = $.RatingShower_e.level.current.get$attemptsUsed();
      time = C.JSNumber_methods._tdivFast$1(new P.DateTime(Date.now(), false).difference$1($.WebApi_startTime)._core$_duration, 1000000);
      t3 = $.get$context();
      H.interceptedTypeCast(J.$index$asx(t3, "Features"), "$isJsObject").callMethod$2("onLevelFinish", [$.WebApi_chapter, $.WebApi_level, t1, dynamicCardsUsed, staticCardsUsed, t2, time]);
      $.RatingShower_e.level.current.set$attemptsUsed(0);
      J.get$classes$x(document.querySelector(".level-controls")).remove$1(0, "hidden");
      J.get$classes$x(document.querySelector(".pause-controls")).add$1(0, "hidden");
      J.get$classes$x(document.querySelector(".level-rating")).remove$1(0, "hidden");
      J.get$classes$x(document.querySelector(".pause-title")).add$1(0, "hidden");
      J.get$classes$x(document.querySelector(".rating-inner-layout")).add$1(0, "small-margin");
      J.$index$asx(t3, "Features").callMethod$1("resetSharing");
      t3 = W._FrozenElementList$_wrap(document.querySelectorAll(".share-level"), null);
      t3.forEach$1(t3, new Z.RatingShower_show_closure3(rating, dynamicCardsUsed, staticCardsUsed));
    }
    t1 = document.querySelector(".attempts-left");
    t2 = $.get$sprintf();
    t3 = $.get$context();
    t4 = J.$index$asx(J.$index$asx(t3, "locale"), "attempts_left");
    t5 = J.$eq(A.UserManager_getAsInt("boughtAttempts"), -1) ? "\u221e" : J.toString$0(A.UserManager_get("allAttempts"));
    J.set$innerHtml$x(t1, t2.call$2(t4, [t5, J.$index$asx(t3, "Features").callMethod$2("getNounPlural", [A.UserManager_get("allAttempts"), J.$index$asx(J.$index$asx(t3, "locale"), "attempt_form1"), J.$index$asx(J.$index$asx(t3, "locale"), "attempt_form2"), J.$index$asx(J.$index$asx(t3, "locale"), "attempt_form3")])]));
    t5 = document.querySelector(".get-attempts-button");
    t5.toString;
    J._addEventListener$3$x(t5, "click", new Z.RatingShower_show_closure4(), true);
    J.set$width$x(document.querySelector("#tape-es").style, C.JSNumber_methods.toString$0(J.$mul$ns(J.get$length$asx($.RatingShower_e.level.levels), 172) + 10) + "px");
    Q.Scroll_setup("tape-vs", "tape-es", "tape-scrollbar", "h");
    t1 = J.$add$ns(J.toString$0($.RatingShower_e.level.chapter), "-");
    t1 = J.$add$ns(t1, J.toString$0(J.$gt$n($.RatingShower_e.level.currentSubLevel, 0) ? J.$sub$n($.RatingShower_e.level.currentSubLevel, 1) : 0));
    J.$index$asx(t3, "dw_scrollObj").callMethod$2("scrollToId", ["tape-vs", t1, "", 550]);
    t1 = $.RatingShower_e.level;
    if (!J.$ge$n(J.get$length$asx(t1.levels), J.$add$ns(t1.currentSubLevel, 1)) && !$.RatingShower_pauseState)
      Z.RatingShower_chapterComplete(engine, rating);
    if ($.RatingShower_pauseState)
      A.Input_attachSingleEscClickCallback(Z.RatingShower_hide$closure());
  },
  RatingShower_blurGameBox: function() {
    J.get$classes$x(document.querySelector("#graphics")).add$1(0, "blurred");
    J.get$classes$x(document.querySelector(".buttons")).add$1(0, "blurred");
    J.get$classes$x(document.querySelector(".selectors")).add$1(0, "blurred");
  },
  RatingShower_unblurGameBox: function() {
    J.get$classes$x(document.querySelector("#graphics")).remove$1(0, "blurred");
    J.get$classes$x(document.querySelector(".buttons")).remove$1(0, "blurred");
    J.get$classes$x(document.querySelector(".selectors")).remove$1(0, "blurred");
  },
  RatingShower_resume: [function(e) {
    Z.RatingShower_hide();
    $.Input_keyDown = null;
  }, "call$1", "RatingShower_resume$closure", 2, 0, 7, 9],
  RatingShower_chapterComplete: function(engine, rating) {
    var t1, totalStars, t2;
    J.get$classes$x(document.querySelector(".rating-wrap")).add$1(0, "hidden");
    J.get$classes$x(document.querySelector(".chapter-rating-wrap")).remove$1(0, "hidden");
    J.get$classes$x(document.querySelector(".pause-controls")).add$1(0, "hidden");
    J.get$classes$x(document.querySelector(".level-controls")).add$1(0, "hidden");
    for (t1 = $.RatingShower_e.level.subLevels, t1 = new H.ListIterator(t1, t1.length, 0, null), totalStars = 0; t1.moveNext$0();)
      totalStars += t1.__internal$_current.get$rating();
    J.set$innerHtml$x(document.querySelector(".chapter-rating"), C.JSInt_methods.toString$0(totalStars));
    t1 = document.querySelector("#cc-list");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new Z.RatingShower_chapterComplete_closure(engine), true);
    J.get$classes$x(document.querySelector(".attempts-layout")).add$1(0, "hidden");
    t1 = document.querySelector(".current-level-name");
    t2 = J.getInterceptor$x(t1);
    t2.get$classes(t1).remove$1(0, "hidden");
    t2.set$innerHtml(t1, J.get$name$x(engine.level.current));
    J.set$innerHtml$x(document.querySelector(".current-level-rating"), Z.RatingShower_getStars(rating));
    t1 = document.querySelector(".current-chapter-name");
    t2 = J.getInterceptor$x(t1);
    t2.get$classes(t1).remove$1(0, "hidden");
    t2.set$innerHtml(t1, J.$index$asx(J.$index$asx($.Chapter_chapters, J.$sub$n(engine.level.chapter, 1)), "name"));
    J.remove$1$ax(window.localStorage, "last");
  },
  RatingShower_onTypeItemClick: [function(evt) {
    var t1, level, t2;
    Z.RatingShower_hide();
    $.RatingShower_e.isPaused = false;
    t1 = J.getInterceptor$x(evt);
    if (!!J.getInterceptor(t1.get$currentTarget(evt)).$isDivElement) {
      t1 = H.interceptedTypeCast(t1.get$currentTarget(evt), "$isDivElement");
      t1.toString;
      level = H.Primitives_parseInt(t1.getAttribute("data-" + H.S(new W._DataAttributeMap(new W._ElementAttributeMap(t1))._toHyphenedName$1("level"))), null, null);
    } else if (!!J.getInterceptor(t1.get$currentTarget(evt)).$isButtonElement) {
      t1 = document.querySelector(".tape-current-item");
      t1.toString;
      level = J.$add$ns(H.Primitives_parseInt(t1.getAttribute("data-" + H.S(new W._DataAttributeMap(new W._ElementAttributeMap(t1))._toHyphenedName$1("level"))), null, null), 1);
    } else
      level = null;
    t1 = $.RatingShower_e;
    $.Level_eng = t1;
    $.Level_targetLevel = level;
    if (J.$eq(level, t1.level.currentSubLevel)) {
      t2 = $.Level_eng;
      t2.toString;
      T.applyPhysicsLabelToButton();
      H.interceptedTypeCast(t2.to.userData, "$isEnergySprite").energy = 0;
      Q.Level_saveStarsForLoadedLevels(t1, level);
    } else if (J.$lt$n(level, $.Level_eng.level.currentSubLevel)) {
      Q.Level_saveStarsForLoadedLevels(t1, level);
      t1 = $.Level_eng;
      t2 = t1.level;
      $.Level_last = t2.current;
      t1.frontRewind = false;
      t2.previous$0();
      $.Level_eng.level.current.set$levelApplied(Q.Level_onLevelApplied$closure());
    } else {
      t1 = $.Level_eng;
      t1.frontRewind = true;
      t1.frontRewindLevelComplete = Q.Level_onFrontRewindLevelComplete$closure();
      t1.frontRewindLevelFailed = Q.Level_onFrontRewindLevelFailed$closure();
    }
  }, "call$1", "RatingShower_onTypeItemClick$closure", 2, 0, 7, 10],
  RatingShower_hide: [function() {
    $.Input_keyDown = null;
    $.RatingShower_e.isPaused = false;
    $.RatingShower_wasJustPaused = true;
    Z.RatingShower_unblurGameBox();
    T.fadeBoxOut(document.querySelector("#rating-box"), 175, new Z.RatingShower_hide_closure());
  }, "call$0", "RatingShower_hide$closure", 0, 0, 0],
  RatingShower_show_closure: {
    "^": "Closure:46;",
    call$0: function() {
      Z.RatingShower_blurGameBox();
    }
  },
  RatingShower_show_closure0: {
    "^": "Closure:66;",
    call$1: function(el) {
      J.get$classes$x(el).add$1(0, "extinct-star");
    }
  },
  RatingShower_show_closure1: {
    "^": "Closure:44;engine_0",
    call$1: [function(e) {
      this.engine_0.clear$0(0);
      Z.RatingShower_hide();
    }, "call$1", null, 2, 0, null, 9, "call"]
  },
  RatingShower_show_closure2: {
    "^": "Closure:44;engine_1",
    call$1: [function($event) {
      Z.RatingShower_hide();
      T.showMainMenu();
      L.animate(document.querySelector(".level-name"), 1, C.Easing_15, null, P.LinkedHashMap_LinkedHashMap$_literal(["margin-top", -20, "opacity", 0, "font-size", 32], null, null));
      return;
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  RatingShower_show_closure3: {
    "^": "Closure:44;rating_2,dynamicCardsUsed_3,staticCardsUsed_4",
    call$1: function(el) {
      J.addEventListener$3$x(el, "click", new Z.RatingShower_show__closure(this.rating_2, this.dynamicCardsUsed_3, this.staticCardsUsed_4), true);
    }
  },
  RatingShower_show__closure: {
    "^": "Closure:44;rating_5,dynamicCardsUsed_6,staticCardsUsed_7",
    call$1: [function($event) {
      var t1, t2, t3, t4, t5;
      t1 = J.$index$asx($.get$context(), "Features");
      t2 = J.get$name$x($.RatingShower_e.level.current);
      t3 = this.rating_5;
      t4 = Z.RatingShower_getStars(t3);
      t5 = $.RatingShower_e.level;
      t1.callMethod$2("prepareLevelWallPost", [t2, t4, t5.chapter, t5.currentSubLevel, t3, this.dynamicCardsUsed_6, this.staticCardsUsed_7]);
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  RatingShower_show_closure4: {
    "^": "Closure:44;",
    call$1: [function($event) {
      if ($.RatingShower_pauseState)
        Z.RatingShower_hide();
      $.hints.getMoreHints$0();
      return;
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  RatingShower_chapterComplete_closure: {
    "^": "Closure:44;engine_0",
    call$1: [function($event) {
      var t1;
      Z.RatingShower_hide();
      t1 = this.engine_0;
      C.JSArray_methods.remove$1($.manager.states, t1);
      t1.clear$1(0, true);
      J.get$classes$x(document.querySelector(".buttons")).add$1(0, "hidden");
      J.get$classes$x(document.querySelector(".selectors")).add$1(0, "hidden");
      T.fadeBoxIn(document.querySelector("#chapter-selection"), 500, null);
      O.ChapterShower_show($.Chapter_chapters);
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  RatingShower_hide_closure: {
    "^": "Closure:46;",
    call$0: function() {
      J.set$display$x(document.querySelector(".level-name").style, "block");
      J.get$classes$x(document.querySelector(".game-box")).remove$1(0, "paused");
    }
  }
}],
["", "Scroll.dart", , Q, {
  "^": "",
  Scroll_setup: function(visibleId, entireId, scrollbar, axis) {
    var $scroll, t1;
    $scroll = P.JsObject_JsObject(J.$index$asx($.get$context(), "dw_scrollObj"), [visibleId, entireId]);
    t1 = "#" + scrollbar;
    J.set$innerHtml$x(document.querySelector(t1), "");
    $scroll.callMethod$2("buildScrollControls", [scrollbar, axis, "mouseover", true]);
    return $scroll;
  }
}],
["", "Sprite.dart", , R, {
  "^": "",
  Sprite: {
    "^": "Object;energy@,isInner<,isHidden,active<,connectedToEnergy?,energySupport<,isStatic@,isHint<,contactOverlay?,enabled@,px@,py@,gravity@,id*,bFrom?,color,canvasDraw,center<,axis",
    render$2: function(g, b) {
      var tf, t1;
      if (this.isHidden)
        return;
      this.canvasDraw = g;
      tf = V.Transform$();
      t1 = b.get$originTransform();
      tf.position.setFrom$1(t1.position);
      tf.rotation.setFrom$1(t1.rotation);
      this.drawShape$3(b.get$fixtureList(), tf, this.color);
      if (this.contactOverlay)
        this.drawShape$3(b.get$fixtureList(), tf, new A.Color4(220, 30, 30, 0.425));
    },
    drawShape$3: function(fixture, xf, color) {
      var t1, circle, radius, t2, t3, poly, vertexCount, vertices, i;
      if (J.$eq(fixture.userData, false)) {
        fixture = fixture.next;
        if (fixture != null)
          ;
        else
          return;
      }
      t1 = J.getInterceptor$x(fixture);
      switch (t1.get$type(fixture)) {
        case 0:
          circle = t1.get$shape(fixture);
          V.Transform_mulToOut(xf, J.get$position$x(circle), this.center);
          radius = circle.get$radius();
          t1 = this.axis;
          t2 = xf.rotation.storage;
          t3 = t2[0];
          t2 = t2[1];
          t1 = t1.storage;
          t1[0] = t3;
          t1[1] = t2;
          t1 = this.canvasDraw;
          t2 = t1.flags;
          t3 = this.center;
          if (0 !== (t2 & 64)) {
            t2 = t1.viewportTransform.scale;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t1._pathCircle$3(t3, radius * t2, color);
            J.stroke$0$x(t1.ctx);
          } else {
            t2 = t1.viewportTransform.scale;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t1._pathCircle$3(t3, radius * t2, color);
            J.fill$0$x(t1.ctx);
          }
          break;
        case 1:
          poly = t1.get$shape(fixture);
          vertexCount = poly.get$vertexCount();
          vertices = P.List_List$generate(vertexCount, new R.Sprite_drawShape_closure(), true, T.Vector2);
          for (i = 0; i < vertexCount; ++i) {
            t1 = poly.get$vertices();
            if (i >= 12)
              return H.ioore(t1, i);
            t1 = t1[i];
            if (i >= vertices.length)
              return H.ioore(vertices, i);
            V.Transform_mulToOut(xf, t1, vertices[i]);
          }
          t1 = this.canvasDraw;
          if (0 !== (t1.flags & 64)) {
            t1._pathPolygon$3(vertices, vertexCount, color);
            J.stroke$0$x(t1.ctx);
          } else if (vertexCount > 2) {
            t1._pathPolygon$3(vertices, vertexCount, color);
            J.fill$0$x(t1.ctx);
          } else {
            t1._pathPolygon$3(vertices, vertexCount, color);
            J.stroke$0$x(t1.ctx);
          }
          break;
      }
    },
    deactivate$0: function() {
    },
    Sprite$0: function() {
      this.center = new T.Vector2(new Float32Array(H._checkLength(2)));
      this.axis = new T.Vector2(new Float32Array(H._checkLength(2)));
    },
    $isSprite: true,
    static: {"^": "Sprite_CURRENT_ID", Sprite_from: function(w, active) {
        var s = Q.EnergySprite$(w, false);
        s.isCard = false;
        if (active) {
          s.energy = 1;
          s.alwaysAnimate = true;
          s.connectedToEnergy = true;
          s.active = true;
        } else {
          s.energy = 0;
          s.alwaysAnimate = false;
          s.connectedToEnergy = false;
          s.active = false;
        }
        return s;
      }, Sprite_to: function(w) {
        var s = Q.EnergySprite$(w, false);
        s.energy = 0;
        s.active = true;
        s.energyStep = 0.1;
        return s;
      }, Sprite_byType: function(type, w) {
        var s;
        switch (type) {
          case 1:
            s = new R.Sprite(0, false, false, false, false, false, false, false, false, true, 0, 0, 0, null, null, null, null, null, null);
            s.center = new T.Vector2(new Float32Array(2));
            s.axis = new T.Vector2(new Float32Array(2));
            s.color = new A.Color4(200, 200, 200, 1);
            return s;
          case 2:
            return R.Sprite_from(w, true);
          case 3:
            s = Q.EnergySprite$(w, false);
            s.energy = 0;
            s.active = true;
            s.energyStep = 0.1;
            return s;
          case 4:
            s = new R.Sprite(0, false, false, false, false, false, false, false, false, true, 0, 0, 0, null, null, null, null, null, null);
            s.center = new T.Vector2(new Float32Array(2));
            s.axis = new T.Vector2(new Float32Array(2));
            s.color = new A.Color4(200, 200, 200, 1);
            s.color = new A.Color4(200, 144, 144, 1);
            return s;
        }
        return;
      }}
  },
  Sprite_drawShape_closure: {
    "^": "Closure:44;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(H._checkLength(2)));
    }
  }
}],
["", "StarManager.dart", , T, {
  "^": "",
  StarManager_load: function() {
    var m, t1, c, t2;
    m = C.JsonCodec_null_null.decode$1(window.localStorage.getItem("stars"));
    $.StarManager_byChapters = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(m);
    $.StarManager_total = t1.$index(m, "total");
    for (t1 = J.get$iterator$ax(t1.$index(m, "chapters")); t1.moveNext$0();) {
      c = t1.get$current();
      t2 = J.getInterceptor$asx(c);
      $.StarManager_byChapters.$indexSet(0, t2.$index(c, "id"), t2.$index(c, "s"));
    }
  },
  StarManager_setResult: function(chapter, result) {
    if (J.$lt$n(result, 0))
      result = 0;
    $.StarManager_byChapters.$indexSet(0, chapter, result);
    $.StarManager_total = 0;
    $.StarManager_byChapters.forEach$1(0, new T.StarManager_setResult_closure());
    T.StarManager_save();
  },
  StarManager_saveFrom: function(chapter, levels) {
    var len, i, t1;
    T.StarManager_setResult(chapter, 0);
    for (len = levels.length, i = 0; i < len; ++i) {
      if (i >= levels.length)
        return H.ioore(levels, i);
      t1 = levels[i].get$rating();
      T.StarManager_setResult(chapter, J.$add$ns(T.StarManager_getResult(chapter), t1));
    }
  },
  StarManager_getResult: function(chapter) {
    if ($.StarManager_byChapters.$index(0, chapter) != null)
      return $.StarManager_byChapters.$index(0, chapter);
    return 0;
  },
  StarManager_save: function() {
    var m, c;
    m = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    m.$indexSet(0, "total", $.StarManager_total);
    c = [];
    $.StarManager_byChapters.forEach$1(0, new T.StarManager_save_closure(c));
    m.$indexSet(0, "chapters", c);
    window.localStorage.setItem("stars", C.JsonCodec_null_null.encode$1(m));
  },
  StarManager_setResult_closure: {
    "^": "Closure:52;",
    call$2: function(k, v) {
      $.StarManager_total = J.$add$ns($.StarManager_total, v);
    }
  },
  StarManager_save_closure: {
    "^": "Closure:52;c_0",
    call$2: function(k, v) {
      this.c_0.push(P.LinkedHashMap_LinkedHashMap$_literal(["id", k, "s", v], null, null));
    }
  }
}],
["", "StateManager.dart", , D, {
  "^": "",
  State: {
    "^": "Object;"
  },
  StateManager: {
    "^": "Object;states,lastStepTime,g",
    step$1: [function(_, time) {
      var delta, t1, state, t2;
      delta = J.$sub$n(time, this.lastStepTime);
      J.setFillColorRgb$3$x(this.g, 0, 0, 0);
      J.fillRect$4$x(this.g, 0, 0, $.Input_canvasWidth, $.Input_canvasHeight);
      for (t1 = this.states, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        state = t1.__internal$_current;
        state.update$1(delta);
        state.render$0();
      }
      this.lastStepTime = time;
      t1 = window;
      t2 = this.get$step(this);
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
    }, "call$1", "get$step", 2, 0, 67, 68]
  }
}],
["", "SubLevel.dart", , Z, {
  "^": "",
  SubLevel: {
    "^": "Object;name>,frames@,obstaclesFrames@,cards<,obstacles<,stars,attemptsUsed@,e,fSprite,tSprite,levelData,levelApplied?,x*,y*,w<,h,gravity<,currentSpriteId,rating@,index>,staticBlocksRemaining@,dynamicBlocksRemaining@,maxStaticBlocks<,maxDynamicBlocks<,from,to<,completed@",
    levelApplied$0: function() {
      return this.levelApplied.call$0();
    },
    alignCamera$0: function() {
      var t1, t2;
      t1 = this.e.camera;
      t1.pxOffsetX = 0;
      t1.pxOffsetY = 0;
      t1.targetOffsetX = 0;
      t1.targetOffsetY = 0;
      t2 = this.x;
      t1.setBounds$4(t2, this.y, J.$add$ns(t2, this.w), this.y + this.h);
    },
    getRating$0: function() {
      if (J.$ge$n(J.$index$asx(this.stars, 0), this.e.cards.length)) {
        this.rating = 3;
        var t1 = 3;
      } else if (J.$ge$n(J.$index$asx(this.stars, 1), this.e.cards.length)) {
        this.rating = 2;
        t1 = 2;
      } else {
        this.rating = 1;
        t1 = 1;
      }
      return t1;
    },
    loadRating$0: function() {
      if (J.$ge$n(J.$index$asx(this.stars, 0), this.cards.length))
        this.rating = 3;
      else if (J.$ge$n(J.$index$asx(this.stars, 1), this.cards.length))
        this.rating = 2;
      else
        this.rating = 1;
    },
    finish$0: function(_) {
      var t1;
      if (this.e.cards.length === 0)
        return false;
      this.completed = true;
      this.saveState$0();
      for (t1 = this.e.cards, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        J.set$type$x(t1.__internal$_current, 0);
      t1 = this.e;
      t1.physicsEnabled = false;
      t1.bobbin.erase$0();
      C.JSArray_methods.set$length(this.e.cards, 0);
      T.applyPhysicsLabelToButton();
      return true;
    },
    saveState$0: function() {
      var t1, t2;
      t1 = [];
      this.cards = t1;
      C.JSArray_methods.addAll$1(t1, this.e.cards);
      t1 = [];
      this.frames = t1;
      C.JSArray_methods.addAll$1(t1, this.e.bobbin.list);
      t1 = [];
      this.obstaclesFrames = t1;
      C.JSArray_methods.addAll$1(t1, this.e.obstaclesBobbin.list);
      t1 = this.e;
      t2 = t1.from;
      this.from = t2;
      t1 = t1.to;
      this.to = t1;
      this.fSprite = t2.userData;
      this.tSprite = t1.userData;
    },
    enable$1: function(_, v) {
      var t1;
      for (t1 = this.cards, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1.__internal$_current.get$userData().set$enabled(v);
      this.from.userData.set$enabled(v);
      this.to.userData.set$enabled(v);
    },
    apply$0: function() {
      var f, t1;
      f = new Z.SubLevel_apply_closure(this);
      t1 = this.e;
      if (t1.physicsEnabled)
        if (!t1.frontRewind) {
          t1.bobbin.rewindComplete = f;
          t1.rewind$0();
        } else
          f.call$0();
      else
        f.call$0();
    },
    complete$0: function(_) {
      var t1, b;
      this.completed = true;
      for (t1 = this.cards, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        b = t1.__internal$_current;
        if (b.get$userData().get$isStatic() !== true && b.get$userData().get$energy() > 0.5) {
          H.interceptedTypeCast(b.get$userData(), "$isEnergySprite").alwaysAnimate = true;
          H.interceptedTypeCast(b.get$userData(), "$isEnergySprite").active = true;
          H.interceptedTypeCast(b.get$userData(), "$isEnergySprite").connectedToEnergy = true;
        }
      }
    },
    online$2: function(online, full) {
      var t1, t2, c, t3;
      for (t1 = this.cards, t1 = new H.ListIterator(t1, t1.length, 0, null), t2 = !online; t1.moveNext$0();) {
        c = t1.__internal$_current;
        H.interceptedTypeCast(c.get$userData(), "$isEnergySprite").makeSensor$2(t2, c);
      }
      if (full) {
        t1 = this.from;
        t3 = this.e.level.current.get$to();
        t3 = t1 == null ? t3 != null : t1 !== t3;
        t1 = t3;
      } else
        t1 = false;
      if (t1) {
        t1 = this.from;
        H.interceptedTypeCast(t1.userData, "$isEnergySprite").makeSensor$2(t2, t1);
      }
      t1 = this.to;
      H.interceptedTypeCast(t1.userData, "$isEnergySprite").makeSensor$2(t2, t1);
    },
    online$1: function(online) {
      return this.online$2(online, false);
    },
    SubLevel$4: function(e, l, index, further) {
      var t1, t2, t3, t4, t5, obstacle, t6, o, points, t7, p, t8, t9, t10, sd, fd, bd, body, type, s;
      this.index = index;
      this.e = e;
      t1 = J.getInterceptor$asx(l);
      this.name = t1.$index(l, "name");
      this.levelData = l;
      this.x = J.toDouble$0$n(t1.$index(l, "x"));
      this.y = J.toDouble$0$n(t1.$index(l, "y"));
      this.w = J.toDouble$0$n(t1.$index(l, "width"));
      this.h = J.toDouble$0$n(t1.$index(l, "height"));
      this.staticBlocksRemaining = J.$index$asx(t1.$index(l, "blocks"), 0);
      this.dynamicBlocksRemaining = J.$index$asx(t1.$index(l, "blocks"), 1);
      this.maxStaticBlocks = J.$index$asx(t1.$index(l, "blocks"), 0);
      this.maxDynamicBlocks = J.$index$asx(t1.$index(l, "blocks"), 1);
      this.stars = t1.$index(l, "stars");
      this.alignCamera$0();
      t2 = J.getInterceptor$n(index);
      t3 = !further;
      if (t2.$gt(index, 1)) {
        t4 = e.level.subLevels;
        t2 = t2.$sub(index, 2);
        if (t2 >>> 0 !== t2 || t2 >= t4.length)
          return H.ioore(t4, t2);
        t2 = t4[t2].get$to();
        this.from = t2;
        t2.userData = R.Sprite_from(e.world, t3);
      } else {
        t2 = e.createPolygonShape$4(J.toDouble$0$n(J.$index$asx(t1.$index(l, "from"), "x")) / 85, J.toDouble$0$n(J.$index$asx(t1.$index(l, "from"), "y")) / 85, 0.4117647058823529, 0.4117647058823529);
        this.from = t2;
        t2.userData = R.Sprite_from(e.world, t3);
      }
      t2 = e.createPolygonShape$4(J.toDouble$0$n(J.$index$asx(t1.$index(l, "to"), "x")) / 85, J.toDouble$0$n(J.$index$asx(t1.$index(l, "to"), "y")) / 85, 0.4117647058823529, 0.4117647058823529);
      this.to = t2;
      t2.userData = R.Sprite_to(e.world);
      if (t1.$index(l, "gravity") != null && !J.$eq(t1.$index(l, "gravity"), 0)) {
        t2 = J.toDouble$0$n(t1.$index(l, "gravity"));
        this.gravity = t2;
        if (!further) {
          t3 = e.world;
          t4 = new Float32Array(H._checkLength(2));
          t4[0] = 0;
          t4[1] = t2;
          t3.setGravity$1(new T.Vector2(t4));
          t2 = this.gravity;
          t3 = $.parallax;
          if (t2 > 0)
            t3.modifier = -1;
          else
            t3.modifier = 1;
        }
      }
      for (t1 = J.get$iterator$ax(t1.$index(l, "obstacles")), t2 = this.obstacles, t3 = e.cardDensity, t4 = e.cardFriction, t5 = e.cardRestitution; t1.moveNext$0();) {
        obstacle = t1.get$current();
        t6 = J.getInterceptor$asx(obstacle);
        if (J.$eq(t6.$index(obstacle, "type"), 1) || J.$eq(t6.$index(obstacle, "type"), 5))
          o = e.createPolygonShape$5(J.toDouble$0$n(t6.$index(obstacle, "x")) / 85, J.toDouble$0$n(t6.$index(obstacle, "y")) / 85, J.toDouble$0$n(t6.$index(obstacle, "width")) / 85, J.toDouble$0$n(t6.$index(obstacle, "height")) / 85, J.$eq(t6.$index(obstacle, "type"), 5));
        else if (J.$eq(t6.$index(obstacle, "type"), 2) || J.$eq(t6.$index(obstacle, "type"), 6)) {
          points = [];
          for (t7 = J.get$iterator$ax(t6.$index(obstacle, "points")); t7.moveNext$0();) {
            p = t7.get$current();
            t8 = J.getInterceptor$asx(p);
            t9 = J.$div$n(t8.$index(p, "x"), 85);
            t8 = J.$div$n(t8.$index(p, "y"), 85);
            t10 = new Float32Array(2);
            t10[0] = t9;
            t10[1] = t8;
            points.push(new T.Vector2(t10));
          }
          t7 = J.$eq(t6.$index(obstacle, "type"), 6);
          sd = V.PolygonShape$();
          sd.setFrom$2(points, points.length);
          fd = V.FixtureDef$();
          fd.shape = sd;
          if (t7) {
            fd.density = t3;
            fd.friction = t4;
            fd.restitution = t5;
          } else
            fd.friction = 0.7;
          bd = V.BodyDef$();
          if (t7)
            bd.angularDamping = 10.5;
          body = e.world.createBody$1(bd);
          body.createFixture$1(fd);
          o = body;
        } else
          o = null;
        type = J.$eq(t6.$index(obstacle, "type"), 5) || J.$eq(t6.$index(obstacle, "type"), 6) ? 4 : 1;
        s = R.Sprite_byType(type, e.world);
        o.userData = s;
        s.id = ++this.currentSpriteId;
        if (t6.$index(obstacle, "gravity") != null)
          o.userData.set$gravity(J.toDouble$0$n(t6.$index(obstacle, "gravity")));
        if (!J.$eq(t6.$index(obstacle, "type"), 5) && !J.$eq(t6.$index(obstacle, "type"), 6))
          o.userData.set$isStatic(true);
        t2.push(o);
      }
      if (!further) {
        e.from = this.from;
        e.to = this.to;
      }
    },
    static: {SubLevel$: function(e, l, index, further) {
        var t1 = new Z.SubLevel(null, [], [], [], H.setRuntimeTypeInfo([], [V.Body]), null, 0, null, null, null, null, null, null, null, null, null, -10, 0, 0, null, null, null, null, null, null, null, false);
        t1.SubLevel$4(e, l, index, further);
        return t1;
      }}
  },
  SubLevel_apply_closure: {
    "^": "Closure:46;this_0",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.this_0;
      t2 = t1.e.camera;
      t3 = t1.x;
      t2.setBounds$4(t3, t1.y, J.$add$ns(t3, t1.w), t1.y + t1.h);
      t3 = t1.e.camera;
      t2 = J.$div$n(t1.x, $.GameEngine_scale);
      t3.toString;
      t3.targetOffsetX = J.$mul$ns(t2, $.GameEngine_scale);
      t2 = t1.e;
      t3 = t2.camera;
      t4 = t1.y;
      t5 = $.GameEngine_scale;
      if (typeof t5 !== "number")
        return H.iae(t5);
      t3.targetOffsetY = -(t4 / t5) * t5;
      t2.bobbin.list = t1.frames;
      t2.cards = t1.cards;
      t2 = t2.world;
      t5 = t1.gravity;
      t4 = new Float32Array(H._checkLength(2));
      t4[0] = 0;
      t4[1] = t5;
      t2.setGravity$1(new T.Vector2(t4));
      t2 = t1.gravity;
      t3 = $.parallax;
      if (t2 > 0)
        t3.modifier = -1;
      else
        t3.modifier = 1;
      t2 = t1.e;
      t2.obstaclesBobbin.list = t1.obstaclesFrames;
      t3 = t1.from;
      t2.from = t3;
      t3.userData = R.Sprite_from(t2.world, true);
      t2 = t1.e;
      t3 = t1.to;
      t2.to = t3;
      t4 = t1.tSprite;
      if (t4 != null)
        t3.userData = t4;
      else
        t1.tSprite = t3.userData;
      if (t2.frontRewind)
        T.applyRewindLabelToButton(null);
      else {
        t2.rewind$0();
        t1.e.bobbin.rewindComplete = new Z.SubLevel_apply__closure(t1);
      }
    }
  },
  SubLevel_apply__closure: {
    "^": "Closure:46;this_1",
    call$0: function() {
      var t1 = this.this_1;
      t1.e.bobbin.rewindComplete = null;
      C.JSArray_methods.set$length(t1.frames, 0);
      C.JSArray_methods.set$length(t1.obstaclesFrames, 0);
      if (t1.levelApplied != null)
        t1.levelApplied$0();
      t1.levelApplied = null;
    }
  }
}],
["", "SuperCanvasDraw.dart", , B, {
  "^": "",
  SuperCanvasDraw: {
    "^": "Object;ctx,flags@,viewportTransform",
    _pathPolygon$3: function(vertices, vertexCount, color) {
      var i, t1, t2, t3;
      this.set$_color(color);
      for (i = 0; i < vertexCount; ++i) {
        if (i >= vertices.length)
          return H.ioore(vertices, i);
        t1 = vertices[i];
        this.viewportTransform.getWorldToScreen$2(t1, t1);
      }
      t1 = this.ctx;
      t2 = J.getInterceptor$x(t1);
      t2.beginPath$0(t1);
      if (0 >= vertices.length)
        return H.ioore(vertices, 0);
      t3 = J.get$x$x(vertices[0]);
      if (0 >= vertices.length)
        return H.ioore(vertices, 0);
      t2.moveTo$2(t1, t3, J.get$y$x(vertices[0]));
      for (i = 1; i < vertexCount; ++i) {
        if (i >= vertices.length)
          return H.ioore(vertices, i);
        t3 = J.get$x$x(vertices[i]);
        if (i >= vertices.length)
          return H.ioore(vertices, i);
        t2.lineTo$2(t1, t3, J.get$y$x(vertices[i]));
      }
      if (0 >= vertices.length)
        return H.ioore(vertices, 0);
      t3 = J.get$x$x(vertices[0]);
      if (0 >= vertices.length)
        return H.ioore(vertices, 0);
      t2.lineTo$2(t1, t3, J.get$y$x(vertices[0]));
      t2.closePath$0(t1);
    },
    _pathCircle$3: function(center, radius, color) {
      var t1, t2, t3;
      this.set$_color(color);
      this.viewportTransform.getWorldToScreen$2(center, center);
      t1 = this.ctx;
      t2 = J.getInterceptor$x(t1);
      t2.beginPath$0(t1);
      t3 = center.storage;
      t2.arc$6(t1, t3[0], t3[1], radius, 0, 6.283185307179586, true);
      t2.closePath$0(t1);
    },
    set$_color: function(color) {
      var t1, t2, t3, t4, t5;
      t1 = this.ctx;
      t2 = color.x;
      t3 = color.y;
      t4 = color.z;
      t5 = J.getInterceptor$x(t1);
      t5.setStrokeColorRgb$4(t1, t2, t3, t4, color.a);
      t5.setFillColorRgb$4(t1, color.x, color.y, t4, color.a);
    },
    SuperCanvasDraw$2: function(viewport, ctx) {
      this.flags = 1;
      this.viewportTransform = viewport;
    },
    static: {"^": "SuperCanvasDraw_e_shapeBit,SuperCanvasDraw_e_jointBit,SuperCanvasDraw_e_aabbBit,SuperCanvasDraw_e_pairBit,SuperCanvasDraw_e_centerOfMassBit,SuperCanvasDraw_e_dynamicTreeBit,SuperCanvasDraw_e_lineDrawingBit", SuperCanvasDraw$: function(viewport, ctx) {
        var t1 = new B.SuperCanvasDraw(ctx, null, null);
        t1.SuperCanvasDraw$2(viewport, ctx);
        return t1;
      }}
  }
}],
["", "Tooltip.dart", , A, {
  "^": "",
  Tooltip_showSimple: function(text, x, y, callback, title) {
    var body, tooltip, t1, t2, t3, _index;
    body = document.querySelector("body");
    J.insertAdjacentHtml$2$x(body, "beforeend", C.JSString_methods.$add("<div class=\"tt simple-tooltip\"><div class=\"simple-tooltip-white-layout\">" + (title !== "" ? "<div class=\"simple-tooltip-title\">" + title + "</div>" : title) + "<div class=\"simple-tooltip-text\">", text) + "</div><button class=\"got-it\">OK</button></div></div>");
    tooltip = C.NodeList_methods.get$last(W._FrozenElementList$_wrap(document.querySelectorAll(".simple-tooltip"), null)._nodeList);
    t1 = J.getInterceptor$x(tooltip);
    J.set$left$x(t1.get$style(tooltip), C.JSNumber_methods.toString$0(x) + "px");
    J.set$top$x(t1.get$style(tooltip), C.JSInt_methods.toString$0(y) + "px");
    $.get$Tooltip_opened().push($.Tooltip_index);
    t1.get$classes(tooltip).add$1(0, "t-" + C.JSInt_methods.toString$0($.Tooltip_index));
    t2 = t1.get$dataset(tooltip);
    t3 = C.JSInt_methods.toString$0($.Tooltip_index);
    t2._attributes._element.setAttribute("data-" + H.S(t2._toHyphenedName$1("index")), t3);
    t1 = t1.querySelector$1(tooltip, ".simple-tooltip .got-it");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new A.Tooltip_showSimple_closure(callback), false);
    _index = $.Tooltip_index;
    $.Tooltip_index = _index + 1;
    return _index;
  },
  Tooltip_show: function(rel, code, alignment, callback, closeDelay, maxWidth, xArrowOffset, xOffset, yArrowOffset, yOffset) {
    var body, tooltip, gameboxPos, pos, t1, x, y, arrow, t2, t3, stream, _index;
    body = document.querySelector(".game-box");
    J.insertAdjacentHtml$2$x(body, "beforeend", C.JSString_methods.$add("<div class=\"tt tooltip\"><div class=\"arrow top-arrow\" hidden></div><div class=\"arrow left-arrow\" hidden></div><div class=\"tooltip-contents\"><div class=\"tooltip-text\">", code) + "</div><button class=\"got-it\">OK</button></div><div class=\"arrow bottom-arrow\" hidden></div></div>");
    tooltip = C.NodeList_methods.get$last(W._FrozenElementList$_wrap(document.querySelectorAll(".tooltip"), null)._nodeList);
    gameboxPos = A.Tooltip_getElementOffset(body);
    pos = A.Tooltip_getElementOffset(rel);
    t1 = J.getInterceptor$x(tooltip);
    J.set$maxWidth$x(t1.get$style(tooltip), C.JSInt_methods.toString$0(maxWidth) + "px");
    x = pos.left + xOffset - gameboxPos.left;
    y = pos.top + yOffset;
    if (alignment === 1) {
      rel.toString;
      x += P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientHeight)), null).width / 2 - t1.get$client(tooltip).width / 2;
      y -= t1.get$client(tooltip).height;
      arrow = document.querySelector(".bottom-arrow");
      J.set$marginLeft$x(arrow.style, C.JSNumber_methods.toString$0(pos.left - x + P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientHeight)), null).width / 2 + xArrowOffset) + "px");
      arrow.hidden = false;
    } else if (alignment === 2) {
      rel.toString;
      x += 15 + P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientHeight)), null).width;
      y += P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientHeight)), null).height / 2 - t1.get$client(tooltip).height / 2;
      arrow = document.querySelector(".left-arrow");
      J.set$marginTop$x(arrow.style, C.JSNumber_methods.toString$0(pos.top - y + P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientHeight)), null).height / 2 + yArrowOffset) + "px");
      arrow.hidden = false;
    } else if (alignment === 3) {
      rel.toString;
      x += P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientHeight)), null).width / 2 - t1.get$client(tooltip).width / 2;
      y += 17 + P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientHeight)), null).height;
      arrow = t1.querySelector$1(tooltip, ".top-arrow");
      J.set$marginLeft$x(arrow.style, C.JSNumber_methods.toString$0(pos.left - x + P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(rel.clientHeight)), null).width / 2 - 7.5 + xArrowOffset - gameboxPos.left) + "px");
      arrow.hidden = false;
    } else if (alignment === 4) {
      x -= 15 + t1.get$client(tooltip).width;
      y += t1.get$client(tooltip).height / 2;
    }
    $.get$Tooltip_opened().push($.Tooltip_index);
    t2 = t1.get$dataset(tooltip);
    t3 = C.JSInt_methods.toString$0($.Tooltip_index);
    t2._attributes._element.setAttribute("data-" + H.S(t2._toHyphenedName$1("index")), t3);
    t1.get$classes(tooltip).add$1(0, "t-" + C.JSInt_methods.toString$0($.Tooltip_index));
    J.set$left$x(t1.get$style(tooltip), C.JSNumber_methods.toString$0(x) + "px");
    J.set$top$x(t1.get$style(tooltip), C.JSNumber_methods.toString$0(y) + "px");
    t1 = t1.querySelector$1(tooltip, ".t-" + C.JSInt_methods.toString$0($.Tooltip_index) + " .got-it");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new A.Tooltip_show_closure(callback), false);
    A.Tooltip_addChildClasses();
    t1 = J.get$onClick$x(document.querySelector("body"));
    stream = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new A.Tooltip_show_closure0(closeDelay, callback)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
    stream._tryResume$0();
    t1 = J.get$onClick$x(document.querySelector("body"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new A.Tooltip_show_closure1(stream)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    _index = $.Tooltip_index;
    $.Tooltip_index = _index + 1;
    return _index;
  },
  Tooltip_addChildClasses: function() {
    var t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".tt *"), null);
    W._MultiElementCssClassSet$(t1._elementList).add$1(0, "tt-child");
    t1.forEach$1(t1, new A.Tooltip_addChildClasses_closure());
  },
  Tooltip_closeByIndex: function(i) {
    var t1, tooltip;
    $.get$Tooltip_closeListener().call$1(i);
    J.remove$1$ax($.get$Tooltip_opened(), i);
    t1 = C.JSString_methods.$add(".t-", J.toString$0(i));
    tooltip = document.querySelector(t1);
    L.animate(tooltip, 175, C.Easing_15, null, P.LinkedHashMap_LinkedHashMap$_literal(["opacity", 0], null, null));
    P.Timer_Timer(P.Duration$(0, 0, 0, 175, 0, 0), new A.Tooltip_closeByIndex_closure(tooltip));
  },
  Tooltip_closeAll: function() {
    var t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".tt"), null);
    t1.forEach$1(t1, new A.Tooltip_closeAll_closure());
  },
  Tooltip_getParent: function(_for, _class) {
    var t1;
    for (; t1 = J.getInterceptor$x(_for), !t1.get$classes(_for).readClasses$0().contains$1(0, _class);)
      _for = t1.get$parent(_for);
    return _for;
  },
  Tooltip_getElementOffset: function(elem) {
    var docElem, box, t1, t2, t3, t4, t5;
    docElem = document.documentElement;
    box = elem.getBoundingClientRect();
    t1 = J.getInterceptor$x(box);
    t2 = t1.get$left(box);
    t3 = window.pageXOffset;
    if (typeof t2 !== "number")
      return t2.$add();
    if (typeof t3 !== "number")
      return H.iae(t3);
    docElem.toString;
    t4 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(docElem.clientLeft));
    t1 = t1.get$top(box);
    t5 = window.pageYOffset;
    if (typeof t1 !== "number")
      return t1.$add();
    if (typeof t5 !== "number")
      return H.iae(t5);
    return new A.Position(t2 + t3 - t4, t1 + t5 - C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(docElem.clientTop)));
  },
  Position: {
    "^": "Object;left,top"
  },
  closure4: {
    "^": "Closure:69;",
    call$1: function(index) {
    }
  },
  Tooltip_showSimple_closure: {
    "^": "Closure:44;callback_0",
    call$1: [function($event) {
      var t1 = J.get$dataset$x(A.Tooltip_getParent(J.get$target$x($event), "simple-tooltip"));
      A.Tooltip_closeByIndex(H.Primitives_parseInt(t1._attributes._element.getAttribute("data-" + H.S(t1._toHyphenedName$1("index"))), null, null));
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  Tooltip_show_closure: {
    "^": "Closure:44;callback_0",
    call$1: [function($event) {
      var t1 = J.get$dataset$x(A.Tooltip_getParent(J.get$target$x($event), "tooltip"));
      A.Tooltip_closeByIndex(H.Primitives_parseInt(t1._attributes._element.getAttribute("data-" + H.S(t1._toHyphenedName$1("index"))), null, null));
      t1 = this.callback_0;
      if (t1 != null)
        t1.call$0();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  Tooltip_show_closure0: {
    "^": "Closure:44;closeDelay_1,callback_2",
    call$1: [function($event) {
      if (!J.get$classes$x(H.interceptedTypeCast(J.get$currentTarget$x($event), "$isElement")).readClasses$0().contains$1(0, "tt-child"))
        P.Timer_Timer(P.Duration$(0, 0, 0, this.closeDelay_1, 0, 0), new A.Tooltip_show__closure(this.callback_2));
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  Tooltip_show__closure: {
    "^": "Closure:46;callback_3",
    call$0: function() {
      A.Tooltip_closeAll();
      var t1 = this.callback_3;
      if (t1 != null)
        t1.call$0();
    }
  },
  Tooltip_show_closure1: {
    "^": "Closure:44;stream_4",
    call$1: [function($event) {
      this.stream_4.cancel$0();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  Tooltip_addChildClasses_closure: {
    "^": "Closure:44;",
    call$1: function(el) {
      J.get$classes$x(el).add$1(0, "tt-child");
    }
  },
  Tooltip_closeByIndex_closure: {
    "^": "Closure:46;tooltip_0",
    call$0: function() {
      J.remove$0$ax(this.tooltip_0);
    }
  },
  Tooltip_closeAll_closure: {
    "^": "Closure:66;",
    call$1: function(el) {
      var t1 = J.get$dataset$x(el);
      A.Tooltip_closeByIndex(H.Primitives_parseInt(t1._attributes._element.getAttribute("data-" + H.S(t1._toHyphenedName$1("index"))), null, null));
    }
  }
}],
["", "Traverser.dart", , X, {
  "^": "",
  Traverser: {
    "^": "Object;traversed,e,to<,hasPath",
    traverseEdges$2: function(edge, makeFull) {
      var to, t1;
      if (edge == null)
        return;
      to = this.e.to;
      t1 = J.get$body$x(edge.get$contact().get$fixtureA());
      if (t1 == null ? to != null : t1 !== to) {
        t1 = J.get$body$x(edge.get$contact().get$fixtureB());
        t1 = t1 == null ? to == null : t1 === to;
      } else
        t1 = true;
      if (t1)
        this.hasPath = true;
      if (edge.get$contact().get$touching()) {
        if (J.get$body$x(edge.get$contact().get$fixtureA()).userData.get$energySupport()) {
          J.get$body$x(edge.get$contact().get$fixtureA()).userData.set$connectedToEnergy(true);
          J.get$body$x(edge.get$contact().get$fixtureA()).userData.set$bFrom(J.get$body$x(edge.get$contact().get$fixtureB()));
          if (makeFull) {
            J.get$body$x(edge.get$contact().get$fixtureA()).userData.enable$1(0, true);
            J.get$body$x(edge.get$contact().get$fixtureA()).userData.set$energy(1);
          }
        }
        if (J.get$body$x(edge.get$contact().get$fixtureB()).userData.get$energySupport()) {
          J.get$body$x(edge.get$contact().get$fixtureB()).userData.set$connectedToEnergy(true);
          J.get$body$x(edge.get$contact().get$fixtureB()).userData.set$bFrom(J.get$body$x(edge.get$contact().get$fixtureA()));
          if (makeFull) {
            J.get$body$x(edge.get$contact().get$fixtureB()).userData.enable$1(0, true);
            J.get$body$x(edge.get$contact().get$fixtureB()).userData.set$energy(1);
          }
        }
      }
      if (edge.get$next() != null)
        this.traverseEdges$1(edge.get$next());
      if (edge.get$contact().get$touching()) {
        if (J.get$body$x(edge.get$contact().get$fixtureA()).userData.get$energySupport())
          if (!C.JSArray_methods.contains$1(this.traversed, J.get$body$x(edge.get$contact().get$fixtureA()))) {
            this.traversed.push(J.get$body$x(edge.get$contact().get$fixtureA()));
            this.traverseEdges$2(J.get$body$x(edge.get$contact().get$fixtureA()).contactList, makeFull);
          }
        if (J.get$body$x(edge.get$contact().get$fixtureB()).userData.get$energySupport())
          if (!C.JSArray_methods.contains$1(this.traversed, J.get$body$x(edge.get$contact().get$fixtureB()))) {
            this.traversed.push(J.get$body$x(edge.get$contact().get$fixtureB()));
            this.traverseEdges$2(J.get$body$x(edge.get$contact().get$fixtureB()).contactList, makeFull);
          }
      }
    },
    traverseEdges$1: function(edge) {
      return this.traverseEdges$2(edge, false);
    },
    checkEnergyConnection$1: function(b) {
      var item, a;
      for (item = b.get$contactList(); item != null; item = item.get$next())
        if (item.get$contact().get$touching()) {
          a = H.interceptedTypeCast(J.get$body$x(item.get$contact().get$fixtureA()).userData, "$isSprite");
          b = H.interceptedTypeCast(J.get$body$x(item.get$contact().get$fixtureB()).userData, "$isSprite");
          if (a.energy > 0.5 || b.energy > 0.5)
            return true;
        }
      return false;
    }
  }
}],
["", "UserManager.dart", , A, {
  "^": "",
  UserManager_get: function(key) {
    var t1 = $.get$context();
    return J.$index$asx(J.$index$asx(t1, "Features"), "user").hasProperty$1(key) ? J.$index$asx(J.$index$asx(J.$index$asx(t1, "Features"), "user"), key) : 0;
  },
  UserManager_getAsString: function(key) {
    var t1 = A.UserManager_get(key);
    return typeof t1 === "number" && Math.floor(t1) === t1 ? J.toString$0(A.UserManager_get(key)) : A.UserManager_get(key);
  },
  UserManager_getAsInt: function(key) {
    var t1 = A.UserManager_get(key);
    return typeof t1 === "number" && Math.floor(t1) === t1 ? A.UserManager_get(key) : H.Primitives_parseInt(A.UserManager_get(key), null, null);
  },
  UserManager_decrement: function(key) {
    var attempts, t1;
    if (J.$eq(A.UserManager_getAsInt("boughtAttempts"), -1))
      return true;
    attempts = A.UserManager_getAsInt(key);
    t1 = J.getInterceptor$n(attempts);
    if (t1.$gt(attempts, 0)) {
      t1 = t1.$sub(attempts, 1);
      J.$indexSet$ax(J.$index$asx(J.$index$asx($.get$context(), "Features"), "user"), key, t1);
      return true;
    }
    return false;
  }
}],
["", "WebApi.dart", , B, {
  "^": "",
  WebApi_updateAttemptsAmount: function(delta) {
    J.$index$asx($.get$context(), "Api").callMethod$2("call", ["addAttempts", P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_literal(["attemptsUsed", delta], null, null)), new B.WebApi_updateAttemptsAmount_closure(), false]);
  },
  WebApi_onOrderSuccess: function(callback) {
    H.interceptedTypeCast(J.$index$asx($.get$context(), "Features"), "$isJsObject").$indexSet(0, "orderListener", P.JsFunction_JsFunction$withThis(new B.WebApi_onOrderSuccess_closure(callback)));
  },
  WebApi_getUser: function(callback) {
    H.interceptedTypeCast(J.$index$asx($.get$context(), "Features"), "$isJsObject").callMethod$2("getUser", [P.JsFunction_JsFunction$withThis(new B.WebApi_getUser_closure(callback))]);
  },
  WebApi_updateAttemptsAmount_closure: {
    "^": "Closure:46;",
    call$0: [function() {
    }, "call$0", null, 0, 0, null, "call"]
  },
  WebApi_onOrderSuccess_closure: {
    "^": "Closure:70;callback_0",
    call$1: [function(obj) {
      this.callback_0.call$0();
      H.interceptedTypeCast(J.$index$asx($.get$context(), "Features"), "$isJsObject").$indexSet(0, "orderListener", null);
    }, "call$1", null, 2, 0, null, 47, "call"]
  },
  WebApi_getUser_closure: {
    "^": "Closure:70;callback_0",
    call$1: [function(obj) {
      this.callback_0.call$0();
    }, "call$1", null, 2, 0, null, 47, "call"]
  }
}],
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code>"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    noSuchMethod$1: [function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, "call$1", "get$noSuchMethod", 2, 0, null, 71],
    "%": "ArrayBuffer|CanvasGradient|CanvasPattern|DOMImplementation|Navigator|Range|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|SVGAnimatedTransformList"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    noSuchMethod$1: [function(receiver, invocation) {
      return J.Interceptor.prototype.noSuchMethod$1.call(this, receiver, invocation);
    }, "call$1", "get$noSuchMethod", 2, 0, null, 71]
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;",
    toString$0: function(receiver) {
      return String(receiver);
    }
  },
  JSArray: {
    "^": "Interceptor;",
    checkMutable$1: function(receiver, reason) {
      if (!!receiver.immutable$list)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    checkGrowable$1: function(receiver, reason) {
      if (!!receiver.fixed$length)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    remove$1: [function(receiver, element) {
      var i;
      this.checkGrowable$1(receiver, "remove");
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    }, "call$1", "get$remove", 2, 0, 72],
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1.get$current());
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    forEach$1: function(receiver, f) {
      var $length, i;
      $length = receiver.length;
      for (i = 0; i < $length; ++i) {
        f.call$1(receiver[i]);
        if ($length !== receiver.length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = init;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(receiver, 0)]), 0));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(P.ArgumentError$(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (end == null)
        end = receiver.length;
      else {
        if (typeof end !== "number" || Math.floor(end) !== end)
          throw H.wrapException(P.ArgumentError$(end));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length, null, null));
      }
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    removeRange$2: function(receiver, start, end) {
      var receiverLength;
      this.checkGrowable$1(receiver, "removeRange");
      receiverLength = receiver.length;
      if (start < 0 || start > receiverLength)
        throw H.wrapException(P.RangeError$range(start, 0, receiverLength, null, null));
      if (end < start || end > receiverLength)
        throw H.wrapException(P.RangeError$range(end, start, receiverLength, null, null));
      H.Lists_copy(receiver, end, receiver, start, receiverLength - end);
      this.set$length(receiver, receiverLength - (end - start));
    },
    indexOf$2: function(receiver, element, start) {
      return H.Lists_indexOf(receiver, element, start, receiver.length);
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = Array;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength, null, null));
      this.checkGrowable$1(receiver, "set length");
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      this.checkMutable$1(receiver, "indexed set");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      receiver[index] = value;
    },
    $isJSArray: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    get$isInfinite: function(receiver) {
      return receiver == Infinity || receiver == -Infinity;
    },
    get$isFinite: function(receiver) {
      return isFinite(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    round$0: function(receiver) {
      return this.toInt$0(this.roundToDouble$0(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toRadixString$1: function(receiver, radix) {
      H.checkNum(radix);
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else
        return this.toInt$0(receiver / other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      return (receiver & other) >>> 0;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true,
    $is$int: true
  },
  JSDouble: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      H.checkInt(index);
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var t1;
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$lt(startIndex, 0))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (t1.$gt(startIndex, endIndex))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (J.$gt$n(endIndex, receiver.length))
        throw H.wrapException(P.RangeError$value(endIndex, null, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0: function(receiver) {
      return receiver.toUpperCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    indexOf$2: function(receiver, pattern, start) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      return receiver.indexOf(pattern, start);
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var index0, codeUnit;
        for (; index > 0; index = index0) {
          index0 = index - 1;
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }

      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: [function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : H.IsolateNatives__getJSFunctionFromName(functionName);
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  }, "call$2", "IsolateNatives__processWorkerMessage$closure", 4, 0, null, 12, 9],
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        self.console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives__getJSFunctionFromName: function(functionName) {
    return init.globalFunctions[functionName]();
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:46;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:46;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3;
      t1 = self.window == null;
      t2 = self.Worker;
      t3 = t1 && !!self.postMessage;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log) {
              self.console.log(object);
            } else {
              self.postMessage(serialize(object));
            }
          };
        }(H._Manager__serializePrintMessage);
      }
    },
    static: {_Manager__serializePrintMessage: [function(object) {
        return H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", object], null, null));
      }, "call$1", "_Manager__serializePrintMessage$closure", 2, 0, null, 11]}
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized?,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          init.globalState.topEventLoop.events.addFirst$1($event);
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(this.get$kill());
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var t1, message, t2;
      t1 = this.errorPorts;
      if (t1._collection$_length === 0) {
        if (this.errorsAreFatal === true && this === init.globalState.rootContext)
          return;
        if (self.console && self.console.error)
          self.console.error(error, stackTrace);
        else {
          P.print(error);
          if (stackTrace != null)
            P.print(stackTrace);
        }
        return;
      }
      message = Array(2);
      message.fixed$length = init;
      message[0] = J.toString$0(error);
      message[1] = stackTrace == null ? null : J.toString$0(stackTrace);
      for (t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();)
        J.send$1$x(t2._collection$_current, message);
    },
    eval$1: function(code) {
      var old, result, e, s, exception, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.handleUncaughtError$2(e, s);
        if (this.errorsAreFatal === true) {
          this.kill$0();
          if (this === init.globalState.rootContext)
            throw exception;
        }
      }
 finally {
        this._isExecutingEvent = false;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "kill":
          this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "getErrors":
          this.errorPorts.add$1(0, t1.$index(message, 1));
          break;
        case "stopErrors":
          this.errorPorts.remove$1(0, t1.$index(message, 1));
          break;
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(0, portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2.__internal$_current.__isolate_helper$_close$0();
      t1.clear$0(0);
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      this.errorPorts.clear$0(0);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1.__internal$_current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 0]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:0;responsePort_0",
    call$0: [function() {
      J.send$1$x(this.responsePort_0, null);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(0, init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if (self.window != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:0;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused()) {
        t1.get$delayedEvents().push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:46;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: [function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }, "call$0", null, 0, 0, null, "call"]
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:0;topLevel_0,args_1,message_2,isSpawnUri_3,context_4",
    call$0: [function() {
      var t1, t2, t3;
      this.context_4.set$initialized(true);
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }, "call$0", null, 0, 0, null, "call"]
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (isolate.get$controlPort() === t3) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:46;box_0,this_1,shouldSerialize_2",
    call$0: [function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }, "call$0", null, 0, 0, null, "call"]
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.$shl$n(this._workerId, 16);
      t2 = J.$shl$n(this._isolateId, 8);
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    __isolate_helper$_close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    },
    visitFunction$1: function(topLevelFunction) {
      var $name = !!topLevelFunction.$isClosure ? topLevelFunction.$name : null;
      if ($name == null)
        throw H.wrapException(P.UnsupportedError$("only top-level functions can be sent."));
      return ["function", $name];
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    },
    visitFunction$1: function(topLevelFunction) {
      var $name = !!topLevelFunction.$isClosure ? topLevelFunction.$name : null;
      if ($name == null)
        throw H.wrapException(P.UnsupportedError$("only top-level functions can be sent."));
      return H.IsolateNatives__getJSFunctionFromName($name);
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    },
    deserializeFunction$1: function(list) {
      return H.IsolateNatives__getJSFunctionFromName(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      if (!!t1.$isFunction)
        return this.visitFunction$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      J.forEach$1$ax(map, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitFunction$1: function(f) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:52;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1, t2;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      t2 = J.getInterceptor$x(map);
      return ["map", t1, this._serializeList$1(J.toList$0$ax(t2.get$keys(map))), this._serializeList$1(J.toList$0$ax(t2.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitFunction$1: function(f) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        case "function":
          return this.deserializeFunction$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    cancel$0: function() {
      if (self.setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        if (this._handle == null)
          return;
        H.leaveJsAsync();
        var t1 = this._handle;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$periodic$2: function(milliseconds, callback) {
      if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = self.setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }, TimerImpl$periodic: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(false, false, null);
        t1.TimerImpl$periodic$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:0;this_0,callback_1",
    call$0: [function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:0;this_2,callback_3",
    call$0: [function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  TimerImpl$periodic_closure: {
    "^": "Closure:46;this_0,callback_1",
    call$0: [function() {
      this.callback_1.call$1(this.this_0);
    }, "call$0", null, 0, 0, null, "call"]
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash, t1, t2;
      hash = this._id;
      t1 = J.getInterceptor$n(hash);
      t2 = t1.$shr(hash, 0);
      t1 = t1.$tdiv(hash, 4294967296);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = t2 ^ t1;
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string, null, null));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 13],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1;
    handleError = H.Primitives__throwFormatException$closure();
    H.checkString(source);
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        return H.ioore(match, 2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        return H.ioore(match, 3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, 10);
  },
  Primitives_parseDouble: function(source, handleError) {
    var result, trimmed;
    H.checkString(source);
    handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = J.trim$0$s(source);
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
        return result;
      return handleError.call$1(source);
    }
    return result;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (charCode <= 65535)
      return String.fromCharCode(charCode);
    if (charCode <= 1114111) {
      bits = charCode - 65536;
      return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
  },
  Primitives_valueFromDecomposedDate: function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
    var jsMonth, value, t1, date;
    H.checkInt(years);
    H.checkInt(month);
    H.checkInt(day);
    H.checkInt(hours);
    H.checkInt(minutes);
    H.checkInt(seconds);
    H.checkInt(milliseconds);
    jsMonth = J.$sub$n(month, 1);
    value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
    if (isNaN(value) || value < -8640000000000000 || value > 8640000000000000)
      return;
    t1 = J.getInterceptor$n(years);
    if (t1.$le(years, 0) || t1.$lt(years, 100)) {
      date = new Date(value);
      if (isUtc)
        date.setUTCFullYear(years);
      else
        date.setFullYear(years);
      return date.valueOf();
    }
    return value;
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
    var t1, $arguments, namedArgumentList;
    t1 = {};
    t1.argumentCount_0 = 0;
    $arguments = [];
    namedArgumentList = [];
    if (positionalArguments != null) {
      t1.argumentCount_0 = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    }
    t1.names_1 = "";
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + t1.argumentCount_0 + t1.names_1, 0, $arguments, namedArgumentList, null));
  },
  Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
    var t1, jsFunction, info, t2, defaultArguments, t3, i, index, $arguments, argumentCount;
    t1 = {};
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments)) {
      jsFunction = J.getInterceptor($function)["call*"];
      if (jsFunction == null)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      if (info == null || !info.areOptionalParametersNamed)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      positionalArguments = P.List_List$from(positionalArguments, true, null);
      t2 = info.requiredParameterCount;
      if (t2 !== positionalArguments.length)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
        index = i + t2;
        defaultArguments.$indexSet(0, info.parameterNameInOrder$1(index), init.metadata[info.defaultValueInOrder$1(index)]);
      }
      t1.bad_0 = false;
      namedArguments.forEach$1(0, new H.Primitives_applyFunction_closure(t1, defaultArguments));
      if (t1.bad_0)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
      return jsFunction.apply($function, positionalArguments);
    }
    $arguments = [];
    argumentCount = positionalArguments.length;
    C.JSArray_methods.addAll$1($arguments, positionalArguments);
    jsFunction = $function["call$" + argumentCount];
    if (jsFunction == null)
      return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
    return jsFunction.apply($function, $arguments);
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index, null, null));
  },
  checkNum: function(value) {
    return value;
  },
  checkInt: function(value) {
    if (typeof value !== "number" || Math.floor(value) !== value)
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkString: function(value) {
    if (typeof value !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: [function() {
    return J.toString$0(this.dartException);
  }, "call$0", "toStringWrapper$closure", 0, 0, null],
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(false, null, null, null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  }, "call$7", "invokeClosure$closure", 14, 0, null, 14, 15, 16, 17, 18, 19, 20],
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = Array;
    reflectionInfo.fixed$length = Array;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  numTypeCast: function(value) {
    if (typeof value === "number" || value == null)
      return value;
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), "num"));
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  random64: function() {
    return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
  },
  getIsolateAffinityTag: function($name) {
    return init.getIsolateTag($name);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = Array;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto = Object.getPrototypeOf(obj);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_oRe();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  },
  JSInvocationMirror: {
    "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
    get$memberName: function() {
      return this.__js_helper$_memberName;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index;
      if (this._kind === 1)
        return C.List_empty;
      t1 = this._arguments;
      argumentCount = t1.length - this._namedArgumentNames.length;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
      if (this._kind !== 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      t1 = this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount;
      if (namedArgumentCount === 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(0, new H.Symbol0(t3), t2[t4]);
      }
      return map;
    },
    static: {"^": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER"}
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    parameterName$1: function(parameter) {
      var metadataIndex = this.data[parameter + this.optionalParameterCount + 3];
      return init.metadata[metadataIndex];
    },
    defaultValue$1: function(_, parameter) {
      var t1 = this.requiredParameterCount;
      if (typeof parameter !== "number")
        return parameter.$lt();
      if (parameter < t1)
        return;
      return this.data[3 + parameter - t1];
    },
    defaultValueInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.defaultValue$1(0, parameter);
      return this.defaultValue$1(0, this.sortedIndex$1(parameter - t1));
    },
    parameterNameInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.parameterName$1(parameter);
      return this.parameterName$1(this.sortedIndex$1(parameter - t1));
    },
    sortedIndex$1: function(unsortedIndex) {
      var t1, t2, positions, t3, i, index;
      t1 = {};
      if (this.cachedSortedIndices == null) {
        t2 = this.optionalParameterCount;
        this.cachedSortedIndices = Array(t2);
        positions = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.$int);
        for (t3 = this.requiredParameterCount, i = 0; i < t2; ++i) {
          index = t3 + i;
          positions.$indexSet(0, this.parameterName$1(index), index);
        }
        t1.index_0 = 0;
        t2 = positions.get$keys(positions).toList$0(0);
        C.JSArray_methods.checkMutable$1(t2, "sort");
        H.IterableMixinWorkaround_sortList(t2, null);
        C.JSArray_methods.forEach$1(t2, new H.ReflectionInfo_sortedIndex_closure(t1, this, positions));
      }
      t1 = this.cachedSortedIndices;
      if (unsortedIndex < 0 || unsortedIndex >= t1.length)
        return H.ioore(t1, unsortedIndex);
      return t1[unsortedIndex];
    },
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = Array;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  ReflectionInfo_sortedIndex_closure: {
    "^": "Closure:13;box_0,this_1,positions_2",
    call$1: function($name) {
      var t1, t2, t3;
      t1 = this.this_1.cachedSortedIndices;
      t2 = this.box_0.index_0++;
      t3 = this.positions_2.$index(0, $name);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = t3;
    }
  },
  Primitives_functionNoSuchMethod_closure: {
    "^": "Closure:73;box_0,arguments_1,namedArgumentList_2",
    call$2: function($name, argument) {
      var t1 = this.box_0;
      t1.names_1 = t1.names_1 + "$" + H.S($name);
      this.namedArgumentList_2.push($name);
      this.arguments_1.push(argument);
      ++t1.argumentCount_0;
    }
  },
  Primitives_applyFunction_closure: {
    "^": "Closure:73;box_0,defaultArguments_1",
    call$2: function(parameter, value) {
      var t1 = this.defaultArguments_1;
      if (t1.containsKey$1(0, parameter))
        t1.$indexSet(0, parameter, value);
      else
        this.box_0.bad_0 = true;
    }
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }

        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }

        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:44;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:46;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:46;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:46;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:46;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:46;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    $isClosure: true,
    $isFunction: true,
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this.__js_helper$_target));
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = Array;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "^": "Error;message",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = Object.create(null);
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  initHooks_closure: {
    "^": "Closure:44;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:74;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:13;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  },
  JSSyntaxRegExp: {
    "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/";
    },
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    firstMatch$1: function(string) {
      var m = this._nativeRegExp.exec(H.checkString(string));
      if (m == null)
        return;
      return H._MatchImplementation$(this, m);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        H.checkString(source);
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = function() {
          try {
            return new RegExp(source, m + i + g);
          } catch (e) {
            return e;
          }

        }();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + source + ", " + errorMessage, null, null));
      }}
  },
  _MatchImplementation: {
    "^": "Object;pattern,_match",
    $index: function(_, index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    _MatchImplementation$2: function(pattern, _match) {
    },
    static: {_MatchImplementation$: function(pattern, _match) {
        var t1 = new H._MatchImplementation(pattern, _match);
        t1._MatchImplementation$2(pattern, _match);
        return t1;
      }}
  },
  _AllMatchesIterator: {
    "^": "Object;_regExp,_string,_nextIndex,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1, t2, match, t3, nextIndex;
      t1 = this._string;
      if (t1 == null)
        return false;
      t2 = this._nextIndex;
      t1 = J.get$length$asx(t1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (t2 <= t1) {
        match = this._regExp._execGlobal$2(this._string, this._nextIndex);
        if (match != null) {
          this.__js_helper$_current = match;
          t1 = match._match;
          t2 = t1.index;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t3 = J.get$length$asx(t1[0]);
          if (typeof t3 !== "number")
            return H.iae(t3);
          nextIndex = t2 + t3;
          this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
          return true;
        }
      }
      this.__js_helper$_current = null;
      this._string = null;
      return false;
    }
  }
}],
["animation", "package:animation/animation.dart", , L, {
  "^": "",
  EasingEngine_easeInOutQuad: function(time, duration, change, baseValue) {
    time /= duration / 2;
    if (time < 1)
      return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$div$n(change, 2), time), time), baseValue);
    --time;
    return J.$add$ns(J.$mul$ns(J.$div$n(J.$negate$n(change), 2), time * (time - 2) - 1), baseValue);
  },
  EasingEngine_easeInOutCubic: function(time, duration, change, baseValue) {
    time /= duration / 2;
    if (time < 1)
      return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$div$n(change, 2), time), time), time), baseValue);
    time -= 2;
    return J.$add$ns(J.$mul$ns(J.$div$n(change, 2), time * time * time + 2), baseValue);
  },
  EasingEngine_easeInOutQuartic: function(time, duration, change, baseValue) {
    time /= duration / 2;
    if (time < 1)
      return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$div$n(change, 2), time), time), time), time), baseValue);
    time -= 2;
    return J.$add$ns(J.$mul$ns(J.$div$n(J.$negate$n(change), 2), time * time * time * time - 2), baseValue);
  },
  EasingEngine_easeInOutQuintic: function(time, duration, change, baseValue) {
    time /= duration / 2;
    if (time < 1)
      return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$div$n(change, 2), time), time), time), time), time), baseValue);
    time -= 2;
    return J.$add$ns(J.$mul$ns(J.$div$n(change, 2), time * time * time * time * time + 2), baseValue);
  },
  EasingEngine_easeInOutExponential: function(time, duration, change, baseValue) {
    var t1, t2;
    time /= duration / 2;
    if (time < 1) {
      t1 = J.$div$n(change, 2);
      t2 = 10 * (time - 1);
      H.checkNum(2);
      H.checkNum(t2);
      return J.$add$ns(J.$mul$ns(t1, Math.pow(2, t2)), baseValue);
    }
    t1 = J.$div$n(change, 2);
    t2 = -10 * (time - 1);
    H.checkNum(2);
    H.checkNum(t2);
    return J.$add$ns(J.$mul$ns(t1, -Math.pow(2, t2) + 2), baseValue);
  },
  EasingEngine_easeInOutCircular: function(time, duration, change, baseValue) {
    time /= duration / 2;
    if (time < 1)
      return J.$add$ns(J.$mul$ns(J.$div$n(J.$negate$n(change), 2), Math.sqrt(H.checkNum(1 - time * time))), baseValue);
    time -= 2;
    return J.$add$ns(J.$mul$ns(J.$div$n(change, 2), Math.sqrt(H.checkNum(1 - time * time)) + 1), baseValue);
  },
  animate: function(element, duration, easing, paused, properties) {
    var animation = new L.ElementAnimation(P.LinkedHashMap_LinkedHashMap$_empty(null, null), P.LinkedHashMap_LinkedHashMap$_empty(null, null), P.LinkedHashMap_LinkedHashMap$_empty(null, null), P.LinkedHashMap_LinkedHashMap$_empty(null, null), element, false, 500, null, null, 0, false, false, C.Easing_9, P.StreamController_StreamController$broadcast(null, null, false, null), P.StreamController_StreamController$broadcast(null, null, false, null));
    animation.toProperties = properties;
    animation.easing = easing;
    animation._duration = duration;
    animation.run$0();
    return animation;
  },
  Animation: {
    "^": "Object;",
    finish$0: function(_) {
      throw H.wrapException(P.UnsupportedError$(""));
    },
    run$0: function() {
      this._paused = false;
      this._stopped = false;
    },
    _performEasing$4: function(time, duration, change, baseValue) {
      var t1;
      switch (this.easing) {
        case C.Easing_0:
          return J.$add$ns(J.$div$n(J.$mul$ns(change, time), duration), baseValue);
        case C.Easing_1:
          time /= duration;
          return J.$add$ns(J.$mul$ns(J.$mul$ns(change, time), time), baseValue);
        case C.Easing_2:
          time /= duration;
          return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$negate$n(change), time), time - 2), baseValue);
        case C.Easing_3:
          return L.EasingEngine_easeInOutQuad(time, duration, change, baseValue);
        case C.Easing_4:
          time /= duration;
          return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(change, time), time), time), baseValue);
        case C.Easing_5:
          time = time / duration - 1;
          return J.$add$ns(J.$mul$ns(change, time * time * time + 1), baseValue);
        case C.Easing_6:
          return L.EasingEngine_easeInOutCubic(time, duration, change, baseValue);
        case C.Easing_7:
          time /= duration;
          return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(change, time), time), time), time), baseValue);
        case C.Easing_8:
          time = time / duration - 1;
          return J.$add$ns(J.$mul$ns(J.$negate$n(change), time * time * time * time - 1), baseValue);
        case C.Easing_9:
          return L.EasingEngine_easeInOutQuartic(time, duration, change, baseValue);
        case C.Easing_10:
          time /= duration;
          return J.$add$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(J.$mul$ns(change, time), time), time), time), time), baseValue);
        case C.Easing_11:
          time = time / duration - 1;
          return J.$add$ns(J.$mul$ns(change, time * time * time * time * time + 1), baseValue);
        case C.Easing_12:
          return L.EasingEngine_easeInOutQuintic(time, duration, change, baseValue);
        case C.Easing_13:
          return J.$add$ns(J.$add$ns(J.$mul$ns(J.$negate$n(change), Math.cos(H.checkNum(time / duration * 1.5707963267948966))), change), baseValue);
        case C.Easing_14:
          return J.$add$ns(J.$mul$ns(change, Math.sin(H.checkNum(time / duration * 1.5707963267948966))), baseValue);
        case C.Easing_15:
          return J.$add$ns(J.$mul$ns(J.$div$n(J.$negate$n(change), 2), Math.cos(H.checkNum(time / duration * 3.141592653589793)) - 1), baseValue);
        case C.Easing_16:
          t1 = 10 * (time / duration - 1);
          H.checkNum(2);
          H.checkNum(t1);
          return J.$add$ns(J.$mul$ns(change, Math.pow(2, t1)), baseValue);
        case C.Easing_17:
          t1 = -10 * time / duration;
          H.checkNum(2);
          H.checkNum(t1);
          return J.$add$ns(J.$mul$ns(change, -Math.pow(2, t1) + 1), baseValue);
        case C.Easing_18:
          return L.EasingEngine_easeInOutExponential(time, duration, change, baseValue);
        case C.Easing_19:
          time /= duration;
          return J.$add$ns(J.$mul$ns(J.$negate$n(change), Math.sqrt(H.checkNum(1 - time * time)) - 1), baseValue);
        case C.Easing_20:
          time = time / duration - 1;
          return J.$add$ns(J.$mul$ns(change, Math.sqrt(H.checkNum(1 - time * time))), baseValue);
        case C.Easing_21:
          return L.EasingEngine_easeInOutCircular(time, duration, change, baseValue);
      }
      throw H.wrapException(P.Exception_Exception("Could not perform easing. Did you choose a proper easing type?"));
    }
  },
  Easing: {
    "^": "Object;value",
    static: {"^": "Easing_LINEAR,Easing_QUADRATIC_EASY_IN,Easing_QUADRATIC_EASY_OUT,Easing_QUADRATIC_EASY_IN_OUT,Easing_CUBIC_EASY_IN,Easing_CUBIC_EASY_OUT,Easing_CUBIC_EASY_IN_OUT,Easing_QUARTIC_EASY_IN,Easing_QUARTIC_EASY_OUT,Easing_QUARTIC_EASY_IN_OUT,Easing_QUINTIC_EASY_IN,Easing_QUINTIC_EASY_OUT,Easing_QUINTIC_EASY_IN_OUT,Easing_SINUSOIDAL_EASY_IN,Easing_SINUSOIDAL_EASY_OUT,Easing_SINUSOIDAL_EASY_IN_OUT,Easing_EXPONENTIAL_EASY_IN,Easing_EXPONENTIAL_EASY_OUT,Easing_EXPONENTIAL_EASY_IN_OUT,Easing_CIRCULAR_EASY_IN,Easing_CIRCULAR_EASY_OUT,Easing_CIRCULAR_EASY_IN_OUT"}
  },
  ElementAnimation: {
    "^": "Animation;toProperties,fromProperties,currentProperties,units,element,_isInitialized,_duration,_startTime,_pausedAt,_pausedFor,_paused,_stopped,easing,_onStepController,_onCompleteController",
    _initializeFromProperties$0: function() {
      var t1, style, t2;
      if (this._isInitialized)
        throw H.wrapException("Unexpected scenario: element properties should not be initialized more than once.");
      t1 = this.element;
      t1.toString;
      style = window.getComputedStyle(t1, "");
      t1 = this.toProperties;
      t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t2.addAll$1(0, t1);
      t2.forEach$1(0, new L.ElementAnimation__initializeFromProperties_closure(this, style));
      this._isInitialized = true;
    },
    run$0: function() {
      var t1, t2, t3;
      if (!this._isInitialized)
        this._initializeFromProperties$0();
      if (this._paused) {
        this._paused = false;
        t1 = this._pausedFor;
        t2 = Date.now();
        t3 = this._pausedAt;
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._pausedFor = t1 + (t2 - t3);
      }
      if (this._startTime == null)
        this._startTime = Date.now();
      t1 = window;
      t2 = this.get$_advance();
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
      L.Animation.prototype.run$0.call(this);
    },
    _advance$1: [function(highResTime) {
      var t1, t2, currentTime, t3, timeLeft, percentage;
      t1 = {};
      if (this._paused || this._stopped)
        return;
      t2 = Date.now();
      t1.currentTime_0 = t2;
      currentTime = t2 - this._pausedFor;
      t1.currentTime_0 = currentTime;
      t2 = this._duration;
      t3 = this._startTime;
      if (typeof t3 !== "number")
        return H.iae(t3);
      timeLeft = t2 - (currentTime - t3);
      t3 = this._onStepController;
      if (t3._async$_next !== t3) {
        percentage = 100 - 100 / (t2 / timeLeft);
        if (percentage > 100)
          percentage = 100;
        else if (percentage < 0)
          percentage = 0;
        t2 = P.LinkedHashMap_LinkedHashMap$_literal(["animation", this, "percentage", percentage], null, null);
        if (t3._state >= 4)
          H.throwExpression(t3._addEventError$0());
        t3._sendData$1(t2);
      }
      this.toProperties.forEach$1(0, new L.ElementAnimation__advance_closure(t1, this, timeLeft));
      if (timeLeft > 0) {
        t1 = window;
        t2 = this.get$_advance();
        C.Window_methods._ensureRequestAnimationFrame$0(t1);
        C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
      } else {
        t1 = this._onCompleteController;
        if (t1._state >= 4)
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(null);
      }
    }, "call$1", "get$_advance", 2, 0, 75, 76],
    _doesPropertyNeedUnit$1: function(propertyName) {
      var el = document.createElement("div", null);
      J.setProperty$2$x(el.style, propertyName, "0px");
      return J.getPropertyValue$1$x(el.style, propertyName) === "0px";
    },
    _getActualValueForAuto$1: function(propertyName) {
      var value = new L.ElementAnimation__getActualValueForAuto_convert(this, propertyName).call$0();
      if (value != null)
        return J.toString$0(value);
      return "auto";
    },
    _propertyNeedsPreciseAnimation$1: function(propertyName) {
      switch (propertyName) {
        case "opacity":
          return true;
      }
      return false;
    },
    static: {"^": "ElementAnimation_valueUnitRegex"}
  },
  ElementAnimation__initializeFromProperties_closure: {
    "^": "Closure:52;this_0,style_1",
    call$2: function(key, value) {
      var t1, cssValue, match, t2, t3, value0, unit, t4, t5;
      t1 = this.this_0;
      cssValue = J.getPropertyValue$1$x(t1.element.style, key);
      if (cssValue === "")
        cssValue = J.getPropertyValue$1$x(this.style_1, key);
      if (cssValue === "auto" || cssValue === "")
        cssValue = t1._getActualValueForAuto$1(key);
      if (cssValue === "auto")
        throw H.wrapException("Cannot animate property \"" + H.S(key) + "\", because it had initial value of \"auto\", which is not supported for this type of property. Please specify an initial value before you start animating it.");
      if (cssValue === "")
        throw H.wrapException("Cannot animate property \"" + H.S(key) + "\", because the initial value was an empty string \"\". Please specify an initial value.");
      if (t1._doesPropertyNeedUnit$1(key)) {
        match = new H.JSSyntaxRegExp("^(-?[0-9\\.]+)([a-zA-Z%]+)$", H.JSSyntaxRegExp_makeNative("^(-?[0-9\\.]+)([a-zA-Z%]+)$", false, true, false), null, null).firstMatch$1(cssValue);
        if (match != null) {
          t2 = match._match;
          t3 = t2.length;
          if (1 >= t3)
            return H.ioore(t2, 1);
          value0 = t2[1];
          if (2 >= t3)
            return H.ioore(t2, 2);
          unit = t2[2];
          t1.fromProperties.$indexSet(0, key, H.Primitives_parseDouble(value0, null));
          t1.currentProperties.$indexSet(0, key, H.Primitives_parseDouble(value0, null));
          t2 = t1.units;
          t2.$indexSet(0, key, unit);
        } else {
          match = $.get$ElementAnimation_valueUnitRegex().firstMatch$1(cssValue);
          t2 = t1.fromProperties;
          t3 = t1.currentProperties;
          t4 = t1.units;
          if (match != null) {
            t5 = match._match;
            if (1 >= t5.length)
              return H.ioore(t5, 1);
            value0 = t5[1];
            t2.$indexSet(0, key, H.Primitives_parseDouble(value0, null));
            t3.$indexSet(0, key, H.Primitives_parseDouble(value0, null));
            t4.$indexSet(0, key, t1._doesPropertyNeedUnit$1(key) ? "px" : "");
          } else {
            t2.$indexSet(0, key, H.Primitives_parseDouble(cssValue, null));
            t3.$indexSet(0, key, H.Primitives_parseDouble(cssValue, null));
            t4.$indexSet(0, key, "px");
          }
          t2 = t4;
        }
      } else {
        t1.fromProperties.$indexSet(0, key, H.Primitives_parseDouble(cssValue, null));
        t1.currentProperties.$indexSet(0, key, H.Primitives_parseDouble(cssValue, null));
        t2 = t1.units;
        t2.$indexSet(0, key, "");
      }
      if (typeof value === "string") {
        match = $.get$ElementAnimation_valueUnitRegex().firstMatch$1(value);
        if (match != null) {
          t3 = match._match;
          t4 = t3.length;
          if (1 >= t4)
            return H.ioore(t3, 1);
          value = t3[1];
          if (2 >= t4)
            return H.ioore(t3, 2);
          unit = t3[2];
          t1.toProperties.$indexSet(0, key, H.Primitives_parseDouble(value, null));
          t2.$indexSet(0, key, unit);
        }
      }
    }
  },
  ElementAnimation__advance_closure: {
    "^": "Closure:73;box_0,this_1,timeLeft_2",
    call$2: function(key, value) {
      var t1, baseValue, t2, change, t3, t4, intermediateValue, result;
      if (this.timeLeft_2 > 0) {
        t1 = this.this_1;
        baseValue = t1.fromProperties.$index(0, key);
        t2 = J.getInterceptor$n(value);
        change = t2.$sub(value, baseValue);
        t3 = this.box_0.currentTime_0;
        t4 = t1._startTime;
        if (typeof t4 !== "number")
          return H.iae(t4);
        intermediateValue = L.Animation.prototype._performEasing$4.call(t1, t3 - t4, t1._duration, change, baseValue);
        if (J.$gt$n(baseValue, value)) {
          if (t2.$gt(value, 0) && J.$lt$n(intermediateValue, value))
            intermediateValue = value;
          if (t2.$lt(value, 0) && J.$lt$n(intermediateValue, value))
            intermediateValue = value;
        } else {
          if (t2.$gt(value, 0) && J.$gt$n(intermediateValue, value))
            intermediateValue = value;
          if (t2.$lt(value, 0) && J.$gt$n(intermediateValue, value))
            intermediateValue = value;
        }
      } else
        intermediateValue = value;
      t1 = this.this_1;
      t1.currentProperties.$indexSet(0, key, intermediateValue);
      result = t1._propertyNeedsPreciseAnimation$1(key) ? intermediateValue : J.round$0$n(intermediateValue);
      if (C.JSArray_methods.contains$1(C.List_scrollTop_scrollLeft, key))
        switch (key) {
          case "scrollTop":
            t1 = t1.element;
            t1.toString;
            t1.scrollTop = J.round$0$n(result);
            break;
          case "scrollLeft":
            t1 = t1.element;
            t1.toString;
            t1.scrollLeft = J.round$0$n(result);
            break;
        }
      else
        J.setProperty$2$x(t1.element.style, key, H.S(result) + H.S(t1.units.$index(0, key)));
    }
  },
  ElementAnimation__getActualValueForAuto_convert: {
    "^": "Closure:46;this_0,propertyName_1",
    call$0: function() {
      switch (this.propertyName_1) {
        case "width":
          var t1 = this.this_0.element;
          t1.toString;
          return C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1.clientWidth));
        case "height":
          t1 = this.this_0.element;
          t1.toString;
          return C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1.clientHeight));
        case "top":
        case "right":
        case "bottom":
        case "left":
          return 0;
        case "scrollTop":
          t1 = this.this_0.element;
          t1.toString;
          return C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1.scrollTop));
        case "scrollLeft":
          t1 = this.this_0.element;
          t1.toString;
          return C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(t1.scrollLeft));
        case "opacity":
          return 1;
      }
    }
  }
}],
["box2d", "package:box2d/box2d.dart", , V, {
  "^": "",
  MathBox_distanceSquared: function(v1, v2) {
    var t1, t2, dx, dy;
    t1 = v1.storage;
    t2 = v2.storage;
    dx = t1[0] - t2[0];
    dy = t1[1] - t2[1];
    return dx * dx + dy * dy;
  },
  Vector2_crossVectorAndNumToOut: function(a, s, out) {
    var t1, t2, t3;
    t1 = a.storage;
    t2 = t1[0];
    t3 = J.getInterceptor$x(out);
    t3.set$x(out, s * t1[1]);
    t3.set$y(out, -s * t2);
  },
  ContactFilter: {
    "^": "Object;",
    shouldCollide$2: function(fixtureA, fixtureB) {
      var filterA, filterB, t1;
      filterA = J.get$filter$x(fixtureA);
      filterB = J.get$filter$x(fixtureB);
      t1 = filterA.groupIndex;
      if (t1 !== 0 && t1 === filterB.groupIndex)
        return t1 > 0;
      return (filterA.maskBits & filterB.categoryBits) !== 0 && (filterA.categoryBits & filterB.maskBits) !== 0;
    }
  },
  ContactImpulse: {
    "^": "Object;normalImpulses,tangentImpulses"
  },
  ContactListener: {
    "^": "Object;"
  },
  AxisAlignedBox: {
    "^": "Object;lowerBound>,upperBound>",
    setFromCombination$2: function(boxOne, boxTwo) {
      var t1, t2;
      t1 = this.lowerBound;
      t2 = P.min(boxOne.lowerBound.storage[0], boxTwo.lowerBound.storage[0]);
      t1.storage[0] = t2;
      t2 = this.lowerBound;
      t1 = P.min(boxOne.lowerBound.storage[1], boxTwo.lowerBound.storage[1]);
      t2.storage[1] = t1;
      t1 = this.upperBound;
      t2 = P.max(boxOne.upperBound.storage[0], boxTwo.upperBound.storage[0]);
      t1.storage[0] = t2;
      t2 = this.upperBound;
      t1 = P.max(boxOne.upperBound.storage[1], boxTwo.upperBound.storage[1]);
      t2.storage[1] = t1;
    },
    get$center: function() {
      var t1, c;
      t1 = this.lowerBound;
      c = new T.Vector2(new Float32Array(H._checkLength(2)));
      c.setFrom$1(t1);
      c.add$1(0, this.upperBound);
      c.scale$1(0, 0.5);
      return c;
    },
    contains$1: function(_, aabb) {
      var t1 = J.getInterceptor$x(aabb);
      return this.lowerBound.storage[0] > t1.get$lowerBound(aabb).storage[0] && this.lowerBound.storage[1] > t1.get$lowerBound(aabb).storage[1] && this.upperBound.storage[1] < t1.get$upperBound(aabb).storage[1] && this.upperBound.storage[0] < t1.get$upperBound(aabb).storage[0];
    },
    setFrom$1: function(other) {
      var t1 = J.getInterceptor$x(other);
      this.lowerBound.setFrom$1(t1.get$lowerBound(other));
      this.upperBound.setFrom$1(t1.get$upperBound(other));
    },
    toString$0: function(_) {
      return J.toString$0(this.lowerBound) + ", " + J.toString$0(this.upperBound);
    },
    AxisAlignedBox$2: function(lowerBound, upperBound) {
      if (this.lowerBound == null)
        this.lowerBound = new T.Vector2(new Float32Array(H._checkLength(2)));
      if (this.upperBound == null)
        this.upperBound = new T.Vector2(new Float32Array(H._checkLength(2)));
    },
    static: {AxisAlignedBox$: function(lowerBound, upperBound) {
        var t1 = new V.AxisAlignedBox(lowerBound, upperBound);
        t1.AxisAlignedBox$2(lowerBound, upperBound);
        return t1;
      }, AxisAlignedBox_testOverlap: function(a, b) {
        var t1, t2, t3;
        t1 = b.lowerBound.storage;
        t2 = t1[0];
        t3 = a.upperBound.storage;
        if (!(t2 > t3[0] || t1[1] > t3[1])) {
          t1 = a.lowerBound.storage;
          t2 = t1[0];
          t3 = b.upperBound.storage;
          t1 = t2 > t3[0] || t1[1] > t3[1];
        } else
          t1 = true;
        return !t1;
      }}
  },
  BroadPhase: {
    "^": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
    createProxy$2: function(box, userData) {
      var node = this._tree.createProxy$2(box, userData);
      ++this.proxyCount;
      this.moveBuffer.push(node);
      return node;
    },
    destroyProxy$1: function(proxy) {
      this._unbufferMove$1(proxy);
      --this.proxyCount;
      this._tree.destroyProxy$1(proxy);
    },
    updatePairs$1: function(callback) {
      var t1, i, t2, t3, t4, pairBuffer, primaryPair, pair;
      this._pairCount = 0;
      for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
        t2 = t2[i];
        this.queryProxy = t2;
        if (t2 == null)
          continue;
        t1._query$4(this, t2.get$box(), t1._root, 1);
      }
      this.moveBuffer = H.setRuntimeTypeInfo([], [V.DynamicTreeNode]);
      t2 = this._pairBuffer;
      t3 = this._pairCount;
      t2.toString;
      t4 = H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(t2, 0)]);
      H.IterableMixinWorkaround__rangeCheck(t2, 0, t3);
      pairBuffer = P.List_List$from(H.SubListIterable$(t2, 0, t3, H.getTypeArgumentByIndex(t4, 0)), true, null);
      C.JSArray_methods.checkMutable$1(pairBuffer, "sort");
      H.IterableMixinWorkaround_sortList(pairBuffer, new V.BroadPhase_updatePairs_closure());
      t4 = this._pairBuffer;
      t3 = this._pairCount;
      J.checkMutable$1$a(t4, "set range");
      H.IterableMixinWorkaround_setRangeList(t4, 0, t3, pairBuffer, 0);
      for (i = 0; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i < 0 || i >= t2.length)
          return H.ioore(t2, i);
        primaryPair = t2[i];
        callback.call$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
        ++i;
        for (; i < this._pairCount;) {
          t2 = this._pairBuffer;
          if (i >= t2.length)
            return H.ioore(t2, i);
          pair = t2[i];
          if (!J.$eq(pair.get$proxyA(), primaryPair.get$proxyA()) || !J.$eq(pair.get$proxyB(), primaryPair.get$proxyB()))
            break;
          ++i;
        }
      }
      t1.rebalance$1(4);
    },
    treeCallback$1: function(proxy) {
      var t1, t2, t3, oldBuffer, i, i0;
      t1 = J.getInterceptor(proxy);
      if (t1.$eq(proxy, this.queryProxy))
        return true;
      t2 = this._pairCount;
      t3 = this._pairCapacity;
      if (t2 === t3) {
        oldBuffer = this._pairBuffer;
        if (typeof t3 !== "number")
          return t3.$mul();
        t2 = t3 * 2;
        this._pairCapacity = t2;
        t2 = Array(t2);
        t2.fixed$length = init;
        t2 = H.setRuntimeTypeInfo(t2, [V.Pair]);
        this._pairBuffer = t2;
        for (i = oldBuffer.length, i0 = 0; i0 < i; ++i0) {
          t3 = oldBuffer[i0];
          if (i0 >= t2.length)
            return H.ioore(t2, i0);
          t2[i0] = t3;
        }
        t3 = this._pairCapacity;
        if (typeof t3 !== "number")
          return H.iae(t3);
        for (; i < t3; ++i) {
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2[i] = new V.Pair(null, null);
        }
      }
      t1 = J.$lt$n(t1.get$key(proxy), J.get$key$x(this.queryProxy));
      t2 = this._pairBuffer;
      t3 = this._pairCount;
      if (t1) {
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3].set$proxyA(proxy);
        t1 = this._pairBuffer;
        t2 = this._pairCount;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2].set$proxyB(this.queryProxy);
      } else {
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        t2[t3].set$proxyA(this.queryProxy);
        t1 = this._pairBuffer;
        t2 = this._pairCount;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2].set$proxyB(proxy);
      }
      ++this._pairCount;
      return true;
    },
    _unbufferMove$1: function(proxy) {
      var t1, index;
      t1 = this.moveBuffer;
      index = H.Lists_indexOf(t1, proxy, 0, t1.length);
      if (index !== -1)
        C.JSArray_methods.removeRange$2(this.moveBuffer, index, 1);
    },
    BroadPhase$0: function() {
      var t1, t2, i;
      this.moveBuffer = H.setRuntimeTypeInfo([], [V.DynamicTreeNode]);
      t1 = this._pairCapacity;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = Array(t1);
      t1.fixed$length = init;
      t1 = H.setRuntimeTypeInfo(t1, [V.Pair]);
      this._pairBuffer = t1;
      t2 = this._pairCapacity;
      if (typeof t2 !== "number")
        return H.iae(t2);
      i = 0;
      for (; i < t2; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = new V.Pair(null, null);
      }
    },
    static: {"^": "BroadPhase_NULL_PROXY,BroadPhase_PAIR_CAPACITY", BroadPhase$: function() {
        var t1 = new V.BroadPhase(V.DynamicTree$(), 0, null, null, 16, 0, null);
        t1.BroadPhase$0();
        return t1;
      }}
  },
  BroadPhase_updatePairs_closure: {
    "^": "Closure:52;",
    call$2: function(a, b) {
      return J.compareTo$1$ns(a, b);
    }
  },
  DynamicTree: {
    "^": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center<,deltaOne,deltaTwo",
    createProxy$2: function(box, userData) {
      var proxy, t1, t2, iterationCount, height, tryCount;
      proxy = this._allocateNode$0();
      t1 = proxy.get$box().lowerBound;
      t2 = box.get$lowerBound(box).storage[0];
      t1.storage[0] = t2 - 0.1;
      t2 = proxy.get$box().lowerBound;
      t1 = box.get$lowerBound(box).storage[1];
      t2.storage[1] = t1 - 0.1;
      t1 = proxy.get$box().upperBound;
      t2 = box.get$upperBound(box).storage[0];
      t1.storage[0] = t2 + 0.1;
      t2 = proxy.get$box().upperBound;
      t1 = box.get$upperBound(box).storage[1];
      t2.storage[1] = t1 + 0.1;
      proxy.set$userData(userData);
      this._insertLeaf$1(proxy);
      iterationCount = C.JSInt_methods._shrOtherPositive$1(this._nodeCount, 4);
      height = this._computeHeight$1(this._root);
      tryCount = 0;
      while (true) {
        if (!(height > 64 && tryCount < 10))
          break;
        this.rebalance$1(iterationCount);
        height = this._computeHeight$1(this._root);
        ++tryCount;
      }
      return proxy;
    },
    destroyProxy$1: function(toDestroy) {
      this._removeLeaf$1(toDestroy);
      this._freeNode$1(toDestroy);
    },
    moveProxy$3: function(argProxy, argBox, displacement) {
      var t1, t2, t3;
      if (argProxy.get$box().contains$1(0, argBox))
        return false;
      this._removeLeaf$1(argProxy);
      t1 = argBox.lowerBound.storage;
      t1[0] = t1[0] - 0.1;
      t1[1] = t1[1] - 0.1;
      t1 = argBox.upperBound.storage;
      t1[0] = t1[0] + 0.1;
      t1[1] = t1[1] + 0.1;
      t1 = this._tempVector;
      t1.setFrom$1(displacement);
      t1.scale$1(0, 2);
      t1 = t1.storage;
      t2 = t1[0];
      if (t2 < 0) {
        t3 = argBox.lowerBound.storage;
        t3[0] = t3[0] + t2;
      } else {
        t3 = argBox.upperBound.storage;
        t3[0] = t3[0] + t2;
      }
      t1 = t1[1];
      if (t1 < 0) {
        t2 = argBox.lowerBound.storage;
        t2[1] = t2[1] + t1;
      } else {
        t2 = argBox.upperBound.storage;
        t2[1] = t2[1] + t1;
      }
      t1 = argProxy.get$box();
      t1.lowerBound.setFrom$1(argBox.lowerBound);
      t1.upperBound.setFrom$1(argBox.upperBound);
      this._insertLeaf$1(argProxy);
      return true;
    },
    _allocateNode$0: function() {
      var t1, i, t2, node;
      t1 = this._nodeStack;
      if (t1._head === t1._tail)
        for (i = 0; i < 6; ++i) {
          t2 = new V.AxisAlignedBox(null, null);
          t2.lowerBound = new T.Vector2(new Float32Array(2));
          t2.upperBound = new T.Vector2(new Float32Array(2));
          t1.addFirst$1(new V.DynamicTreeNode(t2, null, null, null, null, null, null));
        }
      node = t1.removeFirst$0();
      t1 = J.getInterceptor$x(node);
      t1.set$parent(node, null);
      node.set$childOne(null);
      node.set$childTwo(null);
      node.set$userData(null);
      t1.set$key(node, this._nodeCounter);
      ++this._nodeCounter;
      ++this._nodeCount;
      return node;
    },
    _query$4: function(callback, argBox, node, count) {
      if (node == null)
        return true;
      if (V.AxisAlignedBox_testOverlap(argBox, node.get$box()))
        if (node.get$isLeaf()) {
          if (!callback.treeCallback$1(node))
            return false;
        } else {
          if (count < 64) {
            ++count;
            if (!this._query$4(callback, argBox, node.get$childOne(), count))
              return false;
          }
          if (count < 64)
            if (!this._query$4(callback, argBox, node.get$childTwo(), count + 1))
              return false;
        }
      return true;
    },
    _insertLeaf$1: function(node) {
      var t1, t2, t3, t4, sibling, t5, childOne, childTwo, t6, t7, t8, node1, node2, node10;
      ++this._insertionCount;
      if (this._root == null) {
        this._root = node;
        J.set$parent$x(node, null);
        return;
      }
      t1 = this.center;
      t2 = node.get$box();
      t3 = t2.lowerBound;
      t4 = new Float32Array(2);
      t3 = t3.storage;
      t4[1] = t3[1];
      t4[0] = t3[0];
      new T.Vector2(t4).add$1(0, t2.upperBound);
      t4[1] = t4[1] * 0.5;
      t4[0] = t4[0] * 0.5;
      t2 = t1.storage;
      t2[1] = t4[1];
      t2[0] = t4[0];
      sibling = this._root;
      if (!sibling.get$isLeaf()) {
        t2 = this.deltaOne;
        t3 = this.deltaTwo;
        t4 = t2.storage;
        t5 = t3.storage;
        do {
          childOne = sibling.get$childOne();
          childTwo = sibling.get$childTwo();
          t6 = childOne.get$box();
          t7 = t6.lowerBound;
          t8 = new Float32Array(2);
          t7 = t7.storage;
          t8[1] = t7[1];
          t8[0] = t7[0];
          new T.Vector2(t8).add$1(0, t6.upperBound);
          t8[1] = t8[1] * 0.5;
          t8[0] = t8[0] * 0.5;
          t4[1] = t8[1];
          t4[0] = t8[0];
          t8 = childTwo.get$box();
          t6 = t8.lowerBound;
          t7 = new Float32Array(2);
          t6 = t6.storage;
          t7[1] = t6[1];
          t7[0] = t6[0];
          new T.Vector2(t7).add$1(0, t8.upperBound);
          t7[1] = t7[1] * 0.5;
          t7[0] = t7[0] * 0.5;
          t5[1] = t7[1];
          t5[0] = t7[0];
          t7 = t2.sub$1(t1).storage;
          t7[1] = Math.abs(t7[1]);
          t7[0] = Math.abs(t7[0]);
          t7 = t3.sub$1(t1).storage;
          t7[1] = Math.abs(t7[1]);
          t7[0] = Math.abs(t7[0]);
          sibling = t4[0] + t4[1] < t5[0] + t5[1] ? childOne : childTwo;
        } while (!sibling.get$isLeaf());
      }
      t1 = J.getInterceptor$x(sibling);
      node1 = t1.get$parent(sibling);
      node2 = this._allocateNode$0();
      J.set$parent$x(node2, node1);
      node2.set$userData(null);
      node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
      if (node1 != null) {
        if (J.$eq(t1.get$parent(sibling).get$childOne(), sibling))
          node1.set$childOne(node2);
        else
          node1.set$childTwo(node2);
        node2.set$childOne(sibling);
        node2.set$childTwo(node);
        t1.set$parent(sibling, node2);
        J.set$parent$x(node, node2);
        do {
          if (node1.get$box().contains$1(0, node2.get$box()))
            break;
          node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
          node10 = J.get$parent$x(node1);
          if (node10 != null) {
            node2 = node1;
            node1 = node10;
            continue;
          } else
            break;
        } while (true);
      } else {
        node2.set$childOne(sibling);
        node2.set$childTwo(node);
        t1.set$parent(sibling, node2);
        J.set$parent$x(node, node2);
        this._root = node2;
      }
    },
    _removeLeaf$1: function(argNode) {
      var t1, node2, node1, sibling, t2, t3, t4;
      t1 = J.getInterceptor(argNode);
      if (t1.$eq(argNode, this._root)) {
        this._root = null;
        if (J.$eq(this._lastLeaf, argNode))
          this._lastLeaf = null;
        return;
      }
      node2 = t1.get$parent(argNode);
      node1 = J.get$parent$x(node2);
      sibling = J.$eq(node2.get$childOne(), argNode) ? node2.get$childTwo() : node2.get$childOne();
      if (node1 != null) {
        if (J.$eq(node1.get$childOne(), node2))
          node1.set$childOne(sibling);
        else
          node1.set$childTwo(sibling);
        J.set$parent$x(sibling, node1);
        this._nodeStack.addFirst$1(node2);
        --this._nodeCount;
        for (t1 = this._tempBox; node1 != null;) {
          t2 = node1.get$box();
          t3 = t1.lowerBound;
          t4 = t2.lowerBound;
          t3 = t3.storage;
          t4 = t4.storage;
          t3[1] = t4[1];
          t3[0] = t4[0];
          t4 = t1.upperBound;
          t2 = t2.upperBound;
          t4 = t4.storage;
          t2 = t2.storage;
          t4[1] = t2[1];
          t4[0] = t2[0];
          node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
          if (t1.contains$1(0, node1.get$box()))
            break;
          node1 = J.get$parent$x(node1);
        }
      } else {
        this._root = sibling;
        J.set$parent$x(sibling, null);
        this._nodeStack.addFirst$1(node2);
        --this._nodeCount;
      }
      if (J.$eq(this._lastLeaf, argNode))
        this._lastLeaf = this._root;
    },
    _computeHeight$1: function(node) {
      if (node == null)
        return 0;
      return 1 + P.max(this._computeHeight$1(node.get$childOne()), this._computeHeight$1(node.get$childTwo()));
    },
    rebalance$1: function(iterations) {
      var i, current, bit;
      if (this._root == null)
        return;
      for (i = 0; i < iterations; ++i) {
        current = this._root;
        for (bit = 0; !current.get$isLeaf();) {
          current = (C.JSInt_methods._shrBothPositive$1(this._path, bit) & 1) === 0 ? current.get$childOne() : current.get$childTwo();
          bit = bit + 1 & 31;
        }
        ++this._path;
        this._removeLeaf$1(current);
        this._insertLeaf$1(current);
      }
    },
    _freeNode$1: function(node) {
      this._nodeStack.addFirst$1(node);
      --this._nodeCount;
    },
    DynamicTree$0: function() {
      var t1, i;
      for (t1 = this._drawVectors, i = 0; i < 4; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {"^": "DynamicTree_MAX_STACK_SIZE,DynamicTree__DEFAULT_NODE_ADDITION", DynamicTree$: function() {
        var t1, t2, t3;
        t1 = H.setRuntimeTypeInfo(Array(4), [T.Vector2]);
        t2 = new Float32Array(H._checkLength(2));
        t3 = V.AxisAlignedBox$(null, null);
        t3 = new V.DynamicTree(null, 0, null, 0, 0, P.ListQueue$(null, V.DynamicTreeNode), t1, 0, new T.Vector2(t2), t3, new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))));
        t3.DynamicTree$0();
        return t3;
      }}
  },
  DynamicTreeNode: {
    "^": "Object;box<,parent*,next@,childOne@,childTwo@,userData@,key*",
    get$isLeaf: function() {
      return this.childOne == null;
    },
    toString$0: function(_) {
      var t1 = this.box;
      return J.toString$0(t1.lowerBound) + ", " + J.toString$0(t1.upperBound);
    }
  },
  Pair: {
    "^": "Object;proxyA@,proxyB@",
    compareTo$1: function(_, pair2) {
      var t1, t2;
      if (J.$lt$n(J.get$key$x(this.proxyA), J.get$key$x(pair2.get$proxyA())))
        return -1;
      t1 = J.get$key$x(this.proxyA);
      t2 = J.get$key$x(pair2.get$proxyA());
      if (t1 == null ? t2 == null : t1 === t2) {
        if (J.$lt$n(J.get$key$x(this.proxyB), J.get$key$x(pair2.get$proxyB())))
          t1 = -1;
        else {
          t1 = J.get$key$x(this.proxyB);
          t2 = J.get$key$x(pair2.get$proxyB());
          t1 = (t1 == null ? t2 == null : t1 === t2) ? 0 : 1;
        }
        return t1;
      }
      return 1;
    }
  },
  Collision: {
    "^": "Object;_pool,cache,input,output,results1,results2,incidentEdge<,localTangent,localNormal<,planePoint,tangent,normal<,normal1,v11,v12,clipPoints1,clipPoints2",
    collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
      var v, t1, t2, t3, t4, t5, t6, v1, t7, t8, t9, t10, t11, dx, dy, radius;
      manifold.pointCount = 0;
      v = circle1.get$position(circle1);
      t1 = xfA.position.storage;
      t2 = t1[1];
      t3 = xfA.rotation.storage;
      t4 = C.JSNumber_methods.$mul(t3[1], v.get$x(v));
      t5 = C.JSNumber_methods.$mul(t3[3], v.get$y(v));
      t1 = t1[0];
      t6 = C.JSNumber_methods.$mul(t3[0], v.get$x(v));
      t3 = C.JSNumber_methods.$mul(t3[2], v.get$y(v));
      v1 = circle2.get$position(circle2);
      t7 = xfB.position.storage;
      t8 = t7[1];
      t9 = xfB.rotation.storage;
      t10 = C.JSNumber_methods.$mul(t9[1], v1.get$x(v1));
      t11 = C.JSNumber_methods.$mul(t9[3], v1.get$y(v1));
      dx = t7[0] + C.JSNumber_methods.$mul(t9[0], v1.get$x(v1)) + C.JSNumber_methods.$mul(t9[2], v1.get$y(v1)) - (t1 + t6 + t3);
      dy = t8 + t10 + t11 - (t2 + t4 + t5);
      radius = circle1.radius + circle2.radius;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.type = 0;
      manifold.localPoint.setFrom$1(circle1.get$position(circle1));
      manifold.localNormal.setZero$0();
      manifold.pointCount = 1;
      t1 = manifold.points;
      t1[0].get$localPoint().setFrom$1(circle2.get$position(circle2));
      J.get$id$x(t1[0]).zero$0();
    },
    collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
      var v, t1, t2, t3, t4, t5, t6, v1x, v1y, bx, by, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, norm, s, vertIndex2, v1, v2, mpoint, temp2X, temp2Y, temp4X, temp4Y, dx, dy, fcx, fcy;
      manifold.pointCount = 0;
      v = circle.get$position(circle);
      t1 = xfB.position.storage;
      t2 = t1[1];
      t3 = xfB.rotation.storage;
      t4 = C.JSNumber_methods.$mul(t3[1], v.get$x(v));
      t5 = C.JSNumber_methods.$mul(t3[3], v.get$y(v));
      t6 = xfA.position.storage;
      v1x = t1[0] + C.JSNumber_methods.$mul(t3[0], v.get$x(v)) + C.JSNumber_methods.$mul(t3[2], v.get$y(v)) - t6[0];
      v1y = t2 + t4 + t5 - t6[1];
      t6 = xfA.rotation.storage;
      bx = t6[0];
      by = t6[1];
      cLocaly = v1x * t6[2] + v1y * t6[3];
      cLocalx = v1x * bx + v1y * by;
      radius = polygon.radius + circle.radius;
      vertexCount = polygon.vertexCount;
      vertices = polygon.vertices;
      normals = polygon.normals;
      for (normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
        if (i >= 12)
          return H.ioore(vertices, i);
        vertex = vertices[i];
        t1 = J.getInterceptor$x(vertex);
        t2 = t1.get$x(vertex);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1 = t1.get$y(vertex);
        if (typeof t1 !== "number")
          return H.iae(t1);
        norm = normals[i];
        t3 = J.getInterceptor$x(norm);
        s = J.$add$ns(J.$mul$ns(t3.get$x(norm), cLocalx - t2), J.$mul$ns(t3.get$y(norm), cLocaly - t1));
        t1 = J.getInterceptor$n(s);
        if (t1.$gt(s, radius))
          return;
        if (t1.$gt(s, separation)) {
          separation = s;
          normalIndex = i;
        }
      }
      vertIndex2 = normalIndex + 1;
      vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
      if (normalIndex < 0 || normalIndex >= 12)
        return H.ioore(vertices, normalIndex);
      v1 = vertices[normalIndex];
      if (vertIndex2 < 0 || vertIndex2 >= 12)
        return H.ioore(vertices, vertIndex2);
      v2 = vertices[vertIndex2];
      if (J.$lt$n(separation, 1.192e-7)) {
        manifold.pointCount = 1;
        manifold.type = 1;
        norm = normals[normalIndex];
        t1 = J.getInterceptor$x(norm);
        t2 = manifold.localNormal.storage;
        t2[0] = t1.get$x(norm);
        t2[1] = t1.get$y(norm);
        t1 = J.getInterceptor$x(v1);
        t2 = J.getInterceptor$x(v2);
        t3 = manifold.localPoint.storage;
        t3[0] = J.$mul$ns(J.$add$ns(t1.get$x(v1), t2.get$x(v2)), 0.5);
        t3[1] = J.$add$ns(t1.get$y(v1), t2.get$y(v2)) * 0.5;
        mpoint = manifold.points[0];
        t2 = mpoint.get$localPoint();
        t1 = circle.get$position(circle);
        t2.storage[0] = t1.get$x(t1);
        t1 = mpoint.get$localPoint();
        t2 = circle.get$position(circle);
        t1.storage[1] = t2.get$y(t2);
        J.get$id$x(mpoint).zero$0();
        return;
      }
      t1 = J.getInterceptor$x(v1);
      t2 = t1.get$x(v1);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = t1.get$y(v1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.getInterceptor$x(v2);
      temp2X = J.$sub$n(t4.get$x(v2), t1.get$x(v1));
      temp2Y = J.$sub$n(t4.get$y(v2), t1.get$y(v1));
      if (typeof temp2X !== "number")
        return H.iae(temp2X);
      t5 = t4.get$x(v2);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t6 = t4.get$y(v2);
      if (typeof t6 !== "number")
        return H.iae(t6);
      temp4X = J.$sub$n(t1.get$x(v1), t4.get$x(v2));
      temp4Y = J.$sub$n(t1.get$y(v1), t4.get$y(v2));
      if (typeof temp4X !== "number")
        return H.iae(temp4X);
      if ((cLocalx - t2) * temp2X + (cLocaly - t3) * temp2Y <= 0) {
        t2 = t1.get$x(v1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        dx = cLocalx - t2;
        t2 = t1.get$y(v1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        dy = cLocaly - t2;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        t2 = manifold.localNormal;
        t3 = t1.get$x(v1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = t2.storage;
        t4[0] = cLocalx - t3;
        t1 = t1.get$y(v1);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4[1] = cLocaly - t1;
        t2.normalize$0();
        manifold.localPoint.setFrom$1(v1);
        t2 = manifold.points;
        t2[0].get$localPoint().setFrom$1(circle.get$position(circle));
        J.get$id$x(t2[0]).zero$0();
      } else if ((cLocalx - t5) * temp4X + (cLocaly - t6) * temp4Y <= 0) {
        t1 = t4.get$x(v2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        dx = cLocalx - t1;
        t1 = t4.get$y(v2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        dy = cLocaly - t1;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        t1 = manifold.localNormal;
        t2 = t4.get$x(v2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = t1.storage;
        t3[0] = cLocalx - t2;
        t4 = t4.get$y(v2);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t3[1] = cLocaly - t4;
        t1.normalize$0();
        manifold.localPoint.setFrom$1(v2);
        t1 = manifold.points;
        t1[0].get$localPoint().setFrom$1(circle.get$position(circle));
        J.get$id$x(t1[0]).zero$0();
      } else {
        fcx = J.$mul$ns(J.$add$ns(t1.get$x(v1), t4.get$x(v2)), 0.5);
        fcy = J.$add$ns(t1.get$y(v1), t4.get$y(v2)) * 0.5;
        if (typeof fcx !== "number")
          return H.iae(fcx);
        norm = normals[normalIndex];
        t1 = J.getInterceptor$x(norm);
        t2 = t1.get$x(norm);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1 = t1.get$y(norm);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if ((cLocalx - fcx) * t2 + (cLocaly - fcy) * t1 > radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        manifold.localNormal.setFrom$1(normals[normalIndex]);
        t1 = manifold.localPoint.storage;
        t1[0] = fcx;
        t1[1] = fcy;
        t1 = manifold.points;
        t1[0].get$localPoint().setFrom$1(circle.get$position(circle));
        J.get$id$x(t1[0]).zero$0();
      }
    },
    edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
      var vertices1, normals1, count2, vertices2, v, t1, t2, t3, t4, t5, t6, normal1Worldy, normal1Worldx, normal1x, normal1y, index, minDot, i, a, dot, v3, t7, t8, t9, t10, t11, v4, t12, t13, t14, t15, t16, t17, t18, t19, t20;
      vertices1 = poly1.vertices;
      normals1 = poly1.normals;
      count2 = poly2.vertexCount;
      vertices2 = poly2.vertices;
      if (edge1 < 0 || edge1 >= 12)
        return H.ioore(normals1, edge1);
      v = normals1[edge1];
      t1 = xf1.rotation.storage;
      t2 = t1[1];
      t3 = J.getInterceptor$x(v);
      t4 = t3.get$x(v);
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t1[3];
      t6 = t3.get$y(v);
      if (typeof t6 !== "number")
        return H.iae(t6);
      normal1Worldy = t2 * t4 + t5 * t6;
      t6 = t1[0];
      t5 = t3.get$x(v);
      if (typeof t5 !== "number")
        return H.iae(t5);
      t4 = t1[2];
      t3 = t3.get$y(v);
      if (typeof t3 !== "number")
        return H.iae(t3);
      normal1Worldx = t6 * t5 + t4 * t3;
      t3 = xf2.rotation.storage;
      normal1x = normal1Worldx * t3[0] + normal1Worldy * t3[1];
      normal1y = normal1Worldx * t3[2] + normal1Worldy * t3[3];
      for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
        if (i >= 12)
          return H.ioore(vertices2, i);
        a = vertices2[i];
        t2 = J.getInterceptor$x(a);
        dot = J.$add$ns(J.$mul$ns(t2.get$x(a), normal1x), J.$mul$ns(t2.get$y(a), normal1y));
        if (J.$lt$n(dot, minDot)) {
          minDot = dot;
          index = i;
        }
      }
      v3 = vertices1[edge1];
      t2 = xf1.position.storage;
      t4 = t2[1];
      t5 = t1[1];
      t6 = J.getInterceptor$x(v3);
      t7 = t6.get$x(v3);
      if (typeof t7 !== "number")
        return H.iae(t7);
      t8 = t1[3];
      t9 = t6.get$y(v3);
      if (typeof t9 !== "number")
        return H.iae(t9);
      t2 = t2[0];
      t10 = t1[0];
      t11 = t6.get$x(v3);
      if (typeof t11 !== "number")
        return H.iae(t11);
      t1 = t1[2];
      t6 = t6.get$y(v3);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (index < 0 || index >= 12)
        return H.ioore(vertices2, index);
      v4 = vertices2[index];
      t12 = xf2.position.storage;
      t13 = t12[1];
      t14 = t3[1];
      t15 = J.getInterceptor$x(v4);
      t16 = t15.get$x(v4);
      if (typeof t16 !== "number")
        return H.iae(t16);
      t17 = t3[3];
      t18 = t15.get$y(v4);
      if (typeof t18 !== "number")
        return H.iae(t18);
      t12 = t12[0];
      t19 = t3[0];
      t20 = t15.get$x(v4);
      if (typeof t20 !== "number")
        return H.iae(t20);
      t3 = t3[2];
      t15 = t15.get$y(v4);
      if (typeof t15 !== "number")
        return H.iae(t15);
      return (t12 + t19 * t20 + t3 * t15 - (t2 + t10 * t11 + t1 * t6)) * normal1Worldx + (t13 + t14 * t16 + t17 * t18 - (t4 + t5 * t7 + t8 * t9)) * normal1Worldy;
    },
    findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
      var count1, normals1, v, t1, t2, t3, t4, t5, t6, t7, t8, v1, t9, t10, t11, t12, t13, t14, t15, t16, dx, dy, dLocal1x, dLocal1y, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
      count1 = poly1.vertexCount;
      normals1 = poly1.normals;
      v = poly2.centroid;
      t1 = xf2.position.storage;
      t2 = t1[1];
      t3 = xf2.rotation.storage;
      t4 = t3[1];
      t5 = v.storage;
      t6 = t5[0];
      t7 = t3[3];
      t5 = t5[1];
      t1 = t1[0];
      t8 = t3[0];
      t3 = t3[2];
      v1 = poly1.centroid;
      t9 = xf1.position.storage;
      t10 = t9[1];
      t11 = xf1.rotation.storage;
      t12 = t11[1];
      t13 = v1.storage;
      t14 = t13[0];
      t15 = t11[3];
      t13 = t13[1];
      t9 = t9[0];
      t16 = t11[0];
      t11 = t11[2];
      dx = t1 + t8 * t6 + t3 * t5 - (t9 + t16 * t14 + t11 * t13);
      dy = t2 + t4 * t6 + t7 * t5 - (t10 + t12 * t14 + t15 * t13);
      dLocal1x = dx * t16 + dy * t12;
      dLocal1y = dx * t11 + dy * t15;
      for (edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
        if (i >= 12)
          return H.ioore(normals1, i);
        norm = normals1[i];
        t1 = J.getInterceptor$x(norm);
        dot = J.$add$ns(J.$mul$ns(t1.get$x(norm), dLocal1x), J.$mul$ns(t1.get$y(norm), dLocal1y));
        if (J.$gt$n(dot, maxDot)) {
          maxDot = dot;
          edge = i;
        }
      }
      s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
      prevEdge = edge - 1;
      prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
      sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
      nextEdge = edge + 1;
      nextEdge = nextEdge < count1 ? nextEdge : 0;
      sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
      if (sPrev > s && sPrev > sNext) {
        bestSeparation = sPrev;
        bestEdge = prevEdge;
        increment = -1;
      } else {
        if (sNext > s)
          ;
        else {
          results.edgeIndex = edge;
          results.separation = s;
          return;
        }
        bestSeparation = sNext;
        bestEdge = nextEdge;
        increment = 1;
      }
      for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
        if (t1) {
          edge0 = bestEdge - 1;
          edge0 = edge0 >= 0 ? edge0 : edge;
        } else {
          edge0 = bestEdge + 1;
          edge0 = edge0 < count1 ? edge0 : 0;
        }
        s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
        if (s > bestSeparation)
          ;
        else
          break;
      }
      results.edgeIndex = bestEdge;
      results.separation = bestSeparation;
    },
    findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
      var normals1, count2, vertices2, normals2, t1, index, minDot, i, dot, i2;
      normals1 = poly1.normals;
      count2 = poly2.vertexCount;
      vertices2 = poly2.vertices;
      normals2 = poly2.normals;
      if (edge1 < 0 || edge1 >= 12)
        return H.ioore(normals1, edge1);
      t1 = this.normal1;
      xf1.rotation.transformed$2(normals1[edge1], t1);
      xf2.rotation.transposed$0().transformed$2(t1, t1);
      for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
        if (i >= 12)
          return H.ioore(normals2, i);
        dot = t1.dot$1(normals2[i]);
        if (dot < minDot) {
          minDot = dot;
          index = i;
        }
      }
      i2 = index + 1;
      i2 = i2 < count2 ? i2 : 0;
      if (index < 0 || index >= 12)
        return H.ioore(vertices2, index);
      V.Transform_mulToOut(xf2, vertices2[index], c[0].get$v());
      J.get$id$x(c[0]).get$features().referenceEdge = edge1;
      J.get$id$x(c[0]).get$features().incidentEdge = index;
      J.get$id$x(c[0]).get$features().incidentVertex = 0;
      if (i2 < 0 || i2 >= 12)
        return H.ioore(vertices2, i2);
      V.Transform_mulToOut(xf2, vertices2[i2], c[1].get$v());
      J.get$id$x(c[1]).get$features().referenceEdge = edge1;
      J.get$id$x(c[1]).get$features().incidentEdge = i2;
      J.get$id$x(c[1]).get$features().incidentVertex = 1;
    },
    collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
      var totalRadius, t1, t2, t3, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t4, t5, t6, t7, frontOffset, t8, np, pointCount, i, cp, v1x, v1y, bx, by, b1x, b1y;
      manifold.pointCount = 0;
      totalRadius = polyA.radius + polyB.radius;
      t1 = this.results1;
      this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
      if (t1.separation > totalRadius)
        return;
      t2 = this.results2;
      this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
      t3 = t2.separation;
      if (t3 > totalRadius)
        return;
      if (t3 > 0.98 * t1.separation + 0.001) {
        edge1 = t2.edgeIndex;
        manifold.type = 2;
        xf2 = xfA;
        xf1 = xfB;
        poly2 = polyA;
        poly1 = polyB;
        flip = 1;
      } else {
        edge1 = t1.edgeIndex;
        manifold.type = 1;
        xf2 = xfB;
        xf1 = xfA;
        poly2 = polyB;
        poly1 = polyA;
        flip = 0;
      }
      t1 = this.incidentEdge;
      this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
      count1 = poly1.vertexCount;
      vertices1 = poly1.vertices;
      t2 = this.v11;
      if (edge1 < 0 || edge1 >= 12)
        return H.ioore(vertices1, edge1);
      t2.setFrom$1(vertices1[edge1]);
      t3 = this.v12;
      t4 = edge1 + 1;
      if (t4 < count1) {
        if (t4 >= 12)
          return H.ioore(vertices1, t4);
        t4 = vertices1[t4];
      } else
        t4 = vertices1[0];
      t3.setFrom$1(t4);
      t4 = this.localTangent;
      t4.setFrom$1(t3).sub$1(t2);
      t4.normalize$0();
      t5 = this.localNormal;
      V.Vector2_crossVectorAndNumToOut(t4, 1, t5);
      t6 = this.planePoint;
      t6.setFrom$1(t2).add$1(0, t3).scale$1(0, 0.5);
      t7 = this.tangent;
      xf1.rotation.transformed$2(t4, t7);
      t4 = this.normal;
      V.Vector2_crossVectorAndNumToOut(t7, 1, t4);
      V.Transform_mulToOut(xf1, t2, t2);
      V.Transform_mulToOut(xf1, t3, t3);
      frontOffset = t4.dot$1(t2);
      t2 = t7.dot$1(t2);
      t3 = t7.dot$1(t3);
      t7.negate$0();
      t8 = this.clipPoints1;
      np = V.Collision_clipSegmentToLine(t8, t1, t7, -t2 + totalRadius);
      t7.negate$0();
      if (np < 2)
        return;
      t1 = this.clipPoints2;
      if (V.Collision_clipSegmentToLine(t1, t8, t7, t3 + totalRadius) < 2)
        return;
      manifold.localNormal.setFrom$1(t5);
      manifold.localPoint.setFrom$1(t6);
      for (t2 = xf2.position.storage, t3 = xf2.rotation.storage, pointCount = 0, i = 0; i < 2; ++i)
        if (t4.dot$1(t1[i].v) - frontOffset <= totalRadius) {
          t5 = manifold.points;
          if (pointCount >= 2)
            return H.ioore(t5, pointCount);
          cp = t5[pointCount];
          t5 = t1[i].v;
          t6 = cp.get$localPoint();
          t5 = t5.storage;
          v1x = t5[0] - t2[0];
          v1y = t5[1] - t2[1];
          bx = t3[0];
          by = t3[1];
          b1x = t3[2];
          b1y = t3[3];
          t6 = t6.storage;
          t6[0] = v1x * bx + v1y * by;
          t6[1] = v1x * b1x + v1y * b1y;
          t6 = J.getInterceptor$x(cp);
          t6.get$id(cp).setFrom$1(t1[i].id);
          t6.get$id(cp).get$features().flip = flip;
          ++pointCount;
        }
      manifold.pointCount = pointCount;
    },
    Collision$_construct$1: function(pool) {
      var t1 = this.incidentEdge;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
      t1 = this.clipPoints1;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
      t1 = this.clipPoints2;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
    },
    static: {"^": "Collision_NULL_FEATURE", Collision_clipSegmentToLine: function(vOut, vIn, norm, offset) {
        var distance0, distance1, t1, t2, numOut, numOut0, vin;
        distance0 = norm.dot$1(vIn[0].get$v()) - offset;
        distance1 = norm.dot$1(vIn[1].get$v()) - offset;
        if (distance0 <= 0) {
          t1 = vOut[0];
          t2 = vIn[0];
          t1.v.setFrom$1(t2.get$v());
          t1.id.setFrom$1(J.get$id$x(t2));
          numOut = 1;
        } else
          numOut = 0;
        if (distance1 <= 0) {
          numOut0 = numOut + 1;
          t1 = vOut[numOut];
          t2 = vIn[1];
          t1.v.setFrom$1(t2.get$v());
          t1.id.setFrom$1(J.get$id$x(t2));
          numOut = numOut0;
        }
        if (distance0 * distance1 < 0) {
          if (numOut >= 2)
            return H.ioore(vOut, numOut);
          vOut[numOut].v.setFrom$1(vIn[1].get$v()).sub$1(vIn[0].get$v()).scale$1(0, distance0 / (distance0 - distance1)).add$1(0, vIn[0].get$v());
          vin = distance0 > 0 ? vIn[0] : vIn[1];
          vOut[numOut].id.setFrom$1(J.get$id$x(vin));
          ++numOut;
        }
        return numOut;
      }}
  },
  ClipVertex: {
    "^": "Object;v<,id*",
    setFrom$1: function(cv) {
      this.v.setFrom$1(cv.get$v());
      this.id.setFrom$1(J.get$id$x(cv));
    },
    static: {ClipVertex$: function() {
        return new V.ClipVertex(new T.Vector2(new Float32Array(H._checkLength(2))), new V.ContactID(V.Features$()));
      }}
  },
  EdgeResults: {
    "^": "Object;separation,edgeIndex"
  },
  ContactID: {
    "^": "Object;features<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other.get$features().$eq(0, this.features);
    },
    setFrom$1: function(other) {
      this.features.setFrom$1(other.get$features());
    },
    isEqual$1: function(other) {
      return other.get$features().$eq(0, this.features);
    },
    zero$0: function() {
      var t1 = this.features;
      t1.referenceEdge = 0;
      t1.incidentEdge = 0;
      t1.incidentVertex = 0;
      t1.flip = 0;
    }
  },
  Distance: {
    "^": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal<",
    distance$3: function(output, cache, input) {
      var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, t7, t8, t9, iter, saveCount, i, t10, vertex, t11, t12, t13, t14, t15, t16, duplicate, rA, rB;
      ++this.calls;
      proxyA = input.proxyA;
      proxyB = input.proxyB;
      transformA = input.transformA;
      transformB = input.transformB;
      t1 = this.simplex;
      t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
      vertices = t1.vertices;
      t2 = this.closestPoint;
      t1.getClosestPoint$1(t2);
      t2.get$length2();
      for (t3 = this.saveA, t4 = this.saveB, t5 = this.temp, t6 = transformB.rotation, t7 = this.searchDirection, t8 = t7.storage, t9 = transformA.rotation, iter = 0; iter < this.maxIters;) {
        saveCount = t1.count;
        if (typeof saveCount !== "number")
          return H.iae(saveCount);
        i = 0;
        for (; i < saveCount; ++i) {
          if (i >= 3)
            return H.ioore(vertices, i);
          t3[i] = vertices[i].get$indexA();
          t4[i] = vertices[i].get$indexB();
        }
        switch (t1.count) {
          case 1:
            break;
          case 2:
            t1.solve2$0();
            break;
          case 3:
            t1.solve3$0();
            break;
          default:
            return;
        }
        if (J.$eq(t1.count, 3))
          break;
        t1.getClosestPoint$1(t2);
        t2.get$length2();
        t1.getSearchDirection$1(t7);
        if (t7.get$length2() < 1.4208639999999999e-14)
          break;
        t10 = t1.count;
        if (t10 >>> 0 !== t10 || t10 >= 3)
          return H.ioore(vertices, t10);
        vertex = vertices[t10];
        t10 = t9.transposed$0();
        t8[1] = -t8[1];
        t8[0] = -t8[0];
        t11 = t5.storage;
        t11[1] = t8[1];
        t11[0] = t8[0];
        t10 = t10.storage;
        t11 = t10[0];
        t12 = t5.storage;
        t13 = t12[0];
        t14 = t10[2];
        t15 = t12[1];
        t16 = t10[1];
        t10 = t10[3];
        t12[0] = t11 * t13 + t14 * t15;
        t12[1] = t16 * t13 + t10 * t15;
        vertex.set$indexA(proxyA.getSupport$1(t5));
        t15 = proxyA.get$vertices();
        t10 = vertex.get$indexA();
        if (t10 >>> 0 !== t10 || t10 >= t15.length)
          return H.ioore(t15, t10);
        V.Transform_mulToOut(transformA, t15[t10], vertex.get$wA());
        t10 = t6.transposed$0();
        t8[1] = -t8[1];
        t8[0] = -t8[0];
        t12[1] = t8[1];
        t12[0] = t8[0];
        t10 = t10.storage;
        t11 = t10[0];
        t13 = t12[0];
        t14 = t10[2];
        t15 = t12[1];
        t16 = t10[1];
        t10 = t10[3];
        t12[0] = t11 * t13 + t14 * t15;
        t12[1] = t16 * t13 + t10 * t15;
        vertex.set$indexB(proxyB.getSupport$1(t5));
        t15 = proxyB.get$vertices();
        t10 = vertex.get$indexB();
        if (t10 >>> 0 !== t10 || t10 >= t15.length)
          return H.ioore(t15, t10);
        V.Transform_mulToOut(transformB, t15[t10], vertex.get$wB());
        vertex.get$w().setFrom$1(vertex.get$wB()).sub$1(vertex.get$wA());
        ++iter;
        ++this.iters;
        i = 0;
        while (true) {
          if (!(i < saveCount)) {
            duplicate = false;
            break;
          }
          t10 = vertex.get$indexA();
          if (i >= 3)
            return H.ioore(t3, i);
          if (J.$eq(t10, t3[i]) && J.$eq(vertex.get$indexB(), t4[i])) {
            duplicate = true;
            break;
          }
          ++i;
        }
        if (duplicate)
          break;
        t1.count = J.$add$ns(t1.count, 1);
      }
      this.maxIters = P.max(this.maxIters, iter);
      t2 = output.pointA;
      t3 = output.pointB;
      switch (t1.count) {
        case 0:
          break;
        case 1:
          t4 = t1.v1;
          t2.setFrom$1(t4.wA);
          t3.setFrom$1(t4.wB);
          break;
        case 2:
          t4 = t1.case2;
          t6 = t1.v1;
          t4.setFrom$1(t6.wA).scale$1(0, t6.a);
          t7 = t1.v2;
          t2.setFrom$1(t7.wA).scale$1(0, t7.a).add$1(0, t4);
          t4.setFrom$1(t6.wB).scale$1(0, t6.a);
          t3.setFrom$1(t7.wB).scale$1(0, t7.a).add$1(0, t4);
          break;
        case 3:
          t4 = t1.v1;
          t2.setFrom$1(t4.wA).scale$1(0, t4.a);
          t4 = t1.case3;
          t6 = t1.v2;
          t4.setFrom$1(t6.wA).scale$1(0, t6.a);
          t6 = t1.case33;
          t7 = t1.v3;
          t6.setFrom$1(t7.wA).scale$1(0, t7.a);
          t2.add$1(0, t4).add$1(0, t6);
          t3.setFrom$1(t2);
          break;
        default:
          break;
      }
      output.distance = Math.sqrt(H.checkNum(V.MathBox_distanceSquared(t2, t3)));
      output.iterations = iter;
      t1.writeCache$1(cache);
      if (input.useRadii) {
        rA = proxyA.get$radius();
        rB = proxyB.get$radius();
        t1 = output.distance;
        if (typeof rA !== "number")
          return rA.$add();
        if (typeof rB !== "number")
          return H.iae(rB);
        t4 = rA + rB;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > t4 && t1 > 1.192e-7) {
          output.distance = t1 - t4;
          t1 = this.normal;
          t1.setFrom$1(t3).sub$1(t2);
          t1.normalize$0();
          t5.setFrom$1(t1).scale$1(0, rA);
          t2.add$1(0, t5);
          t5.setFrom$1(t1).scale$1(0, rB);
          t3.sub$1(t5);
        } else {
          t2.add$1(0, t3).scale$1(0, 0.5);
          t3.setFrom$1(t2);
          output.distance = 0;
        }
      }
    }
  },
  DistanceInput: {
    "^": "Object;proxyA@,proxyB@,transformA,transformB,useRadii",
    static: {DistanceInput$: function() {
        return new V.DistanceInput(V.DistanceProxy$(), V.DistanceProxy$(), V.Transform$(), V.Transform$(), false);
      }}
  },
  DistanceOutput: {
    "^": "Object;pointA,pointB,distance,iterations",
    static: {DistanceOutput$: function() {
        return new V.DistanceOutput(new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), null, null);
      }}
  },
  DistanceProxy: {
    "^": "Object;vertices<,count<,radius@",
    setFromShape$1: function(shape) {
      var t1, i;
      t1 = shape.type;
      if (t1 === 0) {
        this.vertices[0].setFrom$1(shape.get$position(shape));
        this.count = 1;
        this.radius = shape.radius;
      } else if (t1 === 1) {
        this.count = shape.vertexCount;
        this.radius = shape.radius;
        for (t1 = this.vertices, i = 0; i < this.count; ++i) {
          if (i >= 12)
            return H.ioore(t1, i);
          t1[i].setFrom$1(shape.vertices[i]);
        }
      }
    },
    getSupport$1: function(direction) {
      var t1, bestValue, bestIndex, i, value;
      t1 = this.vertices;
      bestValue = t1[0].dot$1(direction);
      for (bestIndex = 0, i = 1; i < this.count; ++i) {
        if (i >= 12)
          return H.ioore(t1, i);
        value = t1[i].dot$1(direction);
        if (value > bestValue) {
          bestValue = value;
          bestIndex = i;
        }
      }
      return bestIndex;
    },
    DistanceProxy$0: function() {
      var t1, i;
      for (t1 = this.vertices, i = 0; i < 12; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {DistanceProxy$: function() {
        var t1 = Array(12);
        t1.fixed$length = init;
        t1 = new V.DistanceProxy(H.setRuntimeTypeInfo(t1, [T.Vector2]), 0, 0);
        t1.DistanceProxy$0();
        return t1;
      }}
  },
  Features: {
    "^": "Object;referenceEdge<,incidentEdge<,incidentVertex<,flip<",
    setFrom$1: function(f) {
      this.referenceEdge = f.get$referenceEdge();
      this.incidentEdge = f.get$incidentEdge();
      this.incidentVertex = f.get$incidentVertex();
      this.flip = f.get$flip();
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.referenceEdge === other.get$referenceEdge() && this.incidentEdge === other.get$incidentEdge() && this.incidentVertex === other.get$incidentVertex() && this.flip === other.get$flip();
    },
    toString$0: function(_) {
      return "Features: (" + this.flip + ", " + H.S(this.incidentEdge) + ", " + this.incidentVertex + " " + this.referenceEdge + ")";
    },
    static: {Features$: function() {
        return new V.Features(0, 0, 0, 0);
      }}
  },
  Manifold: {
    "^": "Object;points>,localNormal<,localPoint<,type*,pointCount@",
    setFrom$1: function(other) {
      var t1, t2, i, t3;
      t1 = this.points;
      t2 = J.getInterceptor$x(other);
      i = 0;
      while (true) {
        t3 = other.get$pointCount();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        if (i >= 2)
          return H.ioore(t1, i);
        t1[i].setFrom$1(J.$index$asx(t2.get$points(other), i));
        ++i;
      }
      this.type = t2.get$type(other);
      this.localNormal.setFrom$1(other.get$localNormal());
      this.localPoint.setFrom$1(other.get$localPoint());
      this.pointCount = other.get$pointCount();
    },
    Manifold$0: function() {
      var t1, i;
      for (t1 = this.points, i = 0; i < 2; ++i)
        t1[i] = new V.ManifoldPoint(new T.Vector2(new Float32Array(2)), 0, 0, new V.ContactID(new V.Features(0, 0, 0, 0)));
    },
    static: {Manifold$: function() {
        var t1 = Array(2);
        t1.fixed$length = init;
        t1 = new V.Manifold(H.setRuntimeTypeInfo(t1, [V.ManifoldPoint]), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), null, 0);
        t1.Manifold$0();
        return t1;
      }}
  },
  ManifoldPoint: {
    "^": "Object;localPoint<,normalImpulse@,tangentImpulse@,id>",
    setFrom$1: function(other) {
      this.localPoint.setFrom$1(other.get$localPoint());
      this.normalImpulse = other.get$normalImpulse();
      this.tangentImpulse = other.get$tangentImpulse();
      this.id.features.setFrom$1(J.get$id$x(other).get$features());
    }
  },
  MassData: {
    "^": "Object;mass<,center<,inertia<",
    setFrom$1: function(md) {
      this.mass = md.get$mass();
      this.inertia = md.get$inertia();
      this.center.setFrom$1(md.get$center());
    }
  },
  PolygonShape: {
    "^": "Shape;centroid,vertices<,normals,vertexCount<,type,radius",
    getSupport$1: function(d) {
      var t1, bestValue, bestIndex, i, value;
      t1 = this.vertices;
      bestValue = t1[0].dot$1(d);
      for (bestIndex = 0, i = 1; i < this.vertexCount; ++i) {
        if (i >= 12)
          return H.ioore(t1, i);
        value = t1[i].dot$1(d);
        if (value > bestValue) {
          bestValue = value;
          bestIndex = i;
        }
      }
      return bestIndex;
    },
    clone$0: function(_) {
      return V.PolygonShape$copy(this);
    },
    setFrom$2: function(otherVertices, count) {
      var t1, i, t2, edge, t3, t4, i0, i2, t5, t6;
      this.vertexCount = count;
      for (t1 = this.vertices, i = 0; i < this.vertexCount; ++i) {
        if (i >= 12)
          return H.ioore(t1, i);
        t2 = t1[i];
        if (i >= otherVertices.length)
          return H.ioore(otherVertices, i);
        t2.setFrom$1(otherVertices[i]);
      }
      t2 = new Float32Array(H._checkLength(2));
      edge = new T.Vector2(t2);
      for (t3 = this.normals, i = 0; t4 = this.vertexCount, i < t4; i = i0) {
        i0 = i + 1;
        i2 = i0 < t4 ? i0 : 0;
        if (i2 >= 12)
          return H.ioore(t1, i2);
        t4 = t1[i2];
        t5 = t4.get$storage();
        if (1 >= t5.length)
          return H.ioore(t5, 1);
        t2[1] = t5[1];
        t4 = t4.get$storage();
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        t2[0] = t4[0];
        if (i >= 12)
          return H.ioore(t1, i);
        edge.sub$1(t1[i]);
        t4 = t3[i];
        t5 = t2[0];
        t6 = J.getInterceptor$x(t4);
        t6.set$x(t4, t2[1]);
        t6.set$y(t4, -1 * t5);
        t3[i].normalize$0();
      }
      this.computeCentroidToOut$3(t1, t4, this.centroid);
    },
    setAsBox$2: function(hx, hy) {
      var t1, t2, t3;
      this.vertexCount = 4;
      t1 = this.vertices;
      t2 = -hx;
      t3 = -hy;
      t1[0].setValues$2(t2, t3);
      t1[1].setValues$2(hx, t3);
      t1[2].setValues$2(hx, hy);
      t1[3].setValues$2(t2, hy);
      t2 = this.normals;
      t2[0].setValues$2(0, -1);
      t2[1].setValues$2(1, 0);
      t2[2].setValues$2(0, 1);
      t2[3].setValues$2(-1, 0);
      this.centroid.setZero$0();
    },
    computeAxisAlignedBox$2: function(argAabb, argXf) {
      var t1, lower, t2, t3, v, t4, i, t5;
      t1 = new Float32Array(H._checkLength(2));
      lower = new T.Vector2(t1);
      t2 = new Float32Array(H._checkLength(2));
      t3 = new Float32Array(H._checkLength(2));
      v = new T.Vector2(t3);
      t4 = this.vertices;
      V.Transform_mulToOut(argXf, t4[0], lower);
      new T.Vector2(t2).setFrom$1(lower);
      for (i = 1; i < this.vertexCount; ++i) {
        if (i >= 12)
          return H.ioore(t4, i);
        V.Transform_mulToOut(argXf, t4[i], v);
        t1[0] = P.min(t1[0], t3[0]);
        t1[1] = P.min(t1[1], t3[1]);
        t2[0] = P.max(t2[0], t3[0]);
        t2[1] = P.max(t2[1], t3[1]);
      }
      t3 = argAabb.lowerBound;
      t4 = t1[0];
      t5 = this.radius;
      t3 = t3.storage;
      t3[0] = t4 - t5;
      t3[1] = t1[1] - t5;
      t1 = argAabb.upperBound;
      t3 = t2[0];
      t1 = t1.storage;
      t1[0] = t3 + t5;
      t1[1] = t2[1] + t5;
    },
    computeCentroidToOut$3: function(vs, count, out) {
      var t1, pRef, e1, t2, e2, area, i, p2, p3, t3, triangleArea, t4;
      t1 = out.storage;
      t1[0] = 0;
      t1[1] = 0;
      if (count === 2) {
        out.setFrom$1(vs[0]).add$1(0, vs[1]).scale$1(0, 0.5);
        return;
      }
      pRef = new T.Vector2(new Float32Array(H._checkLength(2)));
      pRef.setZero$0();
      t1 = new Float32Array(H._checkLength(2));
      e1 = new T.Vector2(t1);
      t2 = new Float32Array(H._checkLength(2));
      e2 = new T.Vector2(t2);
      for (area = 0, i = 0; i < count;) {
        if (i >= 12)
          return H.ioore(vs, i);
        p2 = vs[i];
        ++i;
        if (i < count) {
          if (i >= 12)
            return H.ioore(vs, i);
          p3 = vs[i];
        } else
          p3 = vs[0];
        t3 = p2.get$storage();
        if (1 >= t3.length)
          return H.ioore(t3, 1);
        t1[1] = t3[1];
        t3 = p2.get$storage();
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        t1[0] = t3[0];
        e1.sub$1(pRef);
        t3 = p3.get$storage();
        if (1 >= t3.length)
          return H.ioore(t3, 1);
        t2[1] = t3[1];
        t3 = p3.get$storage();
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        t2[0] = t3[0];
        e2.sub$1(pRef);
        triangleArea = 0.5 * (t1[0] * t2[1] - t1[1] * t2[0]);
        area += triangleArea;
        t3 = triangleArea * 0.3333333333333333;
        t4 = out.add$1(0, pRef).add$1(0, p2).add$1(0, p3).storage;
        t4[1] = t4[1] * t3;
        t4[0] = t4[0] * t3;
      }
      out.scale$1(0, 1 / area);
    },
    computeMass$2: function(massData, density) {
      var t1, center, t2, pRef, t3, e1, t4, e2, t5, area, I, i, t6, p2, p3, $D, triangleArea, t7, t8, t9, t10, t11, t12, px, py, ex1, ey1, ex2, ey2;
      if (this.vertexCount === 2) {
        t1 = this.vertices;
        massData.center.setFrom$1(t1[0]).add$1(0, t1[1]).scale$1(0, 0.5);
        massData.mass = 0;
        massData.inertia = 0;
        return;
      }
      t1 = new Float32Array(H._checkLength(2));
      center = new T.Vector2(t1);
      center.setZero$0();
      t2 = new Float32Array(H._checkLength(2));
      pRef = new T.Vector2(t2);
      pRef.setZero$0();
      t3 = new Float32Array(H._checkLength(2));
      e1 = new T.Vector2(t3);
      t4 = new Float32Array(H._checkLength(2));
      e2 = new T.Vector2(t4);
      for (t5 = this.vertices, area = 0, I = 0, i = 0; t6 = this.vertexCount, i < t6;) {
        if (i >= 12)
          return H.ioore(t5, i);
        p2 = t5[i];
        ++i;
        if (i < t6) {
          if (i >= 12)
            return H.ioore(t5, i);
          p3 = t5[i];
        } else
          p3 = t5[0];
        t6 = p2.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t3[1] = t6[1];
        t6 = p2.get$storage();
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t3[0] = t6[0];
        e1.sub$1(pRef);
        t6 = p3.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t4[1] = t6[1];
        t6 = p3.get$storage();
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t4[0] = t6[0];
        e2.sub$1(pRef);
        $D = t3[0] * t4[1] - t3[1] * t4[0];
        triangleArea = 0.5 * $D;
        area += triangleArea;
        t6 = t1[0];
        t7 = triangleArea * 0.3333333333333333;
        t8 = t2[0];
        t9 = J.getInterceptor$x(p2);
        t10 = t9.get$x(p2);
        if (typeof t10 !== "number")
          return H.iae(t10);
        t11 = J.getInterceptor$x(p3);
        t12 = t11.get$x(p3);
        if (typeof t12 !== "number")
          return H.iae(t12);
        t1[0] = t6 + t7 * (t8 + t10 + t12);
        t12 = t1[1];
        t10 = t2[1];
        t9 = t9.get$y(p2);
        if (typeof t9 !== "number")
          return H.iae(t9);
        t11 = t11.get$y(p3);
        if (typeof t11 !== "number")
          return H.iae(t11);
        t1[1] = t12 + t7 * (t10 + t9 + t11);
        px = t2[0];
        py = t2[1];
        ex1 = t3[0];
        ey1 = t3[1];
        ex2 = t4[0];
        ey2 = t4[1];
        I += $D * (0.3333333333333333 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px + (0.3333333333333333 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py));
      }
      if (typeof density !== "number")
        return density.$mul();
      massData.mass = density * area;
      center.scale$1(0, 1 / area);
      massData.center.setFrom$1(center);
      massData.inertia = I * density;
    },
    PolygonShape$copy$1: function(other) {
      var t1, t2, i, t3, t4, t5;
      for (t1 = this.vertices, t2 = other.vertices, i = 0; i < 12; ++i) {
        t3 = t2[i];
        t4 = new Float32Array(2);
        t5 = t3.get$storage();
        if (1 >= t5.length)
          return H.ioore(t5, 1);
        t4[1] = t5[1];
        t3 = t3.get$storage();
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        t4[0] = t3[0];
        t1[i] = new T.Vector2(t4);
      }
      for (t1 = this.normals, t2 = other.normals, i = 0; i < 12; ++i) {
        t3 = t2[i];
        t4 = new Float32Array(2);
        t5 = t3.get$storage();
        if (1 >= t5.length)
          return H.ioore(t5, 1);
        t4[1] = t5[1];
        t3 = t3.get$storage();
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        t4[0] = t3[0];
        t1[i] = new T.Vector2(t4);
      }
    },
    PolygonShape$0: function() {
      var t1, i;
      for (t1 = this.vertices, i = 0; i < 12; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
      for (t1 = this.normals, i = 0; i < 12; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {PolygonShape$: function() {
        var t1, t2;
        t1 = Array(12);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [T.Vector2]);
        t2 = Array(12);
        t2.fixed$length = init;
        t2 = H.setRuntimeTypeInfo(t2, [T.Vector2]);
        t2 = new V.PolygonShape(new T.Vector2(new Float32Array(H._checkLength(2))), t1, t2, 0, 1, 0.01);
        t2.PolygonShape$0();
        return t2;
      }, PolygonShape$copy: function(other) {
        var t1, t2, t3, t4, t5;
        t1 = other.radius;
        t2 = other.vertexCount;
        t3 = Array(12);
        t3.fixed$length = init;
        t3 = H.setRuntimeTypeInfo(t3, [T.Vector2]);
        t4 = Array(12);
        t4.fixed$length = init;
        t4 = H.setRuntimeTypeInfo(t4, [T.Vector2]);
        t5 = new T.Vector2(new Float32Array(H._checkLength(2)));
        t5.setFrom$1(other.centroid);
        t1 = new V.PolygonShape(t5, t3, t4, t2, 1, t1);
        t1.PolygonShape$copy$1(other);
        return t1;
      }}
  },
  Shape: {
    "^": "Object;type*,radius@"
  },
  Simplex: {
    "^": "Object;v1,v2,v3,vertices<,count<,e13,e23,e12,case2,case22,case3,case33",
    readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
      var t1, t2, t3, i, t4, v, t5, wALocal, wBLocal, metric1, metric2;
      this.count = cache.count;
      t1 = this.vertices;
      t2 = cache.indexA;
      t3 = cache.indexB;
      i = 0;
      while (true) {
        t4 = this.count;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        if (i >= 3)
          return H.ioore(t1, i);
        v = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        v.set$indexA(t2[i]);
        if (i >= t3.length)
          return H.ioore(t3, i);
        v.set$indexB(t3[i]);
        t4 = proxyA.get$vertices();
        t5 = v.get$indexA();
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          return H.ioore(t4, t5);
        wALocal = t4[t5];
        t5 = proxyB.get$vertices();
        t4 = v.get$indexB();
        if (t4 >>> 0 !== t4 || t4 >= t5.length)
          return H.ioore(t5, t4);
        wBLocal = t5[t4];
        V.Transform_mulToOut(transformA, wALocal, v.get$wA());
        V.Transform_mulToOut(transformB, wBLocal, v.get$wB());
        v.get$w().setFrom$1(v.get$wB()).sub$1(v.get$wA());
        J.set$a$x(v, 0);
        ++i;
      }
      if (t4 > 1) {
        metric1 = cache.metric;
        metric2 = this.getMetric$0();
        if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < 1.192e-7)
          this.count = 0;
      }
      if (J.$eq(this.count, 0)) {
        v = t1[0];
        v.set$indexA(0);
        v.set$indexB(0);
        t1 = proxyA.get$vertices();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        wALocal = t1[0];
        t1 = proxyB.get$vertices();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        wBLocal = t1[0];
        V.Transform_mulToOut(transformA, wALocal, v.get$wA());
        V.Transform_mulToOut(transformB, wBLocal, v.get$wB());
        v.get$w().setFrom$1(v.get$wB()).sub$1(v.get$wA());
        this.count = 1;
      }
    },
    writeCache$1: function(cache) {
      var t1, t2, t3, i, t4;
      cache.metric = this.getMetric$0();
      cache.count = this.count;
      t1 = cache.indexA;
      t2 = this.vertices;
      t3 = cache.indexB;
      i = 0;
      while (true) {
        t4 = this.count;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        if (i >= 3)
          return H.ioore(t2, i);
        t4 = t2[i].get$indexA();
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = t4;
        t4 = t2[i].get$indexB();
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3[i] = t4;
        ++i;
      }
    },
    getSearchDirection$1: function(out) {
      var t1, t2;
      switch (this.count) {
        case 1:
          out.setFrom$1(this.v1.w).negate$0();
          return;
        case 2:
          t1 = this.e12;
          t2 = this.v1.w;
          t1.setFrom$1(this.v2.w).sub$1(t2);
          out.setFrom$1(t2).negate$0();
          if (t1.cross$1(out) > 0)
            V.Vector2_crossVectorAndNumToOut(t1, -1, out);
          else
            V.Vector2_crossVectorAndNumToOut(t1, 1, out);
          break;
        default:
          out.setZero$0();
          return;
      }
    },
    getClosestPoint$1: function(out) {
      var t1, t2, t3;
      switch (this.count) {
        case 0:
          out.setZero$0();
          return;
        case 1:
          out.setFrom$1(this.v1.w);
          return;
        case 2:
          t1 = this.case22;
          t2 = this.v2;
          t1.setFrom$1(t2.w).scale$1(0, t2.a);
          t2 = this.case2;
          t3 = this.v1;
          t2.setFrom$1(t3.w).scale$1(0, t3.a).add$1(0, t1);
          out.setFrom$1(t2);
          return;
        case 3:
          out.setZero$0();
          return;
        default:
          out.setZero$0();
          return;
      }
    },
    getMetric$0: function() {
      var t1, t2, t3;
      switch (this.count) {
        case 0:
          return 0;
        case 1:
          return 0;
        case 2:
          return Math.sqrt(H.checkNum(V.MathBox_distanceSquared(this.v1.w, this.v2.w)));
        case 3:
          t1 = this.case3;
          t2 = this.v1.w;
          t1.setFrom$1(this.v2.w).sub$1(t2);
          t3 = this.case33;
          t3.setFrom$1(this.v3.w).sub$1(t2);
          return t1.cross$1(t3);
        default:
          return 0;
      }
    },
    solve2$0: function() {
      var t1, w1, t2, w2, t3, d12_2, d12_1, inv_d12;
      t1 = this.v1;
      w1 = t1.w;
      t2 = this.v2;
      w2 = t2.w;
      t3 = this.e12;
      t3.setFrom$1(w2).sub$1(w1);
      d12_2 = -w1.dot$1(t3);
      if (d12_2 <= 0) {
        t1.a = 1;
        this.count = 1;
        return;
      }
      d12_1 = w2.dot$1(t3);
      if (d12_1 <= 0) {
        t2.a = 1;
        this.count = 1;
        t1.setFrom$1(t2);
        return;
      }
      inv_d12 = 1 / (d12_1 + d12_2);
      t1.a = d12_1 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
    },
    solve3$0: function() {
      var t1, w1, t2, w2, t3, w3, t4, w1e12, w2e12, d12_2, t5, w1e13, w3e13, d13_2, t6, w2e23, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
      t1 = this.v1;
      w1 = t1.w;
      t2 = this.v2;
      w2 = t2.w;
      t3 = this.v3;
      w3 = t3.w;
      t4 = this.e12;
      t4.setFrom$1(w2).sub$1(w1);
      w1e12 = w1.dot$1(t4);
      w2e12 = w2.dot$1(t4);
      d12_2 = -w1e12;
      t5 = this.e13;
      t5.setFrom$1(w3).sub$1(w1);
      w1e13 = w1.dot$1(t5);
      w3e13 = w3.dot$1(t5);
      d13_2 = -w1e13;
      t6 = this.e23;
      t6.setFrom$1(w3).sub$1(w2);
      w2e23 = w2.dot$1(t6);
      w3e23 = w3.dot$1(t6);
      d23_2 = -w2e23;
      n123 = t4.cross$1(t5);
      d123_1 = n123 * w2.cross$1(w3);
      d123_2 = n123 * w3.cross$1(w1);
      d123_3 = n123 * w1.cross$1(w2);
      if (d12_2 <= 0 && d13_2 <= 0) {
        t1.a = 1;
        this.count = 1;
        return;
      }
      if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
        inv_d12 = 1 / (w2e12 + d12_2);
        t1.a = w2e12 * inv_d12;
        t2.a = d12_2 * inv_d12;
        this.count = 2;
        return;
      }
      if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
        inv_d13 = 1 / (w3e13 + d13_2);
        t1.a = w3e13 * inv_d13;
        t3.a = d13_2 * inv_d13;
        this.count = 2;
        t2.setFrom$1(t3);
        return;
      }
      if (w2e12 <= 0 && d23_2 <= 0) {
        t2.a = 1;
        this.count = 1;
        t1.setFrom$1(t2);
        return;
      }
      if (w3e13 <= 0 && w3e23 <= 0) {
        t3.a = 1;
        this.count = 1;
        t1.setFrom$1(t3);
        return;
      }
      if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
        inv_d23 = 1 / (w3e23 + d23_2);
        t2.a = w3e23 * inv_d23;
        t3.a = d23_2 * inv_d23;
        this.count = 2;
        t1.setFrom$1(t3);
        return;
      }
      inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
      t1.a = d123_1 * inv_d123;
      t2.a = d123_2 * inv_d123;
      t3.a = d123_3 * inv_d123;
      this.count = 3;
    },
    Simplex$0: function() {
      var t1 = this.vertices;
      t1[0] = this.v1;
      t1[1] = this.v2;
      t1[2] = this.v3;
    }
  },
  SimplexCache: {
    "^": "Object;metric<,count<,indexA<,indexB<",
    setFrom$1: function(sc) {
      var t1, t2, t3;
      t1 = this.indexA;
      t2 = t1.length;
      t3 = sc.get$indexA();
      C.JSArray_methods.checkMutable$1(t1, "set range");
      H.IterableMixinWorkaround_setRangeList(t1, 0, t2, t3, 0);
      t3 = this.indexB;
      t2 = t3.length;
      t1 = sc.get$indexB();
      C.JSArray_methods.checkMutable$1(t3, "set range");
      H.IterableMixinWorkaround_setRangeList(t3, 0, t2, t1, 0);
      this.metric = sc.get$metric();
      this.count = sc.get$count();
    },
    static: {SimplexCache$: function() {
        return new V.SimplexCache(0, 0, P.List_List$generate(3, new V.SimplexCache_closure(), true, P.$int), P.List_List$generate(3, new V.SimplexCache_closure0(), true, P.$int));
      }}
  },
  SimplexCache_closure: {
    "^": "Closure:44;",
    call$1: function(i) {
      return 2147483647;
    }
  },
  SimplexCache_closure0: {
    "^": "Closure:44;",
    call$1: function(i) {
      return 2147483647;
    }
  },
  SimplexVertex: {
    "^": "Object;wA<,wB<,w<,a*,indexA@,indexB@",
    setFrom$1: function(sv) {
      this.wA.setFrom$1(sv.get$wA());
      this.wB.setFrom$1(sv.get$wB());
      this.w.setFrom$1(sv.get$w());
      this.a = J.get$a$x(sv);
      this.indexA = sv.get$indexA();
      this.indexB = sv.get$indexB();
    },
    toString$0: function(_) {
      return "wA: " + this.wA.toString$0(0) + ", wB: " + this.wB.toString$0(0) + ", w: " + this.w.toString$0(0);
    },
    static: {SimplexVertex$: function() {
        return new V.SimplexVertex(new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), 0, 0, 0);
      }}
  },
  TimeOfImpact: {
    "^": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA,sweepB,pool",
    timeOfImpact$2: function(output, input) {
      var t1, proxyA, proxyB, t2, tMax, target, t3, t4, t5, t6, t7, t8, t9, t10, t11, iter, t12, done, t20, pushBackIter, s2, s1, a2, a1, rootIterCount, t, s, t13;
      t1 = $.TimeOfImpact_toiCalls;
      if (typeof t1 !== "number")
        return t1.$add();
      $.TimeOfImpact_toiCalls = t1 + 1;
      output.state = 0;
      output.t = input.tMax;
      proxyA = input.proxyA;
      proxyB = input.proxyB;
      t1 = this.sweepA;
      t1.setFrom$1(input.sweepA);
      t2 = this.sweepB;
      t2.setFrom$1(input.sweepB);
      t1.normalize$0();
      t2.normalize$0();
      tMax = input.tMax;
      target = P.max(0.005, proxyA.radius + proxyB.radius - 0.015);
      t3 = this.cache;
      t3.count = 0;
      t4 = this.distanceInput;
      t4.proxyA = proxyA;
      t4.proxyB = proxyB;
      t4.useRadii = false;
      for (t5 = this.fcn, t6 = this.indexes, t7 = this.distanceOutput, t8 = target + 0.00125, t9 = this.xfA, t10 = this.xfB, t11 = 0, iter = 0; true;) {
        t1.getTransform$2(t9, t11);
        t2.getTransform$2(t10, t11);
        t4.transformA = t9;
        t4.transformB = t10;
        this.pool.distance.distance$3(t7, t3, t4);
        t12 = t7.distance;
        if (typeof t12 !== "number")
          return t12.$le();
        if (t12 <= 0) {
          output.state = 2;
          output.t = 0;
          break;
        }
        if (t12 < t8) {
          output.state = 3;
          output.t = t11;
          break;
        }
        t5.initialize$6(0, t3, proxyA, t1, proxyB, t2, t11);
        t12 = target - 0.00125;
        t20 = tMax;
        pushBackIter = 0;
        while (true) {
          if (!true) {
            done = false;
            break;
          }
          s2 = t5.findMinSeparation$2(t6, t20);
          if (s2 > t8) {
            output.state = 4;
            output.t = tMax;
            done = true;
            break;
          }
          if (s2 > t12) {
            t11 = t20;
            done = false;
            break;
          }
          s1 = t5.evaluate$3(t6[0], t6[1], t11);
          if (s1 < t12) {
            output.state = 1;
            output.t = t11;
            done = true;
            break;
          }
          if (s1 <= t8) {
            output.state = 3;
            output.t = t11;
            done = true;
            break;
          }
          for (a2 = t20, a1 = t11, rootIterCount = 0; true;) {
            t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
            s = t5.evaluate$3(t6[0], t6[1], t);
            if (Math.abs(s - target) < 0.00125) {
              t20 = t;
              break;
            }
            if (s > target) {
              a1 = t;
              s1 = s;
            } else {
              a2 = t;
              s2 = s;
            }
            ++rootIterCount;
            t13 = $.TimeOfImpact_toiRootIters;
            if (typeof t13 !== "number")
              return t13.$add();
            $.TimeOfImpact_toiRootIters = t13 + 1;
            if (rootIterCount === 50)
              break;
          }
          $.TimeOfImpact_toiMaxRootIters = P.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
          ++pushBackIter;
          if (pushBackIter === 12) {
            done = false;
            break;
          }
        }
        ++iter;
        t12 = $.TimeOfImpact_toiIters;
        if (typeof t12 !== "number")
          return t12.$add();
        $.TimeOfImpact_toiIters = t12 + 1;
        if (done)
          break;
        if (iter === 1000) {
          output.state = 1;
          output.t = t11;
          break;
        }
      }
      $.TimeOfImpact_toiMaxIters = P.max($.TimeOfImpact_toiMaxIters, iter);
    },
    TimeOfImpact$_construct$1: function(argPool) {
      var t1 = this.indexes;
      t1[0] = 0;
      t1[1] = 0;
      $.TimeOfImpact_toiCalls = 0;
      $.TimeOfImpact_toiIters = 0;
      $.TimeOfImpact_toiMaxIters = 0;
      $.TimeOfImpact_toiRootIters = 0;
      $.TimeOfImpact_toiMaxRootIters = 0;
    },
    static: {"^": "TimeOfImpact_MAX_ITERATIONS,TimeOfImpact_toiCalls,TimeOfImpact_toiIters,TimeOfImpact_toiMaxIters,TimeOfImpact_toiRootIters,TimeOfImpact_toiMaxRootIters"}
  },
  SeparationFunction: {
    "^": "Object;proxyA@,proxyB@,type*,localPoint<,axis,sweepA,sweepB,localPointA,localPointB,pointA,pointB,localPointA1,localPointA2,normal<,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
    initialize$6: function(_, cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
      var count, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, s;
      this.proxyA = argProxyA;
      this.proxyB = argProxyB;
      count = cache.count;
      this.sweepA = argSweepA;
      this.sweepB = argSweepB;
      t2 = this.xfa;
      argSweepA.getTransform$2(t2, t1);
      t3 = this.xfb;
      this.sweepB.getTransform$2(t3, t1);
      if (J.$eq(count, 1)) {
        this.type = 0;
        t1 = this.localPointA;
        t4 = this.proxyA.get$vertices();
        t5 = cache.indexA;
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (t5 >>> 0 !== t5 || t5 >= t4.length)
          return H.ioore(t4, t5);
        t1.setFrom$1(t4[t5]);
        t5 = this.localPointB;
        t4 = this.proxyB.get$vertices();
        t6 = cache.indexB;
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t6 = t6[0];
        if (t6 >>> 0 !== t6 || t6 >= t4.length)
          return H.ioore(t4, t6);
        t5.setFrom$1(t4[t6]);
        t6 = this.pointA;
        V.Transform_mulToOut(t2, t1, t6);
        t1 = this.pointB;
        V.Transform_mulToOut(t3, t5, t1);
        t5 = this.axis;
        t5.setFrom$1(t1).sub$1(t6);
        return t5.normalizeLength$0();
      } else {
        t1 = cache.indexA;
        t4 = t1.length;
        if (0 >= t4)
          return H.ioore(t1, 0);
        t5 = t1[0];
        if (1 >= t4)
          return H.ioore(t1, 1);
        t4 = cache.indexB;
        t6 = this.pointA;
        t7 = this.localPoint;
        t8 = this.normal;
        t9 = this.axis;
        t10 = this.pointB;
        t11 = this.temp;
        if (J.$eq(t5, t1[1])) {
          this.type = 2;
          t5 = this.localPointB1;
          t12 = this.proxyB.get$vertices();
          if (0 >= t4.length)
            return H.ioore(t4, 0);
          t13 = t4[0];
          if (t13 >>> 0 !== t13 || t13 >= t12.length)
            return H.ioore(t12, t13);
          t5.setFrom$1(t12[t13]);
          t13 = this.localPointB2;
          t12 = this.proxyB.get$vertices();
          if (1 >= t4.length)
            return H.ioore(t4, 1);
          t4 = t4[1];
          if (t4 >>> 0 !== t4 || t4 >= t12.length)
            return H.ioore(t12, t4);
          t13.setFrom$1(t12[t4]);
          t11.setFrom$1(t13).sub$1(t5);
          V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
          t9.normalize$0();
          t3.rotation.transformed$2(t9, t8);
          t7.setFrom$1(t5);
          t7.add$1(0, t13);
          t7.scale$1(0, 0.5);
          V.Transform_mulToOut(t3, t7, t10);
          t7 = this.localPointA;
          t3 = this.proxyA.get$vertices();
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = t1[0];
          if (t1 >>> 0 !== t1 || t1 >= t3.length)
            return H.ioore(t3, t1);
          t7.setFrom$1(t3[t1]);
          V.Transform_mulToOut(t2, t7, t6);
          t11.setFrom$1(t6);
          t11.sub$1(t10);
          s = t11.dot$1(t8);
          if (s < 0) {
            t9.negate$0();
            s = -s;
          }
          return s;
        } else {
          this.type = 1;
          t5 = this.localPointA1;
          t12 = this.proxyA.get$vertices();
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t13 = t1[0];
          if (t13 >>> 0 !== t13 || t13 >= t12.length)
            return H.ioore(t12, t13);
          t5.setFrom$1(t12[t13]);
          t13 = this.localPointA2;
          t12 = this.proxyA.get$vertices();
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          t1 = t1[1];
          if (t1 >>> 0 !== t1 || t1 >= t12.length)
            return H.ioore(t12, t1);
          t13.setFrom$1(t12[t1]);
          t11.setFrom$1(t13);
          t11.sub$1(t5);
          V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
          t9.normalize$0();
          t2.rotation.transformed$2(t9, t8);
          t7.setFrom$1(t5);
          t7.add$1(0, t13);
          t7.scale$1(0, 0.5);
          V.Transform_mulToOut(t2, t7, t6);
          t7 = this.localPointB;
          t2 = this.proxyB.get$vertices();
          if (0 >= t4.length)
            return H.ioore(t4, 0);
          t4 = t4[0];
          if (t4 >>> 0 !== t4 || t4 >= t2.length)
            return H.ioore(t2, t4);
          t7.setFrom$1(t2[t4]);
          V.Transform_mulToOut(t3, t7, t10);
          t11.setFrom$1(t10);
          t11.sub$1(t6);
          s = t11.dot$1(t8);
          if (s < 0) {
            t9.negate$0();
            s = -s;
          }
          return s;
        }
      }
    },
    findMinSeparation$2: function(indexes, t) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.xfa;
      this.sweepA.getTransform$2(t1, t);
      t2 = this.xfb;
      this.sweepB.getTransform$2(t2, t);
      switch (this.type) {
        case 0:
          t3 = this.axis;
          t4 = this.axisA;
          t1.rotation.transposed$0().transformed$2(t3, t4);
          t5 = this.axisB;
          t2.rotation.transposed$0().transformed$2(t3.negate$0(), t5);
          t3.negate$0();
          indexes[0] = this.proxyA.getSupport$1(t4);
          indexes[1] = this.proxyB.getSupport$1(t5);
          t5 = this.localPointA;
          t4 = this.proxyA.get$vertices();
          t6 = indexes[0];
          if (t6 >>> 0 !== t6 || t6 >= t4.length)
            return H.ioore(t4, t6);
          t5.setFrom$1(t4[t6]);
          t6 = this.localPointB;
          t4 = this.proxyB.get$vertices();
          t7 = indexes[1];
          if (t7 >>> 0 !== t7 || t7 >= t4.length)
            return H.ioore(t4, t7);
          t6.setFrom$1(t4[t7]);
          t7 = this.pointA;
          V.Transform_mulToOut(t1, t5, t7);
          t5 = this.pointB;
          V.Transform_mulToOut(t2, t6, t5);
          return t5.sub$1(t7).dot$1(t3);
        case 1:
          t3 = this.normal;
          t1.rotation.transformed$2(this.axis, t3);
          t4 = this.pointA;
          V.Transform_mulToOut(t1, this.localPoint, t4);
          t3.negate$0();
          t1 = this.axisB;
          t2.rotation.transposed$0().transformed$2(t3, t1);
          t3.negate$0();
          indexes[0] = -1;
          indexes[1] = this.proxyB.getSupport$1(t1);
          t1 = this.localPointB;
          t5 = this.proxyB.get$vertices();
          t6 = indexes[1];
          if (t6 >>> 0 !== t6 || t6 >= t5.length)
            return H.ioore(t5, t6);
          t1.setFrom$1(t5[t6]);
          t6 = this.pointB;
          V.Transform_mulToOut(t2, t1, t6);
          return t6.sub$1(t4).dot$1(t3);
        case 2:
          t3 = this.normal;
          t2.rotation.transformed$2(this.axis, t3);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, this.localPoint, t4);
          t2 = this.axisA;
          t1.rotation.transposed$0().transformed$2(t3.negate$0(), t2);
          t3.negate$0();
          indexes[1] = -1;
          indexes[0] = this.proxyA.getSupport$1(t2);
          t2 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          t6 = indexes[0];
          if (t6 >>> 0 !== t6 || t6 >= t5.length)
            return H.ioore(t5, t6);
          t2.setFrom$1(t5[t6]);
          t6 = this.pointA;
          V.Transform_mulToOut(t1, t2, t6);
          return t6.sub$1(t4).dot$1(t3);
        default:
          indexes[0] = -1;
          indexes[1] = -1;
          return 0;
      }
    },
    evaluate$3: function(indexA, indexB, t) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.xfa;
      this.sweepA.getTransform$2(t1, t);
      t2 = this.xfb;
      this.sweepB.getTransform$2(t2, t);
      switch (this.type) {
        case 0:
          t3 = this.axis;
          t1.rotation.transposed$0().transformed$2(t3, this.axisA);
          t2.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisB);
          t3.negate$0();
          t4 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          if (indexA >>> 0 !== indexA || indexA >= t5.length)
            return H.ioore(t5, indexA);
          t4.setFrom$1(t5[indexA]);
          t5 = this.localPointB;
          t6 = this.proxyB.get$vertices();
          if (indexB >>> 0 !== indexB || indexB >= t6.length)
            return H.ioore(t6, indexB);
          t5.setFrom$1(t6[indexB]);
          t6 = this.pointA;
          V.Transform_mulToOut(t1, t4, t6);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, t5, t4);
          return t4.sub$1(t6).dot$1(t3);
        case 1:
          t3 = this.normal;
          t1.rotation.transformed$2(this.axis, t3);
          t4 = this.pointA;
          V.Transform_mulToOut(t1, this.localPoint, t4);
          t3.negate$0();
          t2.rotation.transposed$0().transformed$2(t3, this.axisB);
          t3.negate$0();
          t1 = this.localPointB;
          t5 = this.proxyB.get$vertices();
          if (indexB >>> 0 !== indexB || indexB >= t5.length)
            return H.ioore(t5, indexB);
          t1.setFrom$1(t5[indexB]);
          t5 = this.pointB;
          V.Transform_mulToOut(t2, t1, t5);
          return t5.sub$1(t4).dot$1(t3);
        case 2:
          t3 = this.normal;
          t2.rotation.transformed$2(this.axis, t3);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, this.localPoint, t4);
          t1.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisA);
          t3.negate$0();
          t2 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          if (indexA >>> 0 !== indexA || indexA >= t5.length)
            return H.ioore(t5, indexA);
          t2.setFrom$1(t5[indexA]);
          t5 = this.pointA;
          V.Transform_mulToOut(t1, t2, t5);
          return t5.sub$1(t4).dot$1(t3);
        default:
          return 0;
      }
    }
  },
  TimeOfImpactInput: {
    "^": "Object;proxyA<,proxyB<,sweepA,sweepB,tMax"
  },
  TimeOfImpactOutput: {
    "^": "Object;state,t"
  },
  WorldManifold: {
    "^": "Object;normal<,points>,pool3,pool4",
    initialize$5: function(_, manifold, xfA, radiusA, xfB, radiusB) {
      var pointA, pointB, t1, t2, t3, t4, t5, t6, t7, t8, t9, i, t10, t11, t12, scalar;
      switch (manifold.type) {
        case 0:
          pointA = this.pool3;
          pointB = this.pool4;
          t1 = this.normal;
          t2 = t1.storage;
          t2[0] = 1;
          t2[1] = 0;
          t3 = xfA.position.storage;
          t4 = t3[0];
          t5 = xfA.rotation.storage;
          t6 = t5[0];
          t7 = manifold.localPoint.storage;
          t8 = pointA.storage;
          t8[0] = t4 + t6 * t7[0] + t5[2] * t7[1];
          t8[1] = t3[1] + t5[1] * t7[0] + t5[3] * t7[1];
          t7 = xfB.position.storage;
          t5 = t7[0];
          t3 = xfB.rotation.storage;
          t6 = t3[0];
          t4 = manifold.points;
          t9 = pointB.storage;
          t9[0] = t5 + t6 * t4[0].get$localPoint().storage[0] + t3[2] * t4[0].get$localPoint().storage[1];
          t9[1] = t7[1] + t3[1] * t4[0].get$localPoint().storage[0] + t3[3] * t4[0].get$localPoint().storage[1];
          if (V.MathBox_distanceSquared(pointA, pointB) > 1.4208639999999999e-14) {
            t2[0] = t9[0] - t8[0];
            t2[1] = t9[1] - t8[1];
            t1.normalize$0();
          }
          t1 = t2[0];
          t3 = t8[0];
          t2 = t2[1];
          t8 = t8[1];
          t4 = t9[0];
          t9 = t9[1];
          t5 = this.points;
          if (0 >= t5.length)
            return H.ioore(t5, 0);
          J.set$x$x(t5[0], (t1 * radiusA + t3 + (-t1 * radiusB + t4)) * 0.5);
          if (0 >= t5.length)
            return H.ioore(t5, 0);
          J.set$y$x(t5[0], (t2 * radiusA + t8 + (-t2 * radiusB + t9)) * 0.5);
          return;
        case 1:
          t1 = xfA.rotation.storage;
          t2 = t1[0];
          t3 = manifold.localNormal.storage;
          t4 = this.normal.storage;
          t4[0] = t2 * t3[0] + t1[2] * t3[1];
          t4[1] = t1[1] * t3[0] + t1[3] * t3[1];
          t3 = xfA.position.storage;
          t2 = t3[0];
          t5 = t1[0];
          t6 = manifold.localPoint.storage;
          t7 = this.pool3.storage;
          t7[0] = t2 + t5 * t6[0] + t1[2] * t6[1];
          t7[1] = t3[1] + t1[1] * t6[0] + t1[3] * t6[1];
          t1 = xfB.position.storage;
          t2 = xfB.rotation.storage;
          t3 = this.pool4.storage;
          t5 = this.points;
          i = 0;
          while (true) {
            t6 = manifold.pointCount;
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (!(i < t6))
              break;
            t6 = t1[0];
            t8 = t2[0];
            t9 = manifold.points;
            if (i >= 2)
              return H.ioore(t9, i);
            t3[0] = t6 + t8 * t9[i].get$localPoint().storage[0] + t2[2] * t9[i].get$localPoint().storage[1];
            t3[1] = t1[1] + t2[1] * t9[i].get$localPoint().storage[0] + t2[3] * t9[i].get$localPoint().storage[1];
            t9 = t3[0];
            t8 = t7[0];
            t6 = t4[0];
            t10 = t3[1];
            t11 = t7[1];
            t12 = t4[1];
            scalar = radiusA - ((t9 - t8) * t6 + (t10 - t11) * t12);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$x$x(t5[i], (t6 * scalar + t9 + (-t6 * radiusB + t9)) * 0.5);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$y$x(t5[i], (t12 * scalar + t10 + (-t12 * radiusB + t10)) * 0.5);
            ++i;
          }
          return;
        case 2:
          t1 = xfB.rotation.storage;
          t2 = t1[0];
          t3 = manifold.localNormal.storage;
          t4 = this.normal.storage;
          t4[0] = t2 * t3[0] + t1[2] * t3[1];
          t4[1] = t1[1] * t3[0] + t1[3] * t3[1];
          t3 = xfB.position.storage;
          t2 = manifold.localPoint.storage;
          t5 = this.pool3.storage;
          t5[0] = t3[0] + t1[0] * t2[0] + t1[2] * t2[1];
          t5[1] = t3[1] + t1[1] * t2[0] + t1[3] * t2[1];
          t1 = xfA.position.storage;
          t2 = xfA.rotation.storage;
          t3 = this.pool4.storage;
          t6 = this.points;
          i = 0;
          while (true) {
            t7 = manifold.pointCount;
            if (typeof t7 !== "number")
              return H.iae(t7);
            if (!(i < t7))
              break;
            t7 = t1[0];
            t8 = t2[0];
            t9 = manifold.points;
            if (i >= 2)
              return H.ioore(t9, i);
            t3[0] = t7 + t8 * t9[i].get$localPoint().storage[0] + t2[2] * t9[i].get$localPoint().storage[1];
            t3[1] = t1[1] + t2[1] * t9[i].get$localPoint().storage[0] + t2[3] * t9[i].get$localPoint().storage[1];
            t9 = t3[0];
            t8 = t5[0];
            t7 = t4[0];
            t10 = t3[1];
            t11 = t5[1];
            t12 = t4[1];
            scalar = radiusB - ((t9 - t8) * t7 + (t10 - t11) * t12);
            if (i >= t6.length)
              return H.ioore(t6, i);
            J.set$x$x(t6[i], (-t7 * radiusA + t9 + (t7 * scalar + t9)) * 0.5);
            if (i >= t6.length)
              return H.ioore(t6, i);
            J.set$y$x(t6[i], (-t12 * radiusA + t10 + (t12 * scalar + t10)) * 0.5);
            ++i;
          }
          t4[0] = -t4[0];
          t4[1] = -t4[1];
          break;
      }
    },
    static: {WorldManifold$: function() {
        var t1, t2, t3;
        t1 = new Float32Array(H._checkLength(2));
        t2 = new Float32Array(H._checkLength(2));
        t3 = new Float32Array(H._checkLength(2));
        return new V.WorldManifold(new T.Vector2(t1), P.List_List$generate(2, new V.WorldManifold_closure(), true, T.Vector2), new T.Vector2(t2), new T.Vector2(t3));
      }}
  },
  WorldManifold_closure: {
    "^": "Closure:44;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(H._checkLength(2)));
    }
  },
  Color3: {
    "^": "Object;x*,y*,z",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isColor3 && J.$eq(this.x, other.x) && this.y === other.y && this.z === other.z;
    },
    $isColor3: true
  },
  Sweep: {
    "^": "Object;localCenter<,centerZero<,center<,angleZero<,angle<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.localCenter === other.get$localCenter() && this.centerZero === other.get$centerZero() && this.center === other.get$center() && this.angleZero === other.get$angleZero() && this.angle === other.get$angle();
    },
    setFrom$1: function(other) {
      this.localCenter.setFrom$1(other.get$localCenter());
      this.centerZero.setFrom$1(other.get$centerZero());
      this.center.setFrom$1(other.get$center());
      this.angleZero = other.get$angleZero();
      this.angle = other.get$angle();
    },
    normalize$0: function() {
      var d = 6.283185307179586 * C.JSNumber_methods.toInt$0(Math.floor(this.angleZero / 6.283185307179586));
      this.angleZero -= d;
      this.angle -= d;
    },
    getTransform$2: function(xf, alpha) {
      var t1, t2, t3, t4;
      t1 = 1 - alpha;
      t2 = this.centerZero.storage;
      t3 = this.center.storage;
      t4 = xf.position.storage;
      t4[0] = t1 * t2[0] + alpha * t3[0];
      t4[1] = t1 * t2[1] + alpha * t3[1];
      t3 = xf.rotation;
      t3.setRotation$1(t1 * this.angleZero + alpha * this.angle);
      t3 = t3.storage;
      t1 = this.localCenter.storage;
      t4[0] = t4[0] - (t3[0] * t1[0] + t3[2] * t1[1]);
      t4[1] = t4[1] - (t3[1] * t1[0] + t3[3] * t1[1]);
    },
    advance$1: function(time) {
      var t1, t2, t3;
      t1 = 1 - time;
      t2 = this.centerZero.storage;
      t3 = this.center.storage;
      t2[0] = t1 * t2[0] + time * t3[0];
      t2[1] = t1 * t2[1] + time * t3[1];
      this.angleZero = t1 * this.angleZero + time * this.angle;
    },
    static: {Sweep$: function() {
        return new V.Sweep(new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), 0, 0);
      }}
  },
  Transform: {
    "^": "Object;position>,rotation<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.position === J.get$position$x(other) && this.rotation === other.get$rotation();
    },
    setFrom$1: function(other) {
      this.position.setFrom$1(J.get$position$x(other));
      this.rotation.setFrom$1(other.get$rotation());
    },
    static: {Transform$: function() {
        return new V.Transform(new T.Vector2(new Float32Array(H._checkLength(2))), new T.Matrix2(new Float32Array(H._checkLength(4))));
      }, Transform_mulToOut: function(transform, vector, out) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
        t1 = transform.position.storage;
        t2 = t1[1];
        t3 = transform.rotation.storage;
        t4 = t3[1];
        t5 = J.getInterceptor$x(vector);
        t6 = t5.get$x(vector);
        if (typeof t6 !== "number")
          return H.iae(t6);
        t7 = t3[3];
        t8 = t5.get$y(vector);
        if (typeof t8 !== "number")
          return H.iae(t8);
        t1 = t1[0];
        t9 = t3[0];
        t10 = t5.get$x(vector);
        if (typeof t10 !== "number")
          return H.iae(t10);
        t3 = t3[2];
        t5 = t5.get$y(vector);
        if (typeof t5 !== "number")
          return H.iae(t5);
        t11 = J.getInterceptor$x(out);
        t11.set$x(out, t1 + t9 * t10 + t3 * t5);
        t11.set$y(out, t2 + t4 * t6 + t7 * t8);
      }}
  },
  ViewportTransform: {
    "^": "Object;center<",
    get$translation: function() {
      var result = new T.Vector2(new Float32Array(H._checkLength(2)));
      result.setFrom$1(this.extents);
      result.sub$1(this.center);
      return result;
    },
    getWorldToScreen$2: function(argWorld, argScreen) {
      var t1, t2, gridCorrectedX;
      t1 = J.getInterceptor$x(argWorld);
      t2 = this.extents.storage;
      gridCorrectedX = J.$add$ns(J.$mul$ns(t1.get$x(argWorld), this.scale), t2[0]);
      t2 = t2[1];
      t1 = J.$mul$ns(t1.get$y(argWorld), this.scale);
      argScreen.setValues$2(J.$add$ns(gridCorrectedX, this.get$translation().storage[0]), t2 - t1 + -this.get$translation().storage[1]);
    }
  },
  Body: {
    "^": "Object;world,flags@,contactList@,sleepTime@,userData@,_linearVelocity,_angularVelocity,mass<,invMass<,next@,prev@,fixtureList@,fixtureCount?,jointList@,_force<,_torque@,_inertia,invInertia<,linearDamping<,angularDamping<,_type,islandIndex?,originTransform<,sweep<,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
    createFixture$1: function(def) {
      var fixture, t1;
      fixture = V.Fixture$();
      fixture.create$2(this, def);
      t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      if ((t1 & 32) === 32)
        fixture.createProxy$2(this.world._contactManager.broadPhase, this.originTransform);
      fixture.next = this.fixtureList;
      this.fixtureList = fixture;
      ++this.fixtureCount;
      fixture.body = this;
      t1 = fixture.density;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        this.resetMassData$0();
      this.world._flags |= 1;
      return fixture;
    },
    setTransform$2: function(_, argPosition, argAngle) {
      var t1, t2, t3, broadPhase, f;
      if ((this.world._flags & 2) === 2)
        return;
      t1 = this.originTransform;
      t1.rotation.setRotation$1(argAngle);
      t1.position.setFrom$1(argPosition);
      t2 = this.sweep;
      t3 = t2.centerZero;
      V.Transform_mulToOut(t1, t2.localCenter, t3);
      t2.center.setFrom$1(t3);
      t2.angleZero = argAngle;
      t2.angle = argAngle;
      broadPhase = this.world._contactManager.broadPhase;
      for (f = this.fixtureList; f != null; f = f.get$next())
        f.synchronize$3(broadPhase, t1, t1);
      t1 = this.world._contactManager;
      t1.broadPhase.updatePairs$1(t1.get$_addPair());
    },
    get$position: function(_) {
      return this.originTransform.position;
    },
    get$angle: function() {
      return this.sweep.angle;
    },
    get$worldCenter: function() {
      return this.sweep.center;
    },
    get$localCenter: function() {
      return this.sweep.localCenter;
    },
    get$linearVelocity: function() {
      return this._linearVelocity;
    },
    get$angularVelocity: function() {
      return this._angularVelocity;
    },
    set$angularVelocity: function(w) {
      if (this._type !== 0) {
        if (w * w > 0)
          this.set$awake(true);
        this._angularVelocity = w;
      }
    },
    applyForce$2: function(force, point) {
      var t1, t2, t3;
      if (this._type !== 2)
        return;
      this.set$awake(true);
      t1 = this._force.storage;
      t2 = force.storage;
      t1[0] = t1[0] + t2[0];
      t1[1] = t1[1] + t2[1];
      t1 = point.storage;
      t3 = this.sweep.center.storage;
      this._torque = this._torque + ((t1[0] - t3[0]) * t2[1] - (t1[1] - t3[1]) * t2[0]);
    },
    get$inertia: function() {
      var t1, t2, t3, t4;
      t1 = this._inertia;
      t2 = this.mass;
      t3 = this.sweep.localCenter.storage;
      t4 = t3[0];
      t3 = t3[1];
      return t1 + t2 * (t4 * t4 + t3 * t3);
    },
    getMassData$1: function(data) {
      var t1, lc, t2;
      t1 = this.mass;
      data.mass = t1;
      lc = this.sweep.localCenter;
      data.inertia = this._inertia + t1 * lc.get$length2();
      t1 = lc.storage;
      t2 = data.center.storage;
      t2[0] = t1[0];
      t2[1] = t1[1];
    },
    resetMassData$0: function() {
      var t1, t2, t3, massData, f, t4, t5, temp;
      this.mass = 0;
      this.invMass = 0;
      this._inertia = 0;
      this.invInertia = 0;
      t1 = this.sweep;
      t2 = t1.localCenter;
      t2.setZero$0();
      t3 = this._type;
      if (t3 === 0 || t3 === 1) {
        t2 = this.originTransform.position;
        t1.center.setFrom$1(t2);
        t1.centerZero.setFrom$1(t2);
        return;
      }
      t3 = this.tempCenter;
      t3.setZero$0();
      massData = this._pmd;
      for (f = this.fixtureList; f != null; f = f.get$next()) {
        if (f.get$density() === 0)
          continue;
        f.getMassData$1(massData);
        this.mass = this.mass + massData.mass;
        t4 = massData.center;
        t5 = new Float32Array(2);
        t4 = t4.storage;
        t5[1] = t4[1];
        t5[0] = t4[0];
        t4 = massData.mass;
        t5[1] = t5[1] * t4;
        t5[0] = t5[0] * t4;
        t3.add$1(0, new T.Vector2(t5));
        this._inertia = this._inertia + massData.inertia;
      }
      t4 = this.mass;
      if (t4 > 0) {
        t4 = 1 / t4;
        this.invMass = t4;
        t3.scale$1(0, t4);
      } else {
        this.mass = 1;
        this.invMass = 1;
      }
      t4 = this._inertia;
      if (t4 > 0) {
        t5 = this.flags;
        if (typeof t5 !== "number")
          return t5.$and();
        t5 = (t5 & 16) === 0;
      } else
        t5 = false;
      if (t5) {
        t4 -= this.mass * t3.dot$1(t3);
        this._inertia = t4;
        this.invInertia = 1 / t4;
      } else {
        this._inertia = 0;
        this.invInertia = 0;
      }
      t4 = this.oldCenter;
      t5 = t1.center;
      t4.setFrom$1(t5);
      t2.setFrom$1(t3);
      t1 = t1.centerZero;
      V.Transform_mulToOut(this.originTransform, t2, t1);
      t5.setFrom$1(t1);
      temp = new T.Vector2(new Float32Array(H._checkLength(2)));
      temp.setFrom$1(t5);
      temp.sub$1(t4);
      V.Vector2_crossVectorAndNumToOut(temp, -this._angularVelocity, temp);
      this._linearVelocity.add$1(0, temp);
    },
    get$type: function(_) {
      return this._type;
    },
    set$type: function(_, otherType) {
      var t1, ce;
      t1 = this._type;
      if (t1 == null ? otherType == null : t1 === otherType)
        return;
      this._type = otherType;
      this.resetMassData$0();
      if (this._type === 0) {
        this._linearVelocity.setZero$0();
        this._angularVelocity = 0;
      }
      this.set$awake(true);
      this._force.setZero$0();
      this._torque = 0;
      for (ce = this.contactList; ce != null; ce = ce.get$next())
        ce.get$contact().flagForFiltering$0();
    },
    get$bullet: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 8) === 8;
    },
    set$awake: function(flag) {
      var t1;
      if (flag) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 2) === 0) {
          this.flags = t1 | 2;
          this.sleepTime = 0;
        }
      } else {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        this.flags = t1 & 4294967293;
        this.sleepTime = 0;
        this._linearVelocity.setZero$0();
        this._angularVelocity = 0;
        this._force.setZero$0();
        this._torque = 0;
      }
    },
    get$awake: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) === 2;
    },
    get$active: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 32) === 32;
    },
    synchronizeFixtures$0: function() {
      var xf1, t1, t2, t3, broadPhase, f;
      xf1 = this._pxf;
      t1 = xf1.rotation;
      t2 = this.sweep;
      t1.setRotation$1(t2.angleZero);
      t3 = xf1.position;
      t1.transformed$2(t2.localCenter, t3);
      t3.scale$1(0, -1);
      t3.add$1(0, t2.centerZero);
      broadPhase = this.world._contactManager.broadPhase;
      for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.get$next())
        f.synchronize$3(broadPhase, xf1, t1);
    },
    synchronizeTransform$0: function() {
      var t1, c, s, t, r, t2, t3, t4;
      t1 = this.sweep;
      c = Math.cos(H.checkNum(t1.angle));
      s = Math.sin(H.checkNum(t1.angle));
      t = this.originTransform;
      r = t.rotation;
      r.setValues$4(c, s, -s, c);
      t2 = r.storage;
      t3 = t1.localCenter.storage;
      t1 = t1.center.storage;
      t4 = t.position.storage;
      t4[0] = (t2[0] * t3[0] + t2[2] * t3[1]) * -1 + t1[0];
      t4[1] = (t2[1] * t3[0] + t2[3] * t3[1]) * -1 + t1[1];
    },
    shouldCollide$1: function(other) {
      return !(this._type !== 2 && other._type !== 2);
    },
    advance$1: function(t) {
      var t1 = this.sweep;
      t1.advance$1(t);
      t1.center.setFrom$1(t1.centerZero);
      t1.angle = t1.angleZero;
      this.synchronizeTransform$0();
    },
    Body$2: function(bd, world) {
      var t1, t2, t3, t4;
      if (bd.bullet) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 8;
      }
      if (bd.fixedRotation) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 16;
      }
      if (bd.allowSleep) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 4;
      }
      if (bd.awake) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 2;
      }
      if (bd.active) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 32;
      }
      t1 = this.originTransform;
      t1.position.setFrom$1(bd.position);
      t1.rotation.setRotation$1(bd.angle);
      t2 = this.sweep;
      t3 = t2.localCenter;
      t3.setZero$0();
      t4 = t2.centerZero;
      V.Transform_mulToOut(t1, t3, t4);
      t2.center.setFrom$1(t4);
      t4 = bd.angle;
      t2.angle = t4;
      t2.angleZero = t4;
      if (this._type === 2) {
        this.mass = 1;
        this.invMass = 1;
      } else {
        this.mass = 0;
        this.invMass = 0;
      }
    },
    static: {"^": "Body_ISLAND_FLAG,Body_AWAKE_FLAG,Body_AUTO_SLEEP_FLAG,Body_BULLET_FLAG,Body_FIXED_ROTATION_FLAG,Body_ACTIVE_FLAG,Body_TO_I_FLAG"}
  },
  BodyDef: {
    "^": "Object;type*,angle<,userData@,position>,linearVelocity<,angularVelocity@,fixedRotation,isSleeping,bullet<,allowSleep,linearDamping<,angularDamping<,awake@,active<",
    static: {BodyDef$: function() {
        return new V.BodyDef(0, 0, null, new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), 0, false, null, false, true, 0, 0, true, true);
      }}
  },
  ContactManager: {
    "^": "Object;broadPhase,contactList@,contactCount,contactFilter,contactListener,pool",
    _addPair$2: [function(fixtureA, fixtureB) {
      var bodyA, bodyB, edge, t1, fA, fB, c, t2;
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      if (bodyA == null ? bodyB == null : bodyA === bodyB)
        return;
      edge = bodyB.contactList;
      for (; edge != null;) {
        t1 = edge.get$other();
        if (t1 == null ? bodyA == null : t1 === bodyA) {
          fA = edge.get$contact().get$fixtureA();
          fB = edge.get$contact().get$fixtureB();
          t1 = J.getInterceptor(fA);
          if (t1.$eq(fA, fixtureA) && J.$eq(fB, fixtureB))
            return;
          if (t1.$eq(fA, fixtureB) && J.$eq(fB, fixtureA))
            return;
        }
        edge = edge.get$next();
      }
      if (!bodyB.shouldCollide$1(bodyA))
        return;
      if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
        return;
      c = this.pool.popContact$2(fixtureA, fixtureB);
      fixtureA = c.get$fixtureA();
      fixtureB = c.get$fixtureB();
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      c.set$prev(null);
      c.set$next(this.contactList);
      t1 = this.contactList;
      if (t1 != null)
        t1.set$prev(c);
      this.contactList = c;
      c.get$edge1().contact = c;
      c.get$edge1().other = bodyB;
      c.get$edge1().prev = null;
      t1 = c.get$edge1();
      t2 = bodyA.contactList;
      t1.next = t2;
      if (t2 != null)
        t2.set$prev(c.get$edge1());
      bodyA.contactList = c.get$edge1();
      c.get$edge2().contact = c;
      c.get$edge2().other = bodyA;
      c.get$edge2().prev = null;
      t1 = c.get$edge2();
      t2 = bodyB.contactList;
      t1.next = t2;
      if (t2 != null)
        t2.set$prev(c.get$edge2());
      bodyB.contactList = c.get$edge2();
      ++this.contactCount;
    }, "call$2", "get$_addPair", 4, 0, 77],
    destroy$1: function(c) {
      var fixtureA, fixtureB, bodyA, bodyB, t1, type1, type2;
      fixtureA = c.get$fixtureA();
      fixtureB = c.get$fixtureB();
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      if (this.contactListener != null && c.get$touching())
        this.contactListener.endContact$1(c);
      if (c.get$prev() != null)
        c.get$prev().set$next(c.get$next());
      if (c.get$next() != null)
        c.get$next().set$prev(c.get$prev());
      if (J.$eq(c, this.contactList))
        this.contactList = c.get$next();
      if (c.get$edge1().prev != null)
        c.get$edge1().prev.set$next(c.get$edge1().next);
      if (c.get$edge1().next != null)
        c.get$edge1().next.set$prev(c.get$edge1().prev);
      if (c.get$edge1() === bodyA.contactList)
        bodyA.contactList = c.get$edge1().next;
      if (c.get$edge2().prev != null)
        c.get$edge2().prev.set$next(c.get$edge2().next);
      if (c.get$edge2().next != null)
        c.get$edge2().next.set$prev(c.get$edge2().prev);
      if (c.get$edge2() === bodyB.contactList)
        bodyB.contactList = c.get$edge2().next;
      t1 = c.get$manifold().pointCount;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        J.get$body$x(c.get$fixtureA()).set$awake(true);
        J.get$body$x(c.get$fixtureB()).set$awake(true);
      }
      type1 = J.get$type$x(c.get$fixtureA());
      type2 = J.get$type$x(c.get$fixtureB());
      t1 = this.pool._contactStacks;
      if (type1 >>> 0 !== type1 || type1 >= 2)
        return H.ioore(t1, type1);
      t1 = t1[type1];
      t1.length;
      if (type2 >>> 0 !== type2 || type2 >= 2)
        return H.ioore(t1, type2);
      t1[type2].creator.addFirst$1(c);
      --this.contactCount;
    },
    collide$0: function() {
      var c, t1, fixtureA, fixtureB, bodyA, bodyB, t2, c0, proxyIdA, proxyIdB;
      c = this.contactList;
      for (t1 = this.contactFilter; c != null;) {
        fixtureA = c.get$fixtureA();
        fixtureB = c.get$fixtureB();
        bodyA = J.get$body$x(fixtureA);
        bodyB = J.get$body$x(fixtureB);
        t2 = bodyA.flags;
        if (typeof t2 !== "number")
          return t2.$and();
        if ((t2 & 2) !== 2) {
          t2 = bodyB.flags;
          if (typeof t2 !== "number")
            return t2.$and();
          t2 = (t2 & 2) !== 2;
        } else
          t2 = false;
        if (t2) {
          c = c.get$next();
          continue;
        }
        t2 = c.get$flags();
        if (typeof t2 !== "number")
          return t2.$and();
        if ((t2 & 8) === 8) {
          if (bodyB._type !== 2 && bodyA._type !== 2) {
            c0 = c.get$next();
            this.destroy$1(c);
            c = c0;
            continue;
          }
          if (!t1.shouldCollide$2(fixtureA, fixtureB)) {
            c0 = c.get$next();
            this.destroy$1(c);
            c = c0;
            continue;
          }
          t2 = c.get$flags();
          if (typeof t2 !== "number")
            return t2.$and();
          c.set$flags(t2 & 4294967287);
        }
        proxyIdA = fixtureA.get$proxy();
        proxyIdB = fixtureB.get$proxy();
        if (!V.AxisAlignedBox_testOverlap(proxyIdA.get$box(), proxyIdB.get$box())) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        c.update$1(this.contactListener);
        c = c.get$next();
      }
    }
  },
  CircleContact: {
    "^": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      this.pool.collision.collideCircles$5(argManifold, J.get$shape$x(this.fixtureA), xfA, J.get$shape$x(this.fixtureB), xfB);
    }
  },
  Contact: {
    "^": "Object;flags@,prev@,next@,edge1<,edge2<,fixtureA<,fixtureB<,manifold@,toiCount@",
    init$2: function(fixA, fixB) {
      var t1;
      this.flags = 0;
      this.fixtureA = fixA;
      this.fixtureB = fixB;
      this.manifold.pointCount = 0;
      this.prev = null;
      this.next = null;
      t1 = this.edge1;
      t1.contact = null;
      t1.prev = null;
      t1.next = null;
      t1.other = null;
      t1 = this.edge2;
      t1.contact = null;
      t1.prev = null;
      t1.next = null;
      t1.other = null;
      this.toiCount = 0;
    },
    get$touching: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) === 2;
    },
    get$enabled: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) === 4;
    },
    flagForFiltering$0: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$or();
      this.flags = t1 | 8;
    },
    update$1: function(listener) {
      var t1, t2, wasTouching, sensorA, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, t3, t4, t5, touching, i, mp2, id2, j, mp1;
      t1 = this._oldManifold;
      t1.setFrom$1(this.manifold);
      t2 = this.flags;
      if (typeof t2 !== "number")
        return t2.$or();
      t2 |= 4;
      this.flags = t2;
      wasTouching = (t2 & 2) === 2;
      sensorA = this.fixtureA.get$isSensor();
      sensorB = this.fixtureB.get$isSensor();
      sensor = sensorA === true || sensorB === true;
      bodyA = J.get$body$x(this.fixtureA);
      bodyB = J.get$body$x(this.fixtureB);
      xfA = bodyA.originTransform;
      xfB = bodyB.originTransform;
      if (sensor) {
        shapeA = J.get$shape$x(this.fixtureA);
        shapeB = J.get$shape$x(this.fixtureB);
        t2 = this.pool.collision;
        t3 = t2.input;
        t3.proxyA.setFromShape$1(shapeA);
        t3.proxyB.setFromShape$1(shapeB);
        t4 = t3.transformA;
        t4.position.setFrom$1(xfA.position);
        t4.rotation.setFrom$1(xfA.rotation);
        t4 = t3.transformB;
        t4.position.setFrom$1(xfB.position);
        t4.rotation.setFrom$1(xfB.rotation);
        t3.useRadii = true;
        t4 = t2.cache;
        t4.count = 0;
        t5 = t2._pool.distance;
        t2 = t2.output;
        t5.distance$3(t2, t4, t3);
        t2 = t2.distance;
        if (typeof t2 !== "number")
          return t2.$lt();
        touching = t2 < 0.000001192;
        this.manifold.pointCount = 0;
      } else {
        this.evaluate$3(this.manifold, xfA, xfB);
        t2 = this.manifold.pointCount;
        if (typeof t2 !== "number")
          return t2.$gt();
        touching = t2 > 0;
        t2 = t1.points;
        i = 0;
        while (true) {
          t3 = this.manifold;
          t4 = t3.pointCount;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          t3 = t3.points;
          if (i >= 2)
            return H.ioore(t3, i);
          mp2 = t3[i];
          mp2.set$normalImpulse(0);
          mp2.set$tangentImpulse(0);
          id2 = J.get$id$x(mp2);
          j = 0;
          while (true) {
            t3 = t1.pointCount;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(j < t3))
              break;
            if (j >= 2)
              return H.ioore(t2, j);
            mp1 = t2[j];
            if (J.get$id$x(mp1).isEqual$1(id2)) {
              mp2.set$normalImpulse(mp1.get$normalImpulse());
              mp2.set$tangentImpulse(mp1.get$tangentImpulse());
              break;
            }
            ++j;
          }
          ++i;
        }
        if (touching !== wasTouching) {
          bodyA.set$awake(true);
          bodyB.set$awake(true);
        }
      }
      t2 = this.flags;
      if (touching) {
        if (typeof t2 !== "number")
          return t2.$or();
        this.flags = t2 | 2;
      } else {
        if (typeof t2 !== "number")
          return t2.$and();
        this.flags = t2 & 4294967293;
      }
      if (listener == null)
        return;
      if (!wasTouching && touching)
        listener.beginContact$1(this);
      if (wasTouching && !touching)
        listener.endContact$1(this);
      if (!sensor && touching)
        listener.preSolve$2(this, t1);
    }
  },
  ContactConstraint: {
    "^": "Object;points>,localNormal<,localPoint<,normal<,normalMass<,K<,bodyA@,bodyB@,type*,radius@,friction@,restitution@,pointCount@,manifold@",
    setFrom$1: function(cp) {
      var t1, t2, i, t3;
      this.pointCount = cp.get$pointCount();
      this.localNormal.setFrom$1(cp.get$localNormal());
      this.localPoint.setFrom$1(cp.get$localPoint());
      this.normal.setFrom$1(cp.get$normal());
      this.normalMass.setFrom$1(cp.get$normalMass());
      this.K.setFrom$1(cp.get$K());
      this.bodyA = cp.get$bodyA();
      this.bodyB = cp.get$bodyB();
      t1 = J.getInterceptor$x(cp);
      this.type = t1.get$type(cp);
      this.radius = cp.get$radius();
      this.friction = cp.get$friction();
      this.restitution = cp.get$restitution();
      this.manifold = cp.get$manifold();
      t2 = this.points;
      i = 0;
      while (true) {
        t3 = cp.get$pointCount();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i].setFrom$1(J.$index$asx(t1.get$points(cp), i));
        ++i;
      }
    },
    toString$0: function(_) {
      return "localNormal: \"" + this.localNormal.toString$0(0) + "\", localPoint: \"" + this.localPoint.toString$0(0) + "\" normal: \"" + this.normal.toString$0(0) + "\", radius: \"" + H.S(this.radius) + "\" friction: \"" + H.S(this.friction) + "\" restitution: \"" + H.S(this.restitution) + "\", pointCount: \"" + H.S(this.pointCount) + "\"";
    },
    static: {ContactConstraint$: function() {
        return new V.ContactConstraint(P.List_List$generate(2, new V.ContactConstraint_closure(), true, V.ContactConstraintPoint), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Matrix2(new Float32Array(H._checkLength(4))), new T.Matrix2(new Float32Array(H._checkLength(4))), null, null, null, null, null, null, 0, null);
      }}
  },
  ContactConstraint_closure: {
    "^": "Closure:44;",
    call$1: function(i) {
      return new V.ContactConstraintPoint(new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), 0, 0, 0, 0, 0);
    }
  },
  ContactConstraintPoint: {
    "^": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass@,tangentMass@,velocityBias@",
    setFrom$1: function(cp) {
      this.localPoint.setFrom$1(cp.get$localPoint());
      this.rA.setFrom$1(cp.get$rA());
      this.rB.setFrom$1(cp.get$rB());
      this.normalImpulse = cp.get$normalImpulse();
      this.tangentImpulse = cp.get$tangentImpulse();
      this.normalMass = cp.get$normalMass();
      this.tangentMass = cp.get$tangentMass();
      this.velocityBias = cp.get$velocityBias();
    },
    toString$0: function(_) {
      return "normal impulse: " + H.S(this.normalImpulse) + ", tangentImpulse: " + H.S(this.tangentImpulse) + ", normalMass: " + H.S(this.normalMass) + ", tangentMass: " + H.S(this.tangentMass) + ", velocityBias: " + H.S(this.velocityBias) + ", localPoint: " + this.localPoint.toString$0(0) + ", rA: " + this.rA.toString$0(0) + ", rB: " + this.rB.toString$0(0);
    }
  },
  ContactEdge: {
    "^": "Object;other<,contact<,prev@,next@"
  },
  ContactRegister: {
    "^": "Object;creator,primary"
  },
  ContactSolver: {
    "^": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA<,rB<",
    init$3: function(contacts, contactCount, impulseRatio) {
      var t1, t2, t3, i, t4, t5, t6, t7, contact, fixtureA, fixtureB, shapeA, t8, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, friction, restitution, vA, vB, wA, wB, cc, t9, t10, t11, t12, j, t13, cp, ccp, t14, t15, rnA, rnB, rtA, rtB, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
      this.constraintCount = contactCount;
      t1 = this.constraints;
      t2 = t1.length;
      if (typeof contactCount !== "number")
        return H.iae(contactCount);
      if (t2 < contactCount) {
        t2 = Array(P.max(t2 * 2, contactCount));
        t2.fixed$length = init;
        t2 = H.setRuntimeTypeInfo(t2, [V.ContactConstraint]);
        this.constraints = t2;
        t3 = t1.length;
        C.JSArray_methods.checkMutable$1(t2, "set range");
        H.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
        for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
          t2 = V.ContactConstraint$();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      }
      t1 = this.worldManifold;
      t2 = t1.points;
      t3 = this.tangent.storage;
      t4 = this.temp2.storage;
      t5 = this.temp1.storage;
      t6 = t1.normal.storage;
      i = 0;
      while (true) {
        t7 = this.constraintCount;
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (!(i < t7))
          break;
        if (i >= contacts.length)
          return H.ioore(contacts, i);
        contact = contacts[i];
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        t7 = J.getInterceptor$x(fixtureA);
        shapeA = t7.get$shape(fixtureA);
        t8 = J.getInterceptor$x(fixtureB);
        shapeB = t8.get$shape(fixtureB);
        radiusA = shapeA.radius;
        radiusB = shapeB.radius;
        bodyA = t7.get$body(fixtureA);
        bodyB = t8.get$body(fixtureB);
        manifold = contact.get$manifold();
        t8 = fixtureA.get$friction();
        t7 = fixtureB.get$friction();
        if (typeof t8 !== "number")
          return t8.$mul();
        if (typeof t7 !== "number")
          return H.iae(t7);
        friction = Math.sqrt(t8 * t7);
        t7 = fixtureA.get$restitution();
        t8 = fixtureB.get$restitution();
        if (typeof t7 !== "number")
          return t7.$gt();
        if (typeof t8 !== "number")
          return H.iae(t8);
        if (t7 > t8)
          restitution = t7;
        else
          restitution = t8;
        vA = bodyA._linearVelocity;
        vB = bodyB._linearVelocity;
        wA = bodyA._angularVelocity;
        wB = bodyB._angularVelocity;
        t1.initialize$5(0, manifold, bodyA.originTransform, radiusA, bodyB.originTransform, radiusB);
        t7 = this.constraints;
        if (i >= t7.length)
          return H.ioore(t7, i);
        cc = t7[i];
        cc.set$bodyA(bodyA);
        cc.set$bodyB(bodyB);
        cc.set$manifold(manifold);
        cc.get$normal().storage[0] = t6[0];
        cc.get$normal().storage[1] = t6[1];
        cc.set$pointCount(manifold.pointCount);
        cc.set$friction(friction);
        cc.set$restitution(restitution);
        t7 = cc.get$localNormal();
        t8 = manifold.localNormal.storage;
        t7.storage[0] = t8[0];
        cc.get$localNormal().storage[1] = t8[1];
        t8 = cc.get$localPoint();
        t7 = manifold.localPoint.storage;
        t8.storage[0] = t7[0];
        cc.get$localPoint().storage[1] = t7[1];
        cc.set$radius(radiusA + radiusB);
        t7 = J.getInterceptor$x(cc);
        t7.set$type(cc, manifold.type);
        t8 = -wA;
        t9 = -wB;
        t10 = vB.storage;
        t11 = vA.storage;
        t12 = -restitution;
        j = 0;
        while (true) {
          t13 = cc.get$pointCount();
          if (typeof t13 !== "number")
            return H.iae(t13);
          if (!(j < t13))
            break;
          t13 = manifold.points;
          if (j >= 2)
            return H.ioore(t13, j);
          cp = t13[j];
          ccp = J.$index$asx(t7.get$points(cc), j);
          ccp.set$normalImpulse(impulseRatio * cp.get$normalImpulse());
          ccp.set$tangentImpulse(impulseRatio * cp.get$tangentImpulse());
          ccp.get$localPoint().storage[0] = cp.get$localPoint().storage[0];
          ccp.get$localPoint().storage[1] = cp.get$localPoint().storage[1];
          t13 = ccp.get$rA();
          if (j >= t2.length)
            return H.ioore(t2, j);
          t14 = J.get$x$x(t2[j]);
          t15 = bodyA.sweep.center.storage;
          t13.storage[0] = J.$sub$n(t14, t15[0]);
          t14 = ccp.get$rA();
          if (j >= t2.length)
            return H.ioore(t2, j);
          t14.storage[1] = J.$sub$n(J.get$y$x(t2[j]), t15[1]);
          t15 = ccp.get$rB();
          if (j >= t2.length)
            return H.ioore(t2, j);
          t14 = J.get$x$x(t2[j]);
          t13 = bodyB.sweep.center.storage;
          t15.storage[0] = J.$sub$n(t14, t13[0]);
          t14 = ccp.get$rB();
          if (j >= t2.length)
            return H.ioore(t2, j);
          t14.storage[1] = J.$sub$n(J.get$y$x(t2[j]), t13[1]);
          rnA = ccp.get$rA().storage[0] * cc.get$normal().storage[1] - ccp.get$rA().storage[1] * cc.get$normal().storage[0];
          rnB = ccp.get$rB().storage[0] * cc.get$normal().storage[1] - ccp.get$rB().storage[1] * cc.get$normal().storage[0];
          ccp.set$normalMass(1 / (bodyA.invMass + bodyB.invMass + bodyA.invInertia * (rnA * rnA) + bodyB.invInertia * (rnB * rnB)));
          t3[0] = cc.get$normal().storage[1];
          t3[1] = -1 * cc.get$normal().storage[0];
          rtA = ccp.get$rA().storage[0] * t3[1] - ccp.get$rA().storage[1] * t3[0];
          rtB = ccp.get$rB().storage[0] * t3[1] - ccp.get$rB().storage[1] * t3[0];
          ccp.set$tangentMass(1 / (bodyA.invMass + bodyB.invMass + bodyA.invInertia * (rtA * rtA) + bodyB.invInertia * (rtB * rtB)));
          ccp.set$velocityBias(0);
          t4[0] = t8 * ccp.get$rA().storage[1];
          t4[1] = wA * ccp.get$rA().storage[0];
          t5[0] = t9 * ccp.get$rB().storage[1] + t10[0] - t11[0] - t4[0];
          t5[1] = wB * ccp.get$rB().storage[0] + t10[1] - t11[1] - t4[1];
          t13 = cc.get$normal().storage;
          vRel = t13[0] * t5[0] + t13[1] * t5[1];
          if (vRel < -1)
            ccp.set$velocityBias(t12 * vRel);
          ++j;
        }
        if (cc.get$pointCount() === 2) {
          ccp1 = J.$index$asx(t7.get$points(cc), 0);
          ccp2 = J.$index$asx(t7.get$points(cc), 1);
          invMassA = bodyA.invMass;
          invIA = bodyA.invInertia;
          invMassB = bodyB.invMass;
          invIB = bodyB.invInertia;
          t7 = ccp1.get$rA().storage;
          t8 = cc.get$normal().storage;
          rn1A = t7[0] * t8[1] - t7[1] * t8[0];
          t8 = ccp1.get$rB().storage;
          t7 = cc.get$normal().storage;
          rn1B = t8[0] * t7[1] - t8[1] * t7[0];
          t7 = ccp2.get$rA().storage;
          t8 = cc.get$normal().storage;
          rn2A = t7[0] * t8[1] - t7[1] * t8[0];
          t8 = ccp2.get$rB().storage;
          t7 = cc.get$normal().storage;
          rn2B = t8[0] * t7[1] - t8[1] * t7[0];
          t7 = invMassA + invMassB;
          t8 = invIA * rn1A;
          t9 = invIB * rn1B;
          k11 = t7 + t8 * rn1A + t9 * rn1B;
          k22 = t7 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
          k12 = t7 + t8 * rn2A + t9 * rn2B;
          if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
            t7 = cc.get$K().storage;
            t7[3] = k22;
            t7[2] = k12;
            t7[1] = k12;
            t7[0] = k11;
            cc.get$normalMass().setValues$4(k11, k12, k12, k22);
            cc.get$normalMass().invert$0();
          } else
            cc.set$pointCount(1);
        }
        ++i;
      }
    },
    warmStart$0: function() {
      var t1, t2, i, t3, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, t4, j, t5, ccp, Px, Py;
      t1 = this.tangent;
      t2 = t1.storage;
      i = 0;
      while (true) {
        t3 = this.constraintCount;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t3 = this.constraints;
        if (i >= t3.length)
          return H.ioore(t3, i);
        c = t3[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        invMassA = bodyA.invMass;
        invIA = bodyA.invInertia;
        invMassB = bodyB.invMass;
        invIB = bodyB.invInertia;
        t3 = c.get$normal().storage;
        t4 = t3[0];
        t1.set$x(0, t3[1]);
        t1.set$y(0, -1 * t4);
        t4 = J.getInterceptor$x(c);
        j = 0;
        while (true) {
          t5 = c.get$pointCount();
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (!(j < t5))
            break;
          ccp = J.$index$asx(t4.get$points(c), j);
          Px = ccp.get$normalImpulse() * t3[0] + ccp.get$tangentImpulse() * t2[0];
          Py = ccp.get$normalImpulse() * t3[1] + ccp.get$tangentImpulse() * t2[1];
          t5 = bodyA._angularVelocity - invIA * (ccp.get$rA().storage[0] * Py - ccp.get$rA().storage[1] * Px);
          if (bodyA._type !== 0) {
            if (t5 * t5 > 0)
              bodyA.set$awake(true);
            bodyA._angularVelocity = t5;
          }
          t5 = bodyA._linearVelocity.storage;
          t5[0] = t5[0] - Px * invMassA;
          t5[1] = t5[1] - Py * invMassA;
          t5 = bodyB._angularVelocity + invIB * (ccp.get$rB().storage[0] * Py - ccp.get$rB().storage[1] * Px);
          if (bodyB._type !== 0) {
            if (t5 * t5 > 0)
              bodyB.set$awake(true);
            bodyB._angularVelocity = t5;
          }
          t5 = bodyB._linearVelocity.storage;
          t5[0] = t5[0] + Px * invMassB;
          t5[1] = t5[1] + Py * invMassB;
          ++j;
        }
        ++i;
      }
    },
    solveVelocityConstraints$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, i, t16, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, t17, t18, j, t19, ccp, t20, t21, t22, t23, t24, maxFriction, newImpulse, lambda, Px, Py, b, a, cp1, cp2, t25, t26, t27, t28, t29, vn1, vn2;
      t1 = this.temp2;
      t2 = t1.storage;
      t3 = this.dv1.storage;
      t4 = this.dv2.storage;
      t5 = this.dv.storage;
      t6 = this.tangent.storage;
      t7 = this.x;
      t8 = t7.storage;
      t9 = this.d;
      t10 = t9.storage;
      t11 = this.P1.storage;
      t12 = this.P2;
      t13 = t12.storage;
      t14 = this.temp1;
      t15 = t14.storage;
      i = 0;
      while (true) {
        t16 = this.constraintCount;
        if (typeof t16 !== "number")
          return H.iae(t16);
        if (!(i < t16))
          break;
        t16 = this.constraints;
        if (i >= t16.length)
          return H.ioore(t16, i);
        c = t16[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        wA = bodyA._angularVelocity;
        wB = bodyB._angularVelocity;
        vA = bodyA._linearVelocity;
        vB = bodyB._linearVelocity;
        invMassA = bodyA.invMass;
        invIA = bodyA.invInertia;
        invMassB = bodyB.invMass;
        invIB = bodyB.invInertia;
        t6[0] = c.get$normal().storage[1];
        t6[1] = -1 * c.get$normal().storage[0];
        friction = c.get$friction();
        t16 = J.getInterceptor$x(c);
        t17 = vB.storage;
        t18 = vA.storage;
        j = 0;
        while (true) {
          t19 = c.get$pointCount();
          if (typeof t19 !== "number")
            return H.iae(t19);
          if (!(j < t19))
            break;
          ccp = J.$index$asx(t16.get$points(c), j);
          t19 = ccp.get$rA().storage;
          t5[0] = -wB * ccp.get$rB().storage[1] + t17[0] - t18[0] + wA * t19[1];
          t5[1] = wB * ccp.get$rB().storage[0] + t17[1] - t18[1] - wA * t19[0];
          t19 = t5[0];
          t20 = t6[0];
          t21 = t5[1];
          t22 = t6[1];
          t23 = ccp.get$tangentMass();
          t24 = ccp.get$normalImpulse();
          if (typeof friction !== "number")
            return friction.$mul();
          maxFriction = friction * t24;
          newImpulse = P.max(-maxFriction, P.min(ccp.get$tangentImpulse() + t23 * -(t19 * t20 + t21 * t22), maxFriction));
          lambda = newImpulse - ccp.get$tangentImpulse();
          Px = t6[0] * lambda;
          Py = t6[1] * lambda;
          t18[0] = t18[0] - Px * invMassA;
          t18[1] = t18[1] - Py * invMassA;
          wA -= invIA * (ccp.get$rA().storage[0] * Py - ccp.get$rA().storage[1] * Px);
          t17[0] = t17[0] + Px * invMassB;
          t17[1] = t17[1] + Py * invMassB;
          wB += invIB * (ccp.get$rB().storage[0] * Py - ccp.get$rB().storage[1] * Px);
          ccp.set$tangentImpulse(newImpulse);
          ++j;
        }
        if (c.get$pointCount() === 1) {
          ccp = J.$index$asx(t16.get$points(c), 0);
          t16 = ccp.get$rA().storage;
          t5[0] = -wB * ccp.get$rB().storage[1] + t17[0] - t18[0] + wA * t16[1];
          t5[1] = wB * ccp.get$rB().storage[0] + t17[1] - t18[1] - wA * t16[0];
          b = c.get$normal();
          t16 = t5[0];
          t19 = b.storage;
          t20 = t19[0];
          t21 = t5[1];
          t19 = t19[1];
          lambda = J.$mul$ns(J.$negate$n(ccp.get$normalMass()), t16 * t20 + t21 * t19 - ccp.get$velocityBias());
          t19 = ccp.get$normalImpulse();
          if (typeof lambda !== "number")
            return H.iae(lambda);
          a = t19 + lambda;
          newImpulse = a > 0 ? a : 0;
          lambda = newImpulse - ccp.get$normalImpulse();
          Px = c.get$normal().storage[0] * lambda;
          Py = c.get$normal().storage[1] * lambda;
          t18[0] = t18[0] - Px * invMassA;
          t18[1] = t18[1] - Py * invMassA;
          wA -= invIA * (ccp.get$rA().storage[0] * Py - ccp.get$rA().storage[1] * Px);
          t17[0] = t17[0] + Px * invMassB;
          t17[1] = t17[1] + Py * invMassB;
          wB += invIB * (ccp.get$rB().storage[0] * Py - ccp.get$rB().storage[1] * Px);
          ccp.set$normalImpulse(newImpulse);
        } else {
          cp1 = J.$index$asx(t16.get$points(c), 0);
          cp2 = J.$index$asx(t16.get$points(c), 1);
          t16 = cp1.get$normalImpulse();
          t19 = cp2.get$normalImpulse();
          t20 = new Float32Array(2);
          a = new T.Vector2(t20);
          t20[0] = t16;
          t20[1] = t19;
          t19 = -wB;
          t3[0] = t19 * cp1.get$rB().storage[1] + t17[0] - t18[0] + wA * cp1.get$rA().storage[1];
          t3[1] = wB * cp1.get$rB().storage[0] + t17[1] - t18[1] - wA * cp1.get$rA().storage[0];
          t4[0] = t19 * cp2.get$rB().storage[1] + t17[0] - t18[0] + wA * cp2.get$rA().storage[1];
          t4[1] = wB * cp2.get$rB().storage[0] + t17[1] - t18[1] - wA * cp2.get$rA().storage[0];
          t19 = t3[0];
          t16 = c.get$normal().storage[0];
          t21 = t3[1];
          t22 = c.get$normal().storage[1];
          t23 = t4[0];
          t24 = c.get$normal().storage[0];
          t25 = t4[1];
          t26 = c.get$normal().storage[1];
          t27 = cp1.get$velocityBias();
          t28 = cp2.get$velocityBias();
          t29 = new Float32Array(2);
          t29[0] = t19 * t16 + t21 * t22 - t27;
          t29[1] = t23 * t24 + t25 * t26 - t28;
          t2[0] = c.get$K().storage[0] * t20[0] + c.get$K().storage[2] * t20[1];
          t2[1] = c.get$K().storage[1] * t20[0] + c.get$K().storage[3] * t20[1];
          t29[0] = t29[0] - t2[0];
          t29[1] = t29[1] - t2[1];
          $loop$1: {
            c.get$normalMass().transformed$2(new T.Vector2(t29), t7);
            t8[1] = t8[1] * -1;
            t8[0] = t8[0] * -1;
            if (t8[0] >= 0 && t8[1] >= 0) {
              t10[1] = t8[1];
              t10[0] = t8[0];
              t9.sub$1(a);
              t16 = c.get$normal().storage;
              t11[1] = t16[1];
              t11[0] = t16[0];
              t16 = t10[0];
              t11[1] = t11[1] * t16;
              t11[0] = t11[0] * t16;
              t16 = c.get$normal().storage;
              t13[1] = t16[1];
              t13[0] = t16[0];
              t16 = t10[1];
              t13[1] = t13[1] * t16;
              t13[0] = t13[0] * t16;
              t15[1] = t11[1];
              t15[0] = t11[0];
              t14.add$1(0, t12);
              t2[1] = t15[1];
              t2[0] = t15[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t15[1];
              t2[0] = t15[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t16 = cp1.get$rA().storage;
              t19 = t16[0];
              t20 = t11[1];
              t16 = t16[1];
              t21 = t11[0];
              t22 = cp2.get$rA().storage;
              wA -= invIA * (t19 * t20 - t16 * t21 + (t22[0] * t13[1] - t22[1] * t13[0]));
              t22 = cp1.get$rB().storage;
              t21 = t22[0];
              t16 = t11[1];
              t22 = t22[1];
              t20 = t11[0];
              t19 = cp2.get$rB().storage;
              wB += invIB * (t21 * t16 - t22 * t20 + (t19[0] * t13[1] - t19[1] * t13[0]));
              cp1.set$normalImpulse(t8[0]);
              cp2.set$normalImpulse(t8[1]);
              break $loop$1;
            }
            t8[0] = J.$mul$ns(J.$negate$n(cp1.get$normalMass()), t29[0]);
            t8[1] = 0;
            t16 = c.get$K().storage[1];
            t19 = t8[0];
            t20 = t29[1];
            if (t19 >= 0 && t16 * t19 + t20 >= 0) {
              t10[1] = t8[1];
              t10[0] = t8[0];
              t9.sub$1(a);
              t16 = c.get$normal().storage;
              t11[1] = t16[1];
              t11[0] = t16[0];
              t16 = t10[0];
              t11[1] = t11[1] * t16;
              t11[0] = t11[0] * t16;
              t16 = c.get$normal().storage;
              t13[1] = t16[1];
              t13[0] = t16[0];
              t16 = t10[1];
              t13[1] = t13[1] * t16;
              t13[0] = t13[0] * t16;
              t15[1] = t11[1];
              t15[0] = t11[0];
              t14.add$1(0, t12);
              t2[1] = t15[1];
              t2[0] = t15[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t15[1];
              t2[0] = t15[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t16 = cp1.get$rA().storage;
              t19 = t16[0];
              t20 = t11[1];
              t16 = t16[1];
              t21 = t11[0];
              t22 = cp2.get$rA().storage;
              wA -= invIA * (t19 * t20 - t16 * t21 + (t22[0] * t13[1] - t22[1] * t13[0]));
              t22 = cp1.get$rB().storage;
              t21 = t22[0];
              t16 = t11[1];
              t22 = t22[1];
              t20 = t11[0];
              t19 = cp2.get$rB().storage;
              wB += invIB * (t21 * t16 - t22 * t20 + (t19[0] * t13[1] - t19[1] * t13[0]));
              cp1.set$normalImpulse(t8[0]);
              cp2.set$normalImpulse(t8[1]);
              break $loop$1;
            }
            t8[0] = 0;
            t8[1] = J.$mul$ns(J.$negate$n(cp2.get$normalMass()), t29[1]);
            t16 = c.get$K().storage[2];
            t19 = t8[1];
            t20 = t29[0];
            if (t19 >= 0 && t16 * t19 + t20 >= 0) {
              t10[1] = t19;
              t10[0] = t8[0];
              t9.sub$1(a);
              t16 = c.get$normal().storage;
              t11[1] = t16[1];
              t11[0] = t16[0];
              t16 = t10[0];
              t11[1] = t11[1] * t16;
              t11[0] = t11[0] * t16;
              t16 = c.get$normal().storage;
              t13[1] = t16[1];
              t13[0] = t16[0];
              t16 = t10[1];
              t13[1] = t13[1] * t16;
              t13[0] = t13[0] * t16;
              t15[1] = t11[1];
              t15[0] = t11[0];
              t14.add$1(0, t12);
              t2[1] = t15[1];
              t2[0] = t15[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t15[1];
              t2[0] = t15[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t16 = cp1.get$rA().storage;
              t19 = t16[0];
              t20 = t11[1];
              t16 = t16[1];
              t21 = t11[0];
              t22 = cp2.get$rA().storage;
              wA -= invIA * (t19 * t20 - t16 * t21 + (t22[0] * t13[1] - t22[1] * t13[0]));
              t22 = cp1.get$rB().storage;
              t21 = t22[0];
              t16 = t11[1];
              t22 = t22[1];
              t20 = t11[0];
              t19 = cp2.get$rB().storage;
              wB += invIB * (t21 * t16 - t22 * t20 + (t19[0] * t13[1] - t19[1] * t13[0]));
              cp1.set$normalImpulse(t8[0]);
              cp2.set$normalImpulse(t8[1]);
              break $loop$1;
            }
            t8[0] = 0;
            t8[1] = 0;
            vn1 = t29[0];
            vn2 = t29[1];
            if (vn1 >= 0 && vn2 >= 0) {
              t10[1] = t8[1];
              t10[0] = t8[0];
              t9.sub$1(a);
              t16 = c.get$normal().storage;
              t11[1] = t16[1];
              t11[0] = t16[0];
              t16 = t10[0];
              t11[1] = t11[1] * t16;
              t11[0] = t11[0] * t16;
              t16 = c.get$normal().storage;
              t13[1] = t16[1];
              t13[0] = t16[0];
              t16 = t10[1];
              t13[1] = t13[1] * t16;
              t13[0] = t13[0] * t16;
              t15[1] = t11[1];
              t15[0] = t11[0];
              t14.add$1(0, t12);
              t2[1] = t15[1];
              t2[0] = t15[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t15[1];
              t2[0] = t15[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t16 = cp1.get$rA().storage;
              t19 = t16[0];
              t20 = t11[1];
              t16 = t16[1];
              t21 = t11[0];
              t22 = cp2.get$rA().storage;
              wA -= invIA * (t19 * t20 - t16 * t21 + (t22[0] * t13[1] - t22[1] * t13[0]));
              t22 = cp2.get$rA().storage;
              t21 = t22[0];
              t16 = t11[1];
              t22 = t22[1];
              t20 = t11[0];
              t19 = cp2.get$rB().storage;
              wB += invIB * (t21 * t16 - t22 * t20 + (t19[0] * t13[1] - t19[1] * t13[0]));
              cp1.set$normalImpulse(t8[0]);
              cp2.set$normalImpulse(t8[1]);
              break $loop$1;
            }
            break $loop$1;
          }
        }
        t18[1] = t18[1];
        t18[0] = t18[0];
        if (bodyA._type !== 0) {
          if (wA * wA > 0)
            bodyA.set$awake(true);
          bodyA._angularVelocity = wA;
        }
        t17[1] = t17[1];
        t17[0] = t17[0];
        if (bodyB._type !== 0) {
          if (wB * wB > 0)
            bodyB.set$awake(true);
          bodyB._angularVelocity = wB;
        }
        ++i;
      }
    },
    storeImpulses$0: function() {
      var i, t1, c, m, j, t2;
      i = 0;
      while (true) {
        t1 = this.constraintCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.constraints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        c = t1[i];
        m = c.get$manifold();
        t1 = J.getInterceptor$x(c);
        j = 0;
        while (true) {
          t2 = c.get$pointCount();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(j < t2))
            break;
          t2 = m.points;
          if (j >= 2)
            return H.ioore(t2, j);
          t2[j].set$normalImpulse(J.$index$asx(t1.get$points(c), j).get$normalImpulse());
          t2[j].set$tangentImpulse(J.$index$asx(t1.get$points(c), j).get$tangentImpulse());
          ++j;
        }
        ++i;
      }
    },
    solvePositionConstraints$1: function(baumgarte) {
      var t1, t2, t3, t4, t5, t6, t7, psm, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, minSeparation, i, t21, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, t22, j, t23, t24, t25, t26, t27, t28, separation, $C, t29, t30, rnA, rnB, $K, impulse;
      t1 = this.P.storage;
      t2 = this.temp1;
      t3 = t2.storage;
      t4 = this.rA;
      t5 = t4.storage;
      t6 = this.rB;
      t7 = t6.storage;
      psm = this.psolver;
      t8 = psm.planePoint;
      t9 = psm.clipPoint;
      t10 = psm.temp;
      t11 = t10.storage;
      t12 = t9.storage;
      t13 = psm.normal;
      t14 = psm.point;
      t15 = t14.storage;
      t16 = t13.storage;
      t17 = psm.pointA;
      t18 = t17.storage;
      t19 = psm.pointB;
      t20 = t19.storage;
      minSeparation = 0;
      i = 0;
      while (true) {
        t21 = this.constraintCount;
        if (typeof t21 !== "number")
          return H.iae(t21);
        if (!(i < t21))
          break;
        t21 = this.constraints;
        if (i >= t21.length)
          return H.ioore(t21, i);
        c = t21[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        t21 = bodyA.mass;
        invMassA = t21 * bodyA.invMass;
        invIA = t21 * bodyA.invInertia;
        t21 = bodyB.mass;
        invMassB = t21 * bodyB.invMass;
        invIB = t21 * bodyB.invInertia;
        t21 = invMassA + invMassB;
        t22 = J.getInterceptor$x(c);
        j = 0;
        while (true) {
          t23 = c.get$pointCount();
          if (typeof t23 !== "number")
            return H.iae(t23);
          if (!(j < t23))
            break;
          switch (t22.get$type(c)) {
            case 0:
              t23 = c.get$bodyA();
              t24 = c.get$localPoint();
              V.Transform_mulToOut(t23.originTransform, t24, t17);
              t24 = c.get$bodyB();
              t23 = J.$index$asx(t22.get$points(c), 0).get$localPoint();
              V.Transform_mulToOut(t24.originTransform, t23, t19);
              if (V.MathBox_distanceSquared(t17, t19) > 1.4208639999999999e-14) {
                t16[1] = t20[1];
                t16[0] = t20[0];
                t13.sub$1(t17);
                t13.normalize$0();
              } else {
                t16[0] = 1;
                t16[1] = 0;
              }
              t15[1] = t18[1];
              t15[0] = t18[0];
              t23 = t14.add$1(0, t19).storage;
              t23[1] = t23[1] * 0.5;
              t23[0] = t23[0] * 0.5;
              t11[1] = t20[1];
              t11[0] = t20[0];
              t10.sub$1(t17);
              t23 = t10.dot$1(t13);
              t24 = c.get$radius();
              if (typeof t24 !== "number")
                return H.iae(t24);
              psm.separation = t23 - t24;
              break;
            case 1:
              t23 = c.get$bodyA();
              t24 = c.get$localNormal();
              t23 = t23.originTransform;
              t24 = t24.storage;
              t16[1] = t24[1];
              t16[0] = t24[0];
              t23 = t23.rotation.storage;
              t24 = t23[0];
              t25 = t16[0];
              t26 = t23[2];
              t27 = t16[1];
              t28 = t23[1];
              t23 = t23[3];
              t16[0] = t24 * t25 + t26 * t27;
              t16[1] = t28 * t25 + t23 * t27;
              t27 = c.get$bodyA();
              t23 = c.get$localPoint();
              V.Transform_mulToOut(t27.originTransform, t23, t8);
              t23 = c.get$bodyB();
              t27 = J.$index$asx(t22.get$points(c), j).get$localPoint();
              V.Transform_mulToOut(t23.originTransform, t27, t9);
              t11[1] = t12[1];
              t11[0] = t12[0];
              t10.sub$1(t8);
              t27 = t10.dot$1(t13);
              t23 = c.get$radius();
              if (typeof t23 !== "number")
                return H.iae(t23);
              psm.separation = t27 - t23;
              t15[1] = t12[1];
              t15[0] = t12[0];
              break;
            case 2:
              t23 = c.get$bodyB();
              t24 = c.get$localNormal();
              t23 = t23.originTransform;
              t24 = t24.storage;
              t16[1] = t24[1];
              t16[0] = t24[0];
              t23 = t23.rotation.storage;
              t24 = t23[0];
              t25 = t16[0];
              t26 = t23[2];
              t27 = t16[1];
              t28 = t23[1];
              t23 = t23[3];
              t16[0] = t24 * t25 + t26 * t27;
              t16[1] = t28 * t25 + t23 * t27;
              t27 = c.get$bodyB();
              t23 = c.get$localPoint();
              V.Transform_mulToOut(t27.originTransform, t23, t8);
              t23 = c.get$bodyA();
              t27 = J.$index$asx(t22.get$points(c), j).get$localPoint();
              V.Transform_mulToOut(t23.originTransform, t27, t9);
              t11[1] = t12[1];
              t11[0] = t12[0];
              t10.sub$1(t8);
              t27 = t10.dot$1(t13);
              t23 = c.get$radius();
              if (typeof t23 !== "number")
                return H.iae(t23);
              psm.separation = t27 - t23;
              t15[1] = t12[1];
              t15[0] = t12[0];
              t16[1] = -t16[1];
              t16[0] = -t16[0];
              break;
          }
          separation = psm.separation;
          t5[1] = t15[1];
          t5[0] = t15[0];
          t23 = bodyA.sweep;
          t24 = t23.center;
          t4.sub$1(t24);
          t7[1] = t15[1];
          t7[0] = t15[0];
          t25 = bodyB.sweep;
          t26 = t25.center;
          t6.sub$1(t26);
          minSeparation = P.min(minSeparation, separation);
          $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
          t27 = t5[0];
          t28 = t16[1];
          t29 = t5[1];
          t30 = t16[0];
          rnA = t27 * t28 - t29 * t30;
          rnB = t7[0] * t28 - t7[1] * t30;
          $K = t21 + invIA * rnA * rnA + invIB * rnB * rnB;
          impulse = $K > 0 ? -$C / $K : 0;
          t1[1] = t28;
          t1[0] = t16[0];
          t1[1] = t1[1] * impulse;
          t1[0] = t1[0] * impulse;
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassA;
          t3[0] = t3[0] * invMassA;
          t24.sub$1(t2);
          t23.angle = t23.angle - invIA * (t5[0] * t1[1] - t5[1] * t1[0]);
          bodyA.synchronizeTransform$0();
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassB;
          t3[0] = t3[0] * invMassB;
          t26.add$1(0, t2);
          t25.angle = t25.angle + invIB * (t7[0] * t1[1] - t7[1] * t1[0]);
          bodyB.synchronizeTransform$0();
          ++j;
        }
        ++i;
      }
      return minSeparation >= -0.0075;
    },
    static: {"^": "ContactSolver_INITIAL_NUM_CONSTRAINTS,ContactSolver_K_MAX_CONDITION_NUMBER", ContactSolver$: function() {
        return new V.ContactSolver(P.List_List$generate(256, new V.ContactSolver_closure(), true, V.ContactConstraint), null, V.WorldManifold$(), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new V.PositionSolverManifold(new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), 0, new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2)))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))));
      }}
  },
  ContactSolver_closure: {
    "^": "Closure:44;",
    call$1: function(i) {
      return V.ContactConstraint$();
    }
  },
  PositionSolverManifold: {
    "^": "Object;normal<,point,separation,pointA,pointB,temp,planePoint,clipPoint"
  },
  PolygonAndCircleContact: {
    "^": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      this.pool.collision.collidePolygonAndCircle$5(argManifold, J.get$shape$x(this.fixtureA), xfA, J.get$shape$x(this.fixtureB), xfB);
    }
  },
  PolygonContact: {
    "^": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      this.pool.collision.collidePolygons$5(argManifold, J.get$shape$x(this.fixtureA), xfA, J.get$shape$x(this.fixtureB), xfB);
    }
  },
  TimeOfImpactConstraint: {
    "^": "Object;localPoints<,localNormal<,localPoint<,type*,radius@,pointCount@,bodyA@,bodyB@",
    setFrom$1: function(argOther) {
      var t1, i, t2, t3;
      for (t1 = this.localPoints, i = 0; i < t1.length; ++i) {
        t2 = t1[i];
        t3 = argOther.get$localPoints();
        if (i >= t3.length)
          return H.ioore(t3, i);
        t2.setFrom$1(t3[i]);
      }
      this.localNormal.setFrom$1(argOther.get$localNormal());
      this.localPoint.setFrom$1(argOther.get$localPoint());
      this.type = J.get$type$x(argOther);
      this.radius = argOther.get$radius();
      this.pointCount = argOther.get$pointCount();
      this.bodyA = argOther.get$bodyA();
      this.bodyB = argOther.get$bodyB();
    },
    static: {TimeOfImpactConstraint$: function() {
        return new V.TimeOfImpactConstraint(P.List_List$generate(2, new V.TimeOfImpactConstraint_closure(), true, T.Vector2), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), 0, 0, 0, null, null);
      }}
  },
  TimeOfImpactConstraint_closure: {
    "^": "Closure:44;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(H._checkLength(2)));
    }
  },
  TimeOfImpactSolver: {
    "^": "Object;constraints,count<,toiBody,psm,rA<,rB<,P,temp",
    initialize$3: function(_, contacts, argCount, argToiBody) {
      var t1, t2, t3, i, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, j, cp;
      this.count = argCount;
      this.toiBody = argToiBody;
      t1 = this.constraints;
      t2 = t1.length;
      if (argCount >= t2) {
        t2 = Array(P.max(argCount, t2 * 2));
        t2.fixed$length = init;
        t2 = H.setRuntimeTypeInfo(t2, [V.TimeOfImpactConstraint]);
        this.constraints = t2;
        t3 = t1.length;
        C.JSArray_methods.checkMutable$1(t2, "set range");
        H.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
        for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
          t2 = V.TimeOfImpactConstraint$();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      }
      for (i = 0; i < this.count; ++i) {
        if (i >= 32)
          return H.ioore(contacts, i);
        contact = contacts[i];
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        t1 = J.getInterceptor$x(fixtureA);
        shapeA = t1.get$shape(fixtureA);
        t2 = J.getInterceptor$x(fixtureB);
        shapeB = t2.get$shape(fixtureB);
        radiusA = shapeA.radius;
        radiusB = shapeB.radius;
        bodyA = t1.get$body(fixtureA);
        bodyB = t2.get$body(fixtureB);
        manifold = contact.get$manifold();
        t2 = this.constraints;
        if (i >= t2.length)
          return H.ioore(t2, i);
        constraint = t2[i];
        constraint.set$bodyA(bodyA);
        constraint.set$bodyB(bodyB);
        t2 = constraint.get$localNormal().storage;
        t1 = manifold.localNormal.storage;
        t2[1] = t1[1];
        t2[0] = t1[0];
        t1 = constraint.get$localPoint().storage;
        t2 = manifold.localPoint.storage;
        t1[1] = t2[1];
        t1[0] = t2[0];
        J.set$type$x(constraint, manifold.type);
        constraint.set$pointCount(manifold.pointCount);
        constraint.set$radius(radiusA + radiusB);
        j = 0;
        while (true) {
          t1 = constraint.get$pointCount();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(j < t1))
            break;
          t1 = manifold.points;
          if (j >= 2)
            return H.ioore(t1, j);
          cp = t1[j];
          t1 = constraint.get$localPoints();
          t2 = cp.get$localPoint();
          if (j >= t1.length)
            return H.ioore(t1, j);
          t1[j] = t2;
          ++j;
        }
      }
    },
    solve$1: function(baumgarte) {
      var t1, t2, t3, t4, t5, t6, t7, t8, normal, point, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, minSeparation, i, t19, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, t20, j, t21, t22, t23, t24, t25, t26, t27, separation, $C, t28, rnA, rnB, $K, impulse;
      for (t1 = this.P.storage, t2 = this.temp, t3 = t2.storage, t4 = this.rA, t5 = t4.storage, t6 = this.rB, t7 = t6.storage, t8 = this.psm, normal = t8.normal, point = t8.point, t9 = point.storage, t10 = normal.storage, t11 = t8.temp, t12 = t11.storage, t13 = t8.clipPoint.storage, t14 = t8.planePoint, t15 = t8.pointA, t16 = t15.storage, t17 = t8.pointB, t18 = t17.storage, minSeparation = 0, i = 0; i < this.count; ++i) {
        t19 = this.constraints;
        if (i >= t19.length)
          return H.ioore(t19, i);
        c = t19[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        massA = bodyA.mass;
        massB = bodyB.mass;
        t19 = this.toiBody;
        if (bodyA == null ? t19 == null : bodyA === t19)
          massB = 0;
        else
          massA = 0;
        invMassA = massA * bodyA.invMass;
        invIA = massA * bodyA.invInertia;
        invMassB = massB * bodyB.invMass;
        invIB = massB * bodyB.invInertia;
        t19 = invMassA + invMassB;
        t20 = J.getInterceptor$x(c);
        j = 0;
        while (true) {
          t21 = c.get$pointCount();
          if (typeof t21 !== "number")
            return H.iae(t21);
          if (!(j < t21))
            break;
          switch (t20.get$type(c)) {
            case 0:
              t21 = c.get$bodyA();
              t22 = c.get$localPoint();
              t21.toString;
              t23 = new Float32Array(2);
              V.Transform_mulToOut(t21.originTransform, t22, new T.Vector2(t23));
              t16[1] = t23[1];
              t16[0] = t23[0];
              t23 = c.get$bodyB();
              t22 = c.get$localPoints();
              if (0 >= t22.length)
                return H.ioore(t22, 0);
              t22 = t22[0];
              t23.toString;
              t21 = new Float32Array(2);
              V.Transform_mulToOut(t23.originTransform, t22, new T.Vector2(t21));
              t18[1] = t21[1];
              t18[0] = t21[0];
              if (V.MathBox_distanceSquared(t15, t17) > 1.4208639999999999e-14) {
                t10[1] = t18[1];
                t10[0] = t18[0];
                normal.sub$1(t15);
                normal.normalize$0();
              } else {
                t10[0] = 1;
                t10[1] = 0;
              }
              t9[1] = t16[1];
              t9[0] = t16[0];
              t21 = point.add$1(0, t17).storage;
              t21[1] = t21[1] * 0.5;
              t21[0] = t21[0] * 0.5;
              t12[1] = t18[1];
              t12[0] = t18[0];
              t11.sub$1(t15);
              t21 = t11.dot$1(normal);
              t22 = c.get$radius();
              if (typeof t22 !== "number")
                return H.iae(t22);
              t8.separation = t21 - t22;
              break;
            case 1:
              t21 = c.get$bodyA();
              t22 = c.get$localNormal();
              t21.toString;
              t23 = new Float32Array(2);
              t21 = t21.originTransform;
              t22 = t22.storage;
              t23[1] = t22[1];
              t23[0] = t22[0];
              t21 = t21.rotation.storage;
              t22 = t21[0];
              t24 = t23[0];
              t25 = t21[2];
              t26 = t23[1];
              t27 = t21[1];
              t21 = t21[3];
              t23[0] = t22 * t24 + t25 * t26;
              t23[1] = t27 * t24 + t21 * t26;
              t10[1] = t23[1];
              t10[0] = t23[0];
              t23 = c.get$bodyA();
              t26 = c.get$localPoint();
              t23.toString;
              t21 = new Float32Array(2);
              V.Transform_mulToOut(t23.originTransform, t26, new T.Vector2(t21));
              t26 = t14.storage;
              t26[1] = t21[1];
              t26[0] = t21[0];
              t21 = c.get$bodyB();
              t26 = c.get$localPoints();
              if (j >= t26.length)
                return H.ioore(t26, j);
              t26 = t26[j];
              t21.toString;
              t22 = new Float32Array(2);
              V.Transform_mulToOut(t21.originTransform, t26, new T.Vector2(t22));
              t13[1] = t22[1];
              t13[0] = t22[0];
              t12[1] = t13[1];
              t12[0] = t13[0];
              t11.sub$1(t14);
              t22 = t11.dot$1(normal);
              t26 = c.get$radius();
              if (typeof t26 !== "number")
                return H.iae(t26);
              t8.separation = t22 - t26;
              t9[1] = t13[1];
              t9[0] = t13[0];
              break;
            case 2:
              t21 = c.get$bodyB();
              t22 = c.get$localNormal();
              t21.toString;
              t23 = new Float32Array(2);
              t21 = t21.originTransform;
              t22 = t22.storage;
              t23[1] = t22[1];
              t23[0] = t22[0];
              t21 = t21.rotation.storage;
              t22 = t21[0];
              t24 = t23[0];
              t25 = t21[2];
              t26 = t23[1];
              t27 = t21[1];
              t21 = t21[3];
              t23[0] = t22 * t24 + t25 * t26;
              t23[1] = t27 * t24 + t21 * t26;
              t10[1] = t23[1];
              t10[0] = t23[0];
              t23 = c.get$bodyB();
              t26 = c.get$localPoint();
              t23.toString;
              t21 = new Float32Array(2);
              V.Transform_mulToOut(t23.originTransform, t26, new T.Vector2(t21));
              t26 = t14.storage;
              t26[1] = t21[1];
              t26[0] = t21[0];
              t21 = c.get$bodyA();
              t26 = c.get$localPoints();
              if (j >= t26.length)
                return H.ioore(t26, j);
              t26 = t26[j];
              t21.toString;
              t22 = new Float32Array(2);
              V.Transform_mulToOut(t21.originTransform, t26, new T.Vector2(t22));
              t13[1] = t22[1];
              t13[0] = t22[0];
              t12[1] = t13[1];
              t12[0] = t13[0];
              t11.sub$1(t14);
              t22 = t11.dot$1(normal);
              t26 = c.get$radius();
              if (typeof t26 !== "number")
                return H.iae(t26);
              t8.separation = t22 - t26;
              t9[1] = t13[1];
              t9[0] = t13[0];
              t10[1] = -t10[1];
              t10[0] = -t10[0];
              break;
          }
          separation = t8.separation;
          t5[1] = t9[1];
          t5[0] = t9[0];
          t21 = bodyA.sweep;
          t22 = t21.center;
          t4.sub$1(t22);
          t7[1] = t9[1];
          t7[0] = t9[0];
          t23 = bodyB.sweep;
          t24 = t23.center;
          t6.sub$1(t24);
          minSeparation = P.min(minSeparation, separation);
          $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
          t25 = t5[0];
          t26 = t10[1];
          t27 = t5[1];
          t28 = t10[0];
          rnA = t25 * t26 - t27 * t28;
          rnB = t7[0] * t26 - t7[1] * t28;
          $K = t19 + invIA * rnA * rnA + invIB * rnB * rnB;
          impulse = $K > 0 ? -$C / $K : 0;
          t1[1] = t26;
          t1[0] = t10[0];
          t1[1] = t1[1] * impulse;
          t1[0] = t1[0] * impulse;
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassA;
          t3[0] = t3[0] * invMassA;
          t22.sub$1(t2);
          t21.angle = t21.angle - invIA * (t5[0] * t1[1] - t5[1] * t1[0]);
          bodyA.synchronizeTransform$0();
          t3[1] = t1[1];
          t3[0] = t1[0];
          t3[1] = t3[1] * invMassB;
          t3[0] = t3[0] * invMassB;
          t24.add$1(0, t2);
          t23.angle = t23.angle + invIB * (t7[0] * t1[1] - t7[1] * t1[0]);
          bodyB.synchronizeTransform$0();
          ++j;
        }
      }
      return minSeparation >= -0.0075;
    },
    static: {TimeOfImpactSolver$: function() {
        return new V.TimeOfImpactSolver(P.List_List$generate(4, new V.TimeOfImpactSolver_closure(), true, V.TimeOfImpactConstraint), 0, null, new V.TimeOfImpactSolverManifold(new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), 0, new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2)))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))));
      }}
  },
  TimeOfImpactSolver_closure: {
    "^": "Closure:44;",
    call$1: function(i) {
      return V.TimeOfImpactConstraint$();
    }
  },
  TimeOfImpactSolverManifold: {
    "^": "Object;normal<,point,separation,pointA,pointB,temp,planePoint,clipPoint"
  },
  Filter: {
    "^": "Object;categoryBits<,maskBits<,groupIndex<",
    setFrom$1: function(other) {
      this.categoryBits = other.get$categoryBits();
      this.maskBits = other.get$maskBits();
      this.groupIndex = other.get$groupIndex();
    }
  },
  Fixture: {
    "^": "Object;box<,density<,next@,body>,shape>,friction@,restitution@,proxy<,filter>,isSensor@,userData@,_poolOne,_poolTwo",
    create$2: function(b, def) {
      var t1;
      this.userData = def.userData;
      this.friction = def.friction;
      this.restitution = def.restitution;
      this.body = b;
      this.next = null;
      this.filter.setFrom$1(def.filter);
      this.isSensor = def.isSensor;
      t1 = def.shape;
      t1.toString;
      this.shape = V.PolygonShape$copy(t1);
      this.density = def.density;
    },
    destroy$0: function() {
      this.shape = null;
    },
    createProxy$2: function(broadPhase, xf) {
      var t1 = this.box;
      this.shape.computeAxisAlignedBox$2(t1, xf);
      this.proxy = broadPhase.createProxy$2(t1, this);
    },
    destroyProxy$1: function(broadPhase) {
      var t1 = this.proxy;
      if (t1 == null)
        return;
      broadPhase._unbufferMove$1(t1);
      --broadPhase.proxyCount;
      broadPhase._tree.destroyProxy$1(t1);
      this.proxy = null;
    },
    synchronize$3: function(broadPhase, transformOne, transformTwo) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      if (this.proxy == null)
        return;
      t1 = this._poolOne;
      this.shape.computeAxisAlignedBox$2(t1, transformOne);
      t2 = this._poolTwo;
      this.shape.computeAxisAlignedBox$2(t2, transformTwo);
      t3 = this.box;
      t4 = t3.lowerBound;
      t5 = t1.lowerBound;
      t6 = t5.storage;
      t7 = t6[0];
      t8 = t2.lowerBound.storage;
      t9 = t8[0];
      t7 = t7 < t9 ? t7 : t9;
      t4 = t4.storage;
      t4[0] = t7;
      t7 = t6[1];
      t8 = t8[1];
      t4[1] = t7 < t8 ? t7 : t8;
      t4 = t3.upperBound;
      t1 = t1.upperBound.storage;
      t7 = t1[0];
      t2 = t2.upperBound.storage;
      t8 = t2[0];
      t7 = t7 > t8 ? t7 : t8;
      t4 = t4.storage;
      t4[0] = t7;
      t1 = t1[1];
      t2 = t2[1];
      t4[1] = t1 > t2 ? t1 : t2;
      t1 = transformTwo.position.storage;
      t2 = transformOne.position.storage;
      t6[0] = t1[0] - t2[0];
      t6[1] = t1[1] - t2[1];
      t2 = this.proxy;
      if (broadPhase._tree.moveProxy$3(t2, t3, t5))
        broadPhase.moveBuffer.push(t2);
    },
    getMassData$1: function(massData) {
      this.shape.computeMass$2(massData, this.density);
    },
    get$type: function(_) {
      return this.shape.type;
    },
    static: {Fixture$: function() {
        return new V.Fixture(V.AxisAlignedBox$(null, null), null, null, null, null, null, null, null, new V.Filter(0, 0, 0), null, null, V.AxisAlignedBox$(null, null), V.AxisAlignedBox$(null, null));
      }}
  },
  FixtureDef: {
    "^": "Object;shape>,userData@,friction@,restitution@,density<,isSensor?,filter",
    FixtureDef$0: function() {
      var t1 = this.filter;
      t1.categoryBits = 1;
      t1.maskBits = 65535;
      t1.groupIndex = 0;
    },
    static: {FixtureDef$: function() {
        var t1 = new V.FixtureDef(null, null, 0.2, 0, 0, false, new V.Filter(0, 0, 0));
        t1.FixtureDef$0();
        return t1;
      }}
  },
  Island: {
    "^": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
    init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
      var t1, t2, old, t3, i;
      this.bodyCapacity = argBodyCapacity;
      this.contactCapacity = argContactCapacity;
      this.jointCapacity = argJointCapacity;
      this.bodyCount = 0;
      this.contactCount = 0;
      this.listener = argListener;
      t1 = this.bodies;
      if (t1 == null || argBodyCapacity > t1.length)
        this.bodies = H.setRuntimeTypeInfo(Array(argBodyCapacity), [V.Body]);
      t1 = this.contacts;
      if (t1 != null) {
        t2 = this.contactCapacity;
        t1 = t1.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t1 = t2 > t1;
      } else
        t1 = true;
      if (t1) {
        t1 = this.contactCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.contacts = H.setRuntimeTypeInfo(Array(t1), [V.Contact]);
      }
      t1 = this.joints;
      if (t1 != null) {
        t2 = this.jointCapacity;
        t1 = t1.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t1 = t2 > t1;
      } else
        t1 = true;
      if (t1) {
        t1 = this.jointCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.joints = H.setRuntimeTypeInfo(Array(t1), [V.Joint]);
      }
      old = this.velocities;
      t1 = old == null;
      if (!t1) {
        t2 = this.bodyCapacity;
        t3 = old.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t3 = t2 > t3;
        t2 = t3;
      } else
        t2 = true;
      if (t2) {
        if (t1)
          old = H.setRuntimeTypeInfo(Array(0), [V.Velocity]);
        t1 = this.bodyCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [V.Velocity]);
        this.velocities = t1;
        i = old.length;
        C.JSArray_methods.checkMutable$1(t1, "set range");
        H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
        for (; t1 = this.velocities, i < t1.length; ++i) {
          t2 = new V.Velocity(null, null);
          t2.v = new T.Vector2(new Float32Array(2));
          t2.a = 0;
          t1[i] = t2;
        }
      }
      old = this.positions;
      t1 = old == null;
      if (!t1) {
        t2 = this.bodyCapacity;
        t3 = old.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t3 = t2 > t3;
        t2 = t3;
      } else
        t2 = true;
      if (t2) {
        if (t1)
          old = H.setRuntimeTypeInfo(Array(0), [V.Position0]);
        t1 = this.bodyCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [V.Position0]);
        this.positions = t1;
        i = old.length;
        C.JSArray_methods.checkMutable$1(t1, "set range");
        H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
        for (; t1 = this.positions, i < t1.length; ++i) {
          t2 = new V.Position0(null, null);
          t2.x = new T.Vector2(new Float32Array(2));
          t2.a = 0;
          t1[i] = t2;
        }
      }
    },
    clear$0: function(_) {
      this.bodyCount = 0;
      this.contactCount = 0;
      this.jointCount = 0;
    },
    solve$3: function(step, gravity, allowSleep) {
      var t1, i, t2, b, t3, t4, t5, t6, t7, t8, t9, t10, a, a1, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, temp, j, ratio, rotation, contactsOkay, jointsOkay, minSleepTime;
      t1 = gravity.storage;
      i = 0;
      while (true) {
        t2 = this.bodyCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        c$0: {
          t2 = this.bodies;
          if (i >= t2.length)
            return H.ioore(t2, i);
          b = t2[i];
          if (J.get$type$x(b) !== 2)
            break c$0;
          t2 = b.get$_force().storage[0];
          t3 = b.get$invMass();
          t4 = t1[0];
          t5 = step.dt;
          t6 = b.get$_force().storage[1];
          t7 = b.get$invMass();
          t8 = t1[1];
          t9 = step.dt;
          t10 = new Float32Array(2);
          t10[0] = (t2 * t3 + t4) * t5;
          t10[1] = (t6 * t7 + t8) * t9;
          b.get$linearVelocity().add$1(0, new T.Vector2(t10));
          b.set$angularVelocity(b.get$angularVelocity() + step.dt * b.get$invInertia() * b.get$_torque());
          a = 1 - step.dt * b.get$linearDamping();
          t2 = a < 1;
          if (0 > (t2 ? a : 1))
            a1 = 0;
          else
            a1 = t2 ? a : 1;
          t2 = b.get$linearVelocity().storage;
          t2[1] = t2[1] * a1;
          t2[0] = t2[0] * a1;
          a2 = 1 - step.dt * b.get$angularDamping();
          b1 = a2 < 1 ? a2 : 1;
          t2 = b.get$angularVelocity();
          b.set$angularVelocity(t2 * (0 > b1 ? 0 : b1));
        }
        ++i;
      }
      i1 = -1;
      i2 = 0;
      while (true) {
        t1 = this.contactCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i2 < t1))
          break;
        t1 = this.contacts;
        if (i2 >= t1.length)
          return H.ioore(t1, i2);
        fixtureA = t1[i2].get$fixtureA();
        t1 = this.contacts;
        if (i2 >= t1.length)
          return H.ioore(t1, i2);
        fixtureB = t1[i2].get$fixtureB();
        bodyA = J.get$body$x(fixtureA);
        bodyB = J.get$body$x(fixtureB);
        if (bodyA._type !== 0 && bodyB._type !== 0) {
          ++i1;
          t1 = this.contacts;
          t2 = t1.length;
          if (i1 >= t2)
            return H.ioore(t1, i1);
          temp = t1[i1];
          if (i2 >= t2)
            return H.ioore(t1, i2);
          t1[i1] = t1[i2];
          t1[i2] = temp;
        }
        ++i2;
      }
      t2 = this._contactSolver;
      t2.init$3(this.contacts, t1, step.dtRatio);
      t2.warmStart$0();
      i = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.joints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].initVelocityConstraints$1(step);
        ++i;
      }
      for (i = 0; i < step.velocityIterations; ++i) {
        j = 0;
        while (true) {
          t1 = this.jointCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(j < t1))
            break;
          t1 = this.joints;
          if (j >= t1.length)
            return H.ioore(t1, j);
          t1[j].solveVelocityConstraints$1(step);
          ++j;
        }
        t2.solveVelocityConstraints$0();
      }
      t2.storeImpulses$0();
      t1 = new Float32Array(H._checkLength(2));
      temp = new T.Vector2(t1);
      t3 = this._translation;
      t4 = t3.storage;
      i = 0;
      while (true) {
        t5 = this.bodyCount;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (!(i < t5))
          break;
        c$0: {
          t5 = this.bodies;
          if (i >= t5.length)
            return H.ioore(t5, i);
          b = t5[i];
          if (J.get$type$x(b) === 0)
            break c$0;
          t5 = b.get$linearVelocity().storage;
          t4[1] = t5[1];
          t4[0] = t5[0];
          t5 = step.dt;
          t4[1] = t4[1] * t5;
          t4[0] = t4[0] * t5;
          if (t3.dot$1(t3) > 4) {
            ratio = 2 / t3.get$length(t3);
            t5 = b.get$linearVelocity().storage;
            t5[1] = t5[1] * ratio;
            t5[0] = t5[0] * ratio;
          }
          rotation = step.dt * b.get$angularVelocity();
          if (rotation * rotation > 2.4674011002723395) {
            t5 = Math.abs(rotation);
            b.set$angularVelocity(b.get$angularVelocity() * (1.5707963267948966 / t5));
          }
          t5 = b.get$sweep().centerZero.storage;
          t6 = b.get$sweep().center.storage;
          t5[1] = t6[1];
          t5[0] = t6[0];
          b.get$sweep().angleZero = b.get$sweep().angle;
          t6 = b.get$linearVelocity().storage;
          t1[1] = t6[1];
          t1[0] = t6[0];
          t6 = step.dt;
          t1[1] = t1[1] * t6;
          t1[0] = t1[0] * t6;
          b.get$sweep().center.add$1(0, temp);
          t6 = b.get$sweep();
          t6.angle = t6.angle + step.dt * b.get$angularVelocity();
          b.synchronizeTransform$0();
        }
        ++i;
      }
      for (i = 0; i < step.positionIterations; ++i) {
        contactsOkay = t2.solvePositionConstraints$1(0.2);
        jointsOkay = true;
        j = 0;
        while (true) {
          t1 = this.jointCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(j < t1))
            break;
          t1 = this.joints;
          if (j >= t1.length)
            return H.ioore(t1, j);
          t1[j].solvePositionConstraints$1(0.2);
          if (jointsOkay)
            ;
          ++j;
          jointsOkay = false;
        }
        if (contactsOkay && jointsOkay)
          break;
      }
      this.report$1(t2.constraints);
      if (allowSleep) {
        minSleepTime = 99999999999999;
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          c$0: {
            t1 = this.bodies;
            if (i >= t1.length)
              return H.ioore(t1, i);
            b = t1[i];
            if (J.get$type$x(b) === 0)
              break c$0;
            t1 = b.get$flags();
            if (typeof t1 !== "number")
              return t1.$and();
            if ((t1 & 4) === 0) {
              b.set$sleepTime(0);
              minSleepTime = 0;
            }
            t1 = b.get$flags();
            if (typeof t1 !== "number")
              return t1.$and();
            if ((t1 & 4) === 0 || b.get$angularVelocity() * b.get$angularVelocity() > 0.0012184696791468343 || b.get$linearVelocity().dot$1(b.get$linearVelocity()) > 0.0001) {
              b.set$sleepTime(0);
              minSleepTime = 0;
            } else {
              b.set$sleepTime(b.get$sleepTime() + step.dt);
              minSleepTime = P.min(minSleepTime, b.get$sleepTime());
            }
          }
          ++i;
        }
        if (minSleepTime >= 0.5) {
          i = 0;
          while (true) {
            t1 = this.bodyCount;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1))
              break;
            t1 = this.bodies;
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1[i].set$awake(false);
            ++i;
          }
        }
      }
    },
    report$1: function(constraints) {
      var t1, t2, i, t3, cc, j, t4;
      if (this.listener == null)
        return;
      t1 = this.impulse;
      t2 = t1.normalImpulses;
      t1 = t1.tangentImpulses;
      i = 0;
      while (true) {
        t3 = this.contactCount;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        t3 = this.contacts;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t3[i];
        if (i >= constraints.length)
          return H.ioore(constraints, i);
        cc = constraints[i];
        t3 = J.getInterceptor$x(cc);
        j = 0;
        while (true) {
          t4 = cc.get$pointCount();
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(j < t4))
            break;
          t4 = J.$index$asx(t3.get$points(cc), j).get$normalImpulse();
          if (j >= 2)
            return H.ioore(t2, j);
          t2[j] = t4;
          t1[j] = J.$index$asx(t3.get$points(cc), j).get$tangentImpulse();
          ++j;
        }
        this.listener.toString;
        ++i;
      }
    }
  },
  Position0: {
    "^": "Object;x*,a*"
  },
  Velocity: {
    "^": "Object;v<,a*"
  },
  Joint: {
    "^": "Object;"
  },
  TimeStep: {
    "^": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting"
  },
  World: {
    "^": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center<,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
    _addType$3: function(creatorStack, type1, type2) {
      var register, t1, t2, register2;
      register = new V.ContactRegister(null, false);
      register.creator = creatorStack;
      register.primary = true;
      t1 = this._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t2 = t1[type1];
      t2.length;
      if (type2 >= 2)
        return H.ioore(t2, type2);
      t2[type2] = register;
      if (type1 !== type2) {
        register2 = new V.ContactRegister(null, false);
        register2.creator = creatorStack;
        register2.primary = false;
        t1[type2][type1] = register2;
      }
    },
    setGravity$1: function(gravity) {
      var t1, t2;
      t1 = gravity.storage;
      t2 = this._gravity.storage;
      t2[0] = t1[0];
      t2[1] = t1[1];
    },
    popContact$2: function(fixtureA, fixtureB) {
      var type1, type2, t1, reg, creator, c;
      type1 = J.get$type$x(fixtureA);
      type2 = J.get$type$x(fixtureB);
      t1 = this._contactStacks;
      if (type1 >>> 0 !== type1 || type1 >= 2)
        return H.ioore(t1, type1);
      t1 = t1[type1];
      t1.length;
      if (type2 >>> 0 !== type2 || type2 >= 2)
        return H.ioore(t1, type2);
      reg = t1[type2];
      creator = reg.creator;
      if (creator != null) {
        if (creator._head === creator._tail)
          creator = this._getFreshContactStack$2(type1, type2);
        if (reg.primary) {
          c = creator.removeFirst$0();
          c.init$2(fixtureA, fixtureB);
          return c;
        } else {
          c = creator.removeFirst$0();
          c.init$2(fixtureB, fixtureA);
          return c;
        }
      } else
        return;
    },
    _getFreshContactStack$2: function(type1, type2) {
      var t1, t2;
      if (type1 === 0 && type2 === 0)
        return this._pool.getCircleContactStack$0();
      else {
        t1 = type1 === 1 && type2 === 1;
        t2 = this._pool;
        if (t1)
          return t2.getPolyContactStack$0();
        else
          return t2.getPolyCircleContactStack$0();
      }
    },
    createBody$1: function(def) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, b;
      if ((this._flags & 2) === 2)
        return;
      t1 = V.Transform$();
      t2 = V.Sweep$();
      t3 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t3.setFrom$1(def.linearVelocity);
      t4 = def.angularDamping;
      t5 = new Float32Array(H._checkLength(2));
      t6 = def.userData;
      t7 = V.FixtureDef$();
      t8 = new Float32Array(H._checkLength(2));
      t9 = V.Transform$();
      t10 = new Float32Array(H._checkLength(2));
      t11 = new Float32Array(H._checkLength(2));
      b = new V.Body(this, 0, null, 0, t6, t3, 0, null, null, null, null, null, 0, null, new T.Vector2(t5), 0, 0, 0, def.linearDamping, t4, def.type, null, t1, t2, t7, new V.MassData(0, new T.Vector2(t8), 0), t9, new T.Vector2(t10), new T.Vector2(t11));
      b.Body$2(def, this);
      b.prev = null;
      t11 = this._bodyList;
      b.next = t11;
      if (t11 != null)
        t11.set$prev(b);
      this._bodyList = b;
      ++this._bodyCount;
      return b;
    },
    destroyJoint$1: function(joint) {
      var bodyA, bodyB;
      if ((this._flags & 2) === 2)
        return;
      joint.get$collideConnected();
      joint.get$_prev();
      joint.get$_prev().set$_box2d$_next(joint.get$_box2d$_next());
      joint.get$_box2d$_next();
      joint.get$_box2d$_next().set$_prev(joint.get$_prev());
      bodyA = joint.get$bodyA();
      bodyB = joint.get$bodyB();
      bodyA.set$awake(true);
      bodyB.set$awake(true);
      joint.get$edgeA().get$prev();
      joint.get$edgeA().get$prev().set$next(joint.get$edgeA().get$next());
      joint.get$edgeA().get$next();
      joint.get$edgeA().get$next().set$prev(joint.get$edgeA().get$prev());
      joint.get$edgeA();
      bodyA.get$jointList();
      joint.get$edgeA().set$prev(null);
      joint.get$edgeA().set$next(null);
      joint.get$edgeB().get$prev();
      joint.get$edgeB().get$prev().set$next(joint.get$edgeB().get$next());
      joint.get$edgeB().get$next();
      joint.get$edgeB().get$next().set$prev(joint.get$edgeB().get$prev());
      joint.get$edgeB();
      bodyB.get$jointList();
      joint.get$edgeB().set$prev(null);
      joint.get$edgeB().set$next(null);
      joint.destructor$0();
      --this._jointCount;
    },
    destroyBody$1: function(body) {
      var je, je0, ce, ce0, f, f0;
      if ((this._flags & 2) === 2)
        return;
      je = body.get$jointList();
      for (; false; je = je0) {
        je0 = je.get$next();
        this.destroyJoint$1(je.get$joint());
      }
      body.set$jointList(null);
      ce = body.get$contactList();
      for (; ce != null; ce = ce0) {
        ce0 = ce.get$next();
        this._contactManager.destroy$1(ce.get$contact());
      }
      body.set$contactList(null);
      f = body.get$fixtureList();
      for (; f != null; f = f0) {
        f0 = f.get$next();
        f.destroyProxy$1(this._contactManager.broadPhase);
        f.destroy$0();
      }
      body.set$fixtureList(null);
      body.set$fixtureCount(0);
      if (body.get$prev() != null)
        body.get$prev().set$next(body.get$next());
      if (body.get$next() != null)
        body.get$next().set$prev(body.get$prev());
      if (J.$eq(body, this._bodyList))
        this._bodyList = body.get$next();
      --this._bodyCount;
    },
    clearForces$0: function() {
      var body, t1;
      for (body = this._bodyList; body != null; body = body.get$next()) {
        t1 = body.get$_force().storage;
        t1[0] = 0;
        t1[1] = 0;
        body.set$_torque(0);
      }
    },
    get$contactList: function() {
      return this._contactManager.contactList;
    },
    get$jointList: function() {
      return this._jointList;
    },
    solve$1: function(timeStep) {
      var t1, t2, t3, b, c, j, stackSize, seed, t4, stackCount, t5, ce, contact, sensorA, sensorB, other, stackCount0, je, t6, i;
      t1 = this.island;
      t2 = this._bodyCount;
      t3 = this._contactManager;
      t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
      for (b = this._bodyList; b != null; b = b.get$next()) {
        t2 = b.get$flags();
        if (typeof t2 !== "number")
          return t2.$and();
        b.set$flags(t2 & 4294967294);
      }
      for (c = this._contactManager.contactList; c != null; c = c.get$next()) {
        t2 = c.get$flags();
        if (typeof t2 !== "number")
          return t2.$and();
        c.set$flags(t2 & 4294967294);
      }
      for (j = this._jointList; false; j = j.get$_box2d$_next())
        j.set$islandFlag(false);
      stackSize = this._bodyCount;
      if (this.stack.length < stackSize)
        this.stack = H.setRuntimeTypeInfo(Array(stackSize), [V.Body]);
      for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.get$next()) {
        t4 = seed.get$flags();
        if (typeof t4 !== "number")
          return t4.$and();
        if ((t4 & 1) === 1)
          continue;
        if (!seed.get$awake() || !seed.get$active())
          continue;
        if (J.get$type$x(seed) === 0)
          continue;
        t1.bodyCount = 0;
        t1.contactCount = 0;
        t1.jointCount = 0;
        t4 = this.stack;
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        t4[0] = seed;
        t4 = seed.get$flags();
        if (typeof t4 !== "number")
          return t4.$or();
        seed.set$flags(t4 | 1);
        for (stackCount = 1; stackCount > 0;) {
          t4 = this.stack;
          --stackCount;
          if (stackCount >= t4.length)
            return H.ioore(t4, stackCount);
          b = t4[stackCount];
          b.set$islandIndex(t1.bodyCount);
          t4 = t1.bodies;
          t5 = t1.bodyCount;
          if (typeof t5 !== "number")
            return t5.$add();
          t1.bodyCount = t5 + 1;
          if (t5 >= t4.length)
            return H.ioore(t4, t5);
          t4[t5] = b;
          b.set$awake(true);
          if (J.get$type$x(b) === 0)
            continue;
          for (ce = b.get$contactList(); ce != null; ce = ce.get$next()) {
            contact = ce.get$contact();
            t4 = contact.get$flags();
            if (typeof t4 !== "number")
              return t4.$and();
            if ((t4 & 1) === 1)
              continue;
            if (!contact.get$enabled() || !contact.get$touching())
              continue;
            sensorA = contact.get$fixtureA().get$isSensor();
            sensorB = contact.get$fixtureB().get$isSensor();
            if (sensorA === true || sensorB === true)
              continue;
            t4 = t1.contacts;
            t5 = t1.contactCount;
            if (typeof t5 !== "number")
              return t5.$add();
            t1.contactCount = t5 + 1;
            if (t5 >= t4.length)
              return H.ioore(t4, t5);
            t4[t5] = contact;
            t5 = contact.get$flags();
            if (typeof t5 !== "number")
              return t5.$or();
            contact.set$flags(t5 | 1);
            other = ce.get$other();
            t4 = other.flags;
            if (typeof t4 !== "number")
              return t4.$and();
            if ((t4 & 1) === 1)
              continue;
            t5 = this.stack;
            stackCount0 = stackCount + 1;
            if (stackCount >= t5.length)
              return H.ioore(t5, stackCount);
            t5[stackCount] = other;
            other.flags = t4 | 1;
            stackCount = stackCount0;
          }
          for (je = b.get$jointList(); false; je = je.get$next()) {
            je.get$joint().get$islandFlag();
            other = je.get$other();
            other.get$active();
            t4 = je.get$joint();
            t5 = t1.joints;
            t6 = t1.jointCount;
            if (typeof t6 !== "number")
              return t6.$add();
            t1.jointCount = t6 + 1;
            if (t6 >= t5.length)
              return H.ioore(t5, t6);
            t5[t6] = t4;
            je.get$joint().set$islandFlag(true);
            other.get$flags().$and(0, 1);
            t4 = this.stack;
            stackCount0 = stackCount + 1;
            if (stackCount < 0 || stackCount >= t4.length)
              return H.ioore(t4, stackCount);
            t4[stackCount] = other;
            other.set$flags(other.get$flags().$or(0, 1));
            stackCount = stackCount0;
          }
        }
        t1.solve$3(timeStep, t2, t3);
        i = 0;
        while (true) {
          t4 = t1.bodyCount;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          t4 = t1.bodies;
          if (i >= t4.length)
            return H.ioore(t4, i);
          b = t4[i];
          if (J.get$type$x(b) === 0) {
            t4 = b.get$flags();
            if (typeof t4 !== "number")
              return t4.$and();
            b.set$flags(t4 & 4294967294);
          }
          ++i;
        }
      }
      for (b = this._bodyList; b != null; b = b.get$next()) {
        t1 = b.get$flags();
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 1) === 0)
          continue;
        if (J.get$type$x(b) === 0)
          continue;
        b.synchronizeFixtures$0();
      }
      t1 = this._contactManager;
      t1.broadPhase.updatePairs$1(t1.get$_addPair());
    },
    solveTimeOfImpact$0: function() {
      var c, t1, body;
      for (c = this._contactManager.contactList; c != null; c = c.get$next()) {
        t1 = c.get$flags();
        if (typeof t1 !== "number")
          return t1.$or();
        c.set$flags(t1 | 4);
        c.set$toiCount(0);
      }
      for (body = this._bodyList; body != null; body = body.get$next()) {
        t1 = body.get$flags();
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 1) !== 0) {
          t1 = J.getInterceptor$x(body);
          t1 = t1.get$type(body) === 1 || t1.get$type(body) === 0;
        } else
          t1 = true;
        if (t1) {
          t1 = body.get$flags();
          if (typeof t1 !== "number")
            return t1.$or();
          body.set$flags(t1 | 64);
        } else {
          t1 = body.get$flags();
          if (typeof t1 !== "number")
            return t1.$and();
          body.set$flags(t1 & 4294967231);
        }
      }
      for (body = this._bodyList; body != null; body = body.get$next()) {
        t1 = body.get$flags();
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 64) === 64 || body.get$bullet())
          continue;
        this.solveTimeOfImpactGivenBody$1(body);
        t1 = body.get$flags();
        if (typeof t1 !== "number")
          return t1.$or();
        body.set$flags(t1 | 64);
      }
      for (body = this._bodyList; body != null; body = body.get$next()) {
        t1 = body.get$flags();
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 64) === 64 || !body.get$bullet())
          continue;
        this.solveTimeOfImpactGivenBody$1(body);
        t1 = body.get$flags();
        if (typeof t1 !== "number")
          return t1.$or();
        body.set$flags(t1 | 64);
      }
    },
    solveTimeOfImpactGivenBody$1: function(body) {
      var bullet, t1, t2, t3, t4, t5, t6, t7, toiContact, toi, toiOther, iter, ce, found, count, other, type, t8, contact, fixtureA, fixtureB, bodyA, t9, bodyB, i;
      bullet = body.get$bullet();
      t1 = this.toiOutput;
      t2 = this.toiInput;
      t3 = t2.proxyA;
      t4 = t2.proxyB;
      t5 = t2.sweepA;
      t6 = t2.sweepB;
      t7 = this._pool;
      toiContact = null;
      toi = 1;
      toiOther = null;
      iter = 0;
      do {
        for (ce = body.get$contactList(), found = false, count = 0; ce != null; ce = ce.get$next()) {
          if (J.$eq(ce.get$contact(), toiContact))
            continue;
          other = ce.get$other();
          type = other._type;
          if (bullet) {
            t8 = other.flags;
            if (typeof t8 !== "number")
              return t8.$and();
            if ((t8 & 64) === 0)
              continue;
            if (type !== 0) {
              t8 = ce.get$contact().get$flags();
              if (typeof t8 !== "number")
                return t8.$and();
              t8 = (t8 & 16) !== 0;
            } else
              t8 = false;
            if (t8)
              continue;
          } else if (type === 2)
            continue;
          contact = ce.get$contact();
          if (contact.get$enabled()) {
            t8 = contact.get$toiCount();
            if (typeof t8 !== "number")
              return t8.$gt();
            t8 = t8 > 10;
          } else
            t8 = true;
          if (t8)
            continue;
          fixtureA = contact.get$fixtureA();
          fixtureB = contact.get$fixtureB();
          if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
            continue;
          t8 = J.getInterceptor$x(fixtureA);
          bodyA = t8.get$body(fixtureA);
          t9 = J.getInterceptor$x(fixtureB);
          bodyB = t9.get$body(fixtureB);
          t3.setFromShape$1(t8.get$shape(fixtureA));
          t4.setFromShape$1(t9.get$shape(fixtureB));
          t5.setFrom$1(bodyA.sweep);
          t6.setFrom$1(bodyB.sweep);
          t2.tMax = toi;
          t7.timeOfImpact.timeOfImpact$2(t1, t2);
          if (t1.state === 3 && t1.t < toi) {
            toi = t1.t;
            toiOther = other;
            toiContact = contact;
            found = true;
          }
          ++count;
        }
        ++iter;
      } while (found && count > 1 && iter < 50);
      if (toiContact == null) {
        body.advance$1(1);
        return;
      }
      t1 = this.backup;
      t1.setFrom$1(body.get$sweep());
      body.advance$1(toi);
      toiContact.update$1(this._contactManager.contactListener);
      if (!toiContact.get$enabled()) {
        body.get$sweep().setFrom$1(t1);
        this.solveTimeOfImpactGivenBody$1(body);
      }
      t1 = toiContact.get$toiCount();
      if (typeof t1 !== "number")
        return t1.$add();
      toiContact.set$toiCount(t1 + 1);
      ce = body.get$contactList();
      count = 0;
      while (true) {
        if (!(ce != null && count < 32))
          break;
        c$0: {
          if (ce.get$other()._type === 2)
            break c$0;
          contact = ce.get$contact();
          if (!contact.get$enabled())
            break c$0;
          fixtureA = contact.get$fixtureA();
          fixtureB = contact.get$fixtureB();
          if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
            break c$0;
          if (!J.$eq(contact, toiContact))
            contact.update$1(this._contactManager.contactListener);
          if (!contact.get$enabled() || !contact.get$touching())
            break c$0;
          t1 = this.contacts;
          if (count >= 32)
            return H.ioore(t1, count);
          t1[count] = contact;
          ++count;
        }
        ce = ce.get$next();
      }
      t1 = this.toiSolver;
      t1.initialize$3(0, this.contacts, count, body);
      for (i = 0; i < 20; ++i)
        if (t1.solve$1(0.75))
          break;
      if (toiOther._type !== 0) {
        t1 = toiContact.get$flags();
        if (typeof t1 !== "number")
          return t1.$or();
        toiContact.set$flags(t1 | 16);
      }
    },
    World$3: function(gravity, doSleep, argPool) {
      var t1, i, t2;
      this._contactManager = new V.ContactManager(V.BroadPhase$(), null, 0, new V.ContactFilter(), null, this);
      for (t1 = this._contactStacks, i = 0; i < 2; ++i) {
        t2 = Array(2);
        t2.$builtinTypeInfo = [V.ContactRegister];
        t1[i] = t2;
      }
      t1 = this._pool;
      this._addType$3(t1.getCircleContactStack$0(), 0, 0);
      this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
      this._addType$3(t1.getPolyContactStack$0(), 1, 1);
    },
    static: {"^": "World_WORLD_POOL_SIZE,World_WORLD_POOL_CONTAINER_SIZE,World_NEW_FIXTURE,World_LOCKED,World_CLEAR_FORCES", World$: function(gravity, doSleep, argPool) {
        var t1 = new V.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, H.setRuntimeTypeInfo(Array(2), [[P.List, V.ContactRegister]]), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new V.TimeStep(0, 0, 0, 0, 0, true), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new V.WorldQueryWrapper(null, null), new V.TimeOfImpactInput(V.DistanceProxy$(), V.DistanceProxy$(), V.Sweep$(), V.Sweep$(), 0), new V.TimeOfImpactOutput(0, 0), V.Sweep$(), V.TimeOfImpactSolver$(), H.setRuntimeTypeInfo(Array(32), [V.Contact]), new V.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, V.ContactSolver$(), new T.Vector2(new Float32Array(H._checkLength(2))), new V.ContactImpulse(H.setRuntimeTypeInfo(Array(2), [P.$double]), H.setRuntimeTypeInfo(Array(2), [P.$double]))), H.setRuntimeTypeInfo(Array(10), [V.Body]));
        t1.World$3(gravity, doSleep, argPool);
        return t1;
      }}
  },
  WorldQueryWrapper: {
    "^": "Object;broadPhase,callback",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  DefaultWorldPool: {
    "^": "Object;collision,timeOfImpact,distance",
    getCircleContactStack$0: function() {
      var queue, i;
      queue = P.ListQueue$(null, V.CircleContact);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.CircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    getPolyCircleContactStack$0: function() {
      var queue, i;
      queue = P.ListQueue$(null, V.PolygonAndCircleContact);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.PolygonAndCircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    getPolyContactStack$0: function() {
      var queue, i;
      queue = P.ListQueue$(null, V.PolygonContact);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.PolygonContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    DefaultWorldPool$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23;
      t1 = V.SimplexVertex$();
      t2 = V.SimplexVertex$();
      t3 = V.SimplexVertex$();
      t4 = Array(3);
      t4.fixed$length = init;
      t4 = H.setRuntimeTypeInfo(t4, [V.SimplexVertex]);
      t5 = new Float32Array(H._checkLength(2));
      t6 = new Float32Array(H._checkLength(2));
      t6 = new V.Simplex(t1, t2, t3, t4, 0, new T.Vector2(t5), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(t6), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))));
      t6.Simplex$0();
      this.distance = new V.Distance(0, 0, 20, t6, H.setRuntimeTypeInfo(Array(3), [P.$int]), H.setRuntimeTypeInfo(Array(3), [P.$int]), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))));
      t6 = V.DistanceInput$();
      t5 = V.SimplexCache$();
      t4 = V.DistanceOutput$();
      t3 = Array(2);
      t3.fixed$length = init;
      t3 = new V.Collision(this, t5, t6, t4, new V.EdgeResults(0, 0), new V.EdgeResults(0, 0), H.setRuntimeTypeInfo(t3, [V.ClipVertex]), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), H.setRuntimeTypeInfo(Array(2), [V.ClipVertex]), H.setRuntimeTypeInfo(Array(2), [V.ClipVertex]));
      t3.Collision$_construct$1(this);
      this.collision = t3;
      t3 = V.SimplexCache$();
      t4 = V.DistanceInput$();
      t6 = V.Transform$();
      t5 = V.Transform$();
      t2 = V.DistanceOutput$();
      t1 = V.DistanceProxy$();
      t7 = V.DistanceProxy$();
      t8 = new Float32Array(H._checkLength(2));
      t9 = new Float32Array(H._checkLength(2));
      t10 = V.Sweep$();
      t11 = V.Sweep$();
      t12 = new Float32Array(H._checkLength(2));
      t13 = new Float32Array(H._checkLength(2));
      t14 = new Float32Array(H._checkLength(2));
      t15 = new Float32Array(H._checkLength(2));
      t16 = new Float32Array(H._checkLength(2));
      t17 = new Float32Array(H._checkLength(2));
      t18 = new Float32Array(H._checkLength(2));
      t19 = new Float32Array(H._checkLength(2));
      t20 = new Float32Array(H._checkLength(2));
      t21 = new Float32Array(H._checkLength(2));
      t22 = V.Transform$();
      t23 = V.Transform$();
      t23 = new V.TimeOfImpact(t3, t4, t6, t5, t2, new V.SeparationFunction(t1, t7, 0, new T.Vector2(t8), new T.Vector2(t9), t10, t11, new T.Vector2(t12), new T.Vector2(t13), new T.Vector2(t14), new T.Vector2(t15), new T.Vector2(t16), new T.Vector2(t17), new T.Vector2(t18), new T.Vector2(t19), new T.Vector2(t20), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(t21), t22, t23), H.setRuntimeTypeInfo(Array(2), [P.$int]), V.Sweep$(), V.Sweep$(), this);
      t23.TimeOfImpact$_construct$1(this);
      this.timeOfImpact = t23;
    }
  }
}],
["box2d_browser", "package:box2d/box2d_browser.dart", , Y, {
  "^": "",
  CanvasViewportTransform: {
    "^": "ViewportTransform;yFlip,extents,scale,center",
    static: {"^": "CanvasViewportTransform_DEFAULT_DRAWING_SCALE"}
  }
}],
["", "cards.dart", , T, {
  "^": "",
  rateLimit: function(callback, time) {
    var t1 = {};
    t1.waiting_0 = false;
    return new T.rateLimit_closure(t1, callback, time);
  },
  main: [function() {
    var t1, t2, g, t3, t4, shareOffer, onLoadedCallback;
    t1 = {};
    if (window.localStorage.getItem("stars") != null)
      T.StarManager_load();
    else
      $.StarManager_byChapters = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    $.featureManager = new B.FeatureManager();
    t2 = H.interceptedTypeCast(document.querySelector("#graphics"), "$isCanvasElement");
    $.canvas = t2;
    g = J.getContext$1$x(t2, "2d");
    T.updateCanvasPositionAndDimension(null);
    t2 = new D.StateManager(H.setRuntimeTypeInfo([], [D.State]), 0, g);
    t3 = window;
    t4 = t2.get$step(t2);
    C.Window_methods._ensureRequestAnimationFrame$0(t3);
    C.Window_methods._requestAnimationFrame$1(t3, W._wrapZone(t4));
    $.manager = t2;
    t2 = new X.GameEngine(0, false, false, false, true, false, false, null, null, null, null, null, null, null, null, null, null, null, null, null, null, H.setRuntimeTypeInfo([], [X.HItem]), H.setRuntimeTypeInfo([], [V.Body]), null, null, false, false, false, new X.closure(), new X.closure0(), new X.closure1(), 0.25, 0.115, 0, 1, 0);
    t2.g = g;
    t4 = new L.Camera(false, 1, 1, 1, 0, 0, 0, 0, null, null, null, null, false, false, true, true, false, new L.closure2(), new L.closure3(), R.DoubleAnimation$(1, 1, 75), R.DoubleAnimation$(0, 0, 75), R.DoubleAnimation$(0, 0, 75), null);
    t4.e = t2;
    $.Input_camera = t4;
    t2.camera = t4;
    $.engine = t2;
    t4 = $.manager;
    t2 = new F.ParallaxManager(t2, g, 0, 24, 175, 1, H.setRuntimeTypeInfo([], [F.Star]));
    $.parallax = t2;
    t4.states.push(t2);
    t2.start$1(0, null);
    t2 = $.canvas;
    t2.toString;
    t2 = C.EventStreamProvider_mousemove.forElement$1(t2);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(A.Input_onMouseMove$closure()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
    t2 = $.canvas;
    t2.toString;
    t2 = C.EventStreamProvider_mousedown.forElement$1(t2);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(A.Input_onMouseDown$closure()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
    C.EventStreamProvider_mouseup.forTarget$1(window).listen$1(A.Input_onMouseUp$closure());
    t2 = $.canvas;
    t2.toString;
    t2 = C._CustomEventStreamProvider__determineMouseWheelEventType.forElement$1(t2);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(T.rateLimit(A.Input_onMouseWheel$closure(), 18)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
    t2 = $.canvas;
    t2.toString;
    t2 = C.EventStreamProvider_contextmenu.forElement$1(t2);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(A.Input_onContextMenu$closure()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
    C.EventStreamProvider_keydown.forTarget$1(window).listen$1(A.Input_onKeyDown$closure());
    C.EventStreamProvider_keyup.forTarget$1(window).listen$1(A.Input_onKeyUp$closure());
    C.EventStreamProvider_resize.forTarget$1(window).listen$1(T.updateCanvasPositionAndDimension$closure());
    t1.updatedAttemptsUsed_0 = false;
    C._BeforeUnloadEventStreamProvider_beforeunload.forTarget$1(window).listen$1(new T.main_closure(t1));
    C.EventStreamProvider_unload.forTarget$1(window).listen$1(new T.main_closure0(t1));
    shareOffer = document.querySelector(".share-offer");
    onLoadedCallback = new T.main_closure1(shareOffer, new T.main_closure2(shareOffer, document.querySelector(".logo"), document.querySelector(".instructions")));
    t1 = $.get$context();
    if (J.$index$asx(J.$index$asx(t1, "Features"), "initialized") === true)
      onLoadedCallback.call$0();
    else
      J.$index$asx(t1, "Features").callMethod$2("setOnLoadedCallback", [onLoadedCallback]);
    t1 = document.querySelector(".friends-invite-more");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new T.main_closure3(), true);
    t1 = document.querySelector(".close-friends");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new T.main_closure4(), false);
    t1 = document.querySelector("#invite-friends");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new T.main_closure5(), null);
    t1 = document.querySelector("#toggle-physics");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new T.main_closure6(), false);
    t1 = document.querySelector("#restart");
    t1.toString;
    J._addEventListener$3$x(t1, "click", T.promptGameRestart$closure(), false);
    t1 = document.querySelector("#zoom-in");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new T.main_closure7(), null);
    t1 = document.querySelector("#zoom-out");
    t1.toString;
    J._addEventListener$3$x(t1, "click", new T.main_closure8(), null);
    t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".selector"), null);
    t1.forEach$1(t1, new T.main_closure9());
    $.hints = new X.HintManager($.engine, false, false);
    t1 = document.querySelector("#hint");
    t2 = $.hints;
    t2 = t2.get$onClick(t2);
    t1.toString;
    J._addEventListener$3$x(t1, "click", t2, null);
  }, "call$0", "main$closure", 0, 0, 0],
  updateAttempts: function() {
    var attempts, boughtAttempts, t1, t2;
    attempts = A.UserManager_getAsInt("allAttempts");
    boughtAttempts = A.UserManager_getAsInt("boughtAttempts");
    if (J.$eq(attempts, 0) && !J.$eq(boughtAttempts, -1)) {
      t1 = document.querySelector("#toggle-physics");
      t2 = J.getInterceptor$x(t1);
      t2.get$classes(t1).add$1(0, "faded");
      t2.set$title(t1, J.$index$asx(J.$index$asx($.get$context(), "locale"), "spent_all_attempts"));
      return false;
    }
    return true;
  },
  promptGameRestart: [function($event) {
    var t1;
    A.Tooltip_closeAll();
    t1 = $.get$context();
    R.PromptWindow_show(J.$index$asx(J.$index$asx(t1, "locale"), "restart_question"), J.$index$asx(J.$index$asx(t1, "locale"), "surely_want_restart"), "", "", new T.promptGameRestart_closure(), new T.promptGameRestart_closure0(), null, null);
  }, function() {
    return T.promptGameRestart(null);
  }, null, "call$1", "call$0", "promptGameRestart$closure", 0, 2, 21, 22, 4],
  showLevelName: function($name) {
    var el;
    if (!$.GameWizard_showing) {
      el = document.querySelector(".level-name");
      J.set$innerHtml$x(el, $name);
      J.set$display$x(el.style, "block");
      J.set$marginTop$x(el.style, "75px");
      L.animate(el, 150, C.Easing_15, null, P.LinkedHashMap_LinkedHashMap$_literal(["margin-top", 60, "opacity", 1, "font-size", 24], null, null));
      P.Timer_Timer(P.Duration$(0, 0, 0, 0, 0, 3), new T.showLevelName_closure(el));
    }
  },
  updateCanvasPositionAndDimension: [function($event) {
    var t1, r, t2, t3;
    t1 = $.canvas;
    if (t1 != null) {
      r = t1.getBoundingClientRect();
      t1 = J.getInterceptor$x(r);
      $.Input_canvasX = t1.get$left(r);
      $.Input_canvasY = t1.get$top(r);
      $.Input_canvasWidth = t1.get$width(r);
      $.Input_canvasHeight = t1.get$height(r);
      t2 = document.querySelector(".selectors").style;
      t3 = t1.get$top(r);
      t1 = t1.get$height(r);
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof t3 !== "number")
        return t3.$add();
      J.set$top$x(t2, C.JSNumber_methods.toString$0(t3 + t1 / 2 - 70) + "px");
    }
  }, function() {
    return T.updateCanvasPositionAndDimension(null);
  }, null, "call$1", "call$0", "updateCanvasPositionAndDimension$closure", 0, 2, 21, 22, 4],
  applyPhysicsLabelToButton: function() {
    var btn = document.querySelector("#toggle-physics");
    J.get$classes$x(btn).remove$1(0, "rewind");
    btn.textContent = J.$index$asx(J.$index$asx($.get$context(), "locale"), "apply_physics");
    $.engine.rewind$0();
  },
  applyRewindLabelToButton: function(list) {
    var btn;
    if (!$.engine.isRewinding) {
      btn = document.querySelector("#toggle-physics");
      J.get$classes$x(btn).add$1(0, "rewind");
      btn.textContent = J.$index$asx(J.$index$asx($.get$context(), "locale"), "rewind");
      $.engine.togglePhysics$1(true);
    }
  },
  updateBlockButtons: function(engine) {
    var t1, t2, t3;
    t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".selector"), null);
    t1.forEach$1(t1, new T.updateBlockButtons_closure());
    t1 = W._FrozenElementList$_wrap(document.querySelectorAll(".selector"), null);
    t2 = engine.staticBlocksSelected ? 1 : 0;
    t1 = t1._nodeList;
    if (t2 >= t1.length)
      return H.ioore(t1, t2);
    new W._ElementCssClassSet(H.interceptedTypeCast(t1[t2], "$isDivElement")).add$1(0, "current");
    document.querySelector(".static").hidden = J.$eq(engine.level.current.get$staticBlocksRemaining(), 0);
    t2 = document.querySelector(".static .remaining");
    t1 = $.get$sprintf();
    t3 = $.get$context();
    J.set$innerHtml$x(t2, t1.call$2(J.$index$asx(J.$index$asx(t3, "locale"), "left"), [J.toString$0(engine.level.current.get$staticBlocksRemaining())]));
    J.set$innerHtml$x(document.querySelector(".dynamic .remaining"), $.get$sprintf().call$2(J.$index$asx(J.$index$asx(t3, "locale"), "left"), [J.toString$0(engine.level.current.get$dynamicBlocksRemaining())]));
  },
  showMainMenu: function() {
    var t1, t2;
    C.JSArray_methods.set$length($.engine.cards, 0);
    document.querySelector("#continue").hidden = window.localStorage.getItem("last") == null;
    t1 = $.manager;
    t2 = $.engine;
    C.JSArray_methods.remove$1(t1.states, t2);
    J.get$classes$x(document.querySelector(".buttons")).add$1(0, "hidden");
    J.get$classes$x(document.querySelector(".selectors")).add$1(0, "hidden");
    T.fadeBoxIn(document.querySelector("#menu-box"), 500, null);
  },
  blink: function(selector) {
    var btn = document.querySelector(selector);
    J.get$classes$x(btn).add$1(0, "error-blink");
    P.Timer_Timer(P.Duration$(0, 0, 0, 450, 0, 0), new T.blink_closure(btn));
  },
  fadeBoxIn: function(box, duration, callback) {
    J.get$classes$x(box).remove$1(0, "hidden");
    L.animate(box, duration, C.Easing_14, null, P.LinkedHashMap_LinkedHashMap$_literal(["opacity", 1], null, null));
    if (callback != null)
      P.Timer_Timer(P.Duration$(0, 0, 0, duration, 0, 0), callback);
  },
  fadeBoxOut: function(box, duration, callback) {
    L.animate(box, duration, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["opacity", 0], null, null));
    P.Timer_Timer(P.Duration$(0, 0, 0, duration, 0, 0), new T.fadeBoxOut_closure(box, callback));
  },
  rateLimit_closure: {
    "^": "Closure:60;box_0,callback_1,time_2",
    call$1: [function($event) {
      var t1 = this.box_0;
      if (t1.waiting_0)
        return;
      t1.waiting_0 = true;
      P.Timer_Timer(P.Duration$(0, 0, 0, this.time_2, 0, 0), new T.rateLimit__closure(t1, this.callback_1, $event));
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  rateLimit__closure: {
    "^": "Closure:46;box_0,callback_3,event_4",
    call$0: function() {
      this.box_0.waiting_0 = false;
      this.callback_3.call$1(this.event_4);
    }
  },
  main_closure: {
    "^": "Closure:60;box_0",
    call$1: [function($event) {
      var t1;
      $.engine.saveCurrentProgress$0();
      t1 = $.engine.level;
      if (t1 != null && t1.current != null && !this.box_0.updatedAttemptsUsed_0) {
        B.WebApi_updateAttemptsAmount(t1.current.get$attemptsUsed());
        this.box_0.updatedAttemptsUsed_0 = true;
      }
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main_closure0: {
    "^": "Closure:60;box_0",
    call$1: [function($event) {
      var t1 = $.engine.level;
      if (t1 != null && t1.current != null && !this.box_0.updatedAttemptsUsed_0) {
        B.WebApi_updateAttemptsAmount(t1.current.get$attemptsUsed());
        this.box_0.updatedAttemptsUsed_0 = true;
      }
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main_closure2: {
    "^": "Closure:46;shareOffer_1,logo_2,instructions_3",
    call$0: [function() {
      L.animate(this.shareOffer_1, 125, C.Easing_15, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", -75], null, null));
      L.animate(this.logo_2, 225, C.Easing_15, null, P.LinkedHashMap_LinkedHashMap$_literal(["margin-top", 50], null, null));
      L.animate(this.instructions_3, 225, C.Easing_15, null, P.LinkedHashMap_LinkedHashMap$_literal(["margin-bottom", 115], null, null));
    }, "call$0", null, 0, 0, null, "call"]
  },
  main_closure1: {
    "^": "Closure:46;shareOffer_4,slideMenuTop_5",
    call$0: [function() {
      var storage, t1, t2, fp, in_game, after, before;
      T.showMainMenu();
      storage = window.localStorage;
      t1 = storage.getItem("last_share_offer") == null || C.JSNumber_methods._tdivFast$1(new P.DateTime(Date.now(), false).difference$1(P.DateTime_parse(storage.getItem("last_share_offer")))._core$_duration, 3600000000) >= 24;
      t2 = this.slideMenuTop_5;
      if (t1) {
        storage.setItem("last_share_offer", new P.DateTime(Date.now(), false).toString$0(0));
        P.Timer_Timer(P.Duration$(0, 0, 0, 750, 0, 0), new T.main__closure(this.shareOffer_4, t2));
      } else
        t2.call$0();
      D.Chapter_load(new T.main__closure0(t2));
      t1 = $.get$context();
      fp = J.get$length$asx(J.$index$asx(J.$index$asx(t1, "Features"), "friends_in_game"));
      in_game = J.$index$asx(t1, "Features").callMethod$2("getNounPlural", [fp, J.$index$asx(J.$index$asx(t1, "locale"), "play_form1"), J.$index$asx(J.$index$asx(t1, "locale"), "play_form2"), J.$index$asx(J.$index$asx(t1, "locale"), "play_form3")]);
      if (J.$eq(J.$index$asx(J.$index$asx(t1, "qs"), "app_lang"), "en")) {
        after = in_game;
        before = "";
      } else {
        before = in_game;
        after = "";
      }
      J.set$innerHtml$x(document.querySelector("#invite-friends"), J.$add$ns(J.$add$ns(J.$add$ns(J.$add$ns(J.$add$ns(J.$add$ns(before, " <b>"), J.toString$0(fp)), " "), J.$index$asx(t1, "Features").callMethod$2("getNounPlural", [fp, J.$index$asx(J.$index$asx(t1, "locale"), "friend_form1"), J.$index$asx(J.$index$asx(t1, "locale"), "friend_form2"), J.$index$asx(J.$index$asx(t1, "locale"), "friend_form3")])), "</b> "), after));
    }, "call$0", null, 0, 0, null, "call"]
  },
  main__closure: {
    "^": "Closure:46;shareOffer_6,slideMenuTop_7",
    call$0: function() {
      var t1 = this.shareOffer_6;
      L.animate(t1, 125, C.Easing_15, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", 17], null, null));
      t1.toString;
      J._addEventListener$3$x(t1, "click", new T.main___closure1(this.slideMenuTop_7), true);
    }
  },
  main___closure1: {
    "^": "Closure:44;slideMenuTop_8",
    call$1: [function($event) {
      J.$index$asx($.get$context(), "Features").callMethod$2("shareWithFriends", [this.slideMenuTop_8]);
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main__closure0: {
    "^": "Closure:78;slideMenuTop_9",
    call$1: function(chapters) {
      var t1, t2;
      J.$index$asx($.get$context(), "Features").callMethod$1("hideLoading");
      Q.LevelSerializer_syncVersions();
      t1 = document.querySelector("#continue");
      t2 = this.slideMenuTop_9;
      t1.toString;
      J._addEventListener$3$x(t1, "click", new T.main___closure(t2), false);
      t1 = document.querySelector("#new-game");
      t1.toString;
      J._addEventListener$3$x(t1, "click", new T.main___closure0(t2), false);
    }
  },
  main___closure: {
    "^": "Closure:44;slideMenuTop_10",
    call$1: [function($event) {
      var t1, t2, t3;
      this.slideMenuTop_10.call$0();
      t1 = $.manager;
      t2 = $.engine;
      C.JSArray_methods.remove$1(t1.states, t2);
      t2 = $.manager;
      t1 = $.engine;
      t3 = P.LinkedHashMap_LinkedHashMap$_literal(["continue", true, "chapter", J.$index$asx(C.JsonCodec_null_null.decode$1(window.localStorage.getItem("last")), "chapter")], null, null);
      t2.states.push(t1);
      t1.start$1(0, t3);
      T.updateAttempts();
      T.fadeBoxOut(document.querySelector("#menu-box"), 250, new T.main____closure());
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main____closure: {
    "^": "Closure:46;",
    call$0: function() {
      T.updateCanvasPositionAndDimension(null);
      J.get$classes$x(document.querySelector(".buttons")).remove$1(0, "hidden");
      J.get$classes$x(document.querySelector(".selectors")).remove$1(0, "hidden");
    }
  },
  main___closure0: {
    "^": "Closure:44;slideMenuTop_11",
    call$1: [function($event) {
      this.slideMenuTop_11.call$0();
      J.get$classes$x(document.querySelector("#menu-box")).add$1(0, "hidden");
      T.fadeBoxIn(document.querySelector("#chapter-selection"), 500, null);
      O.ChapterShower_show($.Chapter_chapters);
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main_closure3: {
    "^": "Closure:44;",
    call$1: [function($event) {
      J.$index$asx($.get$context(), "Features").callMethod$1("showInviteBox");
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main_closure4: {
    "^": "Closure:44;",
    call$1: [function($event) {
      J.get$classes$x(document.querySelector(".game-box")).remove$1(0, "blurred");
      L.animate(document.querySelector(".friends"), 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", 800, "opacity", 0], null, null));
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main_closure5: {
    "^": "Closure:44;",
    call$1: [function($event) {
      J.get$classes$x(document.querySelector(".friends")).remove$1(0, "hidden");
      L.animate(document.querySelector(".friends"), 125, C.Easing_13, null, P.LinkedHashMap_LinkedHashMap$_literal(["top", 0, "opacity", 1], null, null));
      A.Input_attachSingleEscClickCallback(new T.main__closure2());
      P.Timer_Timer(P.Duration$(0, 0, 0, 125, 0, 0), new T.main__closure3());
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main__closure2: {
    "^": "Closure:46;",
    call$0: function() {
      J.click$0$x(document.querySelector(".close-friends"));
    }
  },
  main__closure3: {
    "^": "Closure:46;",
    call$0: function() {
      J.$index$asx($.get$context(), "Features").callMethod$2("showFriendsBar", [new T.main___closure2()]);
    }
  },
  main___closure2: {
    "^": "Closure:46;",
    call$0: [function() {
      var bar, t1;
      J.get$classes$x(document.querySelector(".game-box")).add$1(0, "blurred");
      bar = Q.Scroll_setup("invitations-vs", "invitations-es", "invitations-scrollbar", "v");
      t1 = $.get$context();
      J.$index$asx(t1, "dw_Scrollbar_Co").callMethod$2("addEvent", [bar, "on_scroll", new T.main____closure0()]);
      t1.callMethod$2("html2canvas", [document.querySelector("#invitations-es"), P.JsObject_JsObject$jsify(P.LinkedHashMap_LinkedHashMap$_literal(["onrendered", new T.main____closure1()], null, null))]);
    }, "call$0", null, 0, 0, null, "call"]
  },
  main____closure0: {
    "^": "Closure:52;",
    call$2: [function(x, y) {
      J.set$transform$x(document.querySelector("#invitations-blur-g").style, C.JSString_methods.$add("translatey(", J.toString$0(J.$add$ns(y, 80))) + "px)");
    }, "call$2", null, 4, 0, null, 50, 51, "call"]
  },
  main____closure1: {
    "^": "Closure:54;",
    call$1: [function(canvas) {
      var t1, g, t2;
      t1 = J.getInterceptor$x(canvas);
      t1.set$id(canvas, "invitations-blur-g");
      document.querySelector(".friends .bs-screen-blurry-bar").appendChild(canvas);
      g = t1.getContext$1(canvas, "2d");
      t2 = J.getInterceptor$x(g);
      t2.set$fillStyle(g, "rgba(0, 0, 0, 0.5)");
      t2.fillRect$4(g, 0, 0, t1.get$width(canvas), t1.get$height(canvas));
    }, "call$1", null, 2, 0, null, 53, "call"]
  },
  main_closure6: {
    "^": "Closure:44;",
    call$1: [function($event) {
      var t1, attempts, boughtAttempts;
      t1 = H.interceptedTypeCast(J.get$target$x($event), "$isButtonElement");
      t1.toString;
      if (!new W._ElementCssClassSet(t1).readClasses$0().contains$1(0, "rewind")) {
        attempts = A.UserManager_getAsInt("allAttempts");
        boughtAttempts = A.UserManager_getAsInt("boughtAttempts");
        if (J.$gt$n(attempts, 0) || J.$eq(boughtAttempts, -1))
          T.applyRewindLabelToButton(null);
        else {
          t1 = $.get$context();
          R.PromptWindow_showSimple(J.$index$asx(J.$index$asx(t1, "locale"), "attempts_lack"), J.$index$asx(J.$index$asx(t1, "locale"), "attempts_lack_message"), J.$index$asx(J.$index$asx(t1, "locale"), "get_attempts"), $.hints.get$getMoreHints());
          B.WebApi_updateAttemptsAmount($.engine.level.current.get$attemptsUsed());
        }
      } else
        T.applyPhysicsLabelToButton();
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main_closure7: {
    "^": "Closure:44;",
    call$1: [function($event) {
      return $.engine.zoom$1(0, true);
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main_closure8: {
    "^": "Closure:44;",
    call$1: [function($event) {
      return $.engine.zoom$1(0, false);
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  main_closure9: {
    "^": "Closure:55;",
    call$1: function(el) {
      J.addEventListener$3$x(el, "click", new T.main__closure1(el), false);
    }
  },
  main__closure1: {
    "^": "Closure:44;el_12",
    call$1: [function($event) {
      var t1, t2, $static, t3;
      t1 = this.el_12;
      t2 = J.getInterceptor$x(t1);
      $static = t2.get$classes(t1).readClasses$0().contains$1(0, "static");
      t3 = $.engine;
      t3.staticBlocksSelected = $static;
      T.updateBlockButtons(t3);
      t2.get$classes(t1).add$1(0, "current");
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  promptGameRestart_closure: {
    "^": "Closure:46;",
    call$0: [function() {
    }, "call$0", null, 0, 0, null, "call"]
  },
  promptGameRestart_closure0: {
    "^": "Closure:61;",
    call$1: function(positive) {
      if (positive)
        $.engine.clear$0(0);
      R.PromptWindow_close();
    }
  },
  showLevelName_closure: {
    "^": "Closure:46;el_0",
    call$0: function() {
      L.animate(this.el_0, 150, C.Easing_15, null, P.LinkedHashMap_LinkedHashMap$_literal(["margin-top", -20, "opacity", 0, "font-size", 32], null, null));
    }
  },
  updateBlockButtons_closure: {
    "^": "Closure:55;",
    call$1: function(s) {
      J.get$classes$x(s).remove$1(0, "current");
    }
  },
  blink_closure: {
    "^": "Closure:46;btn_0",
    call$0: function() {
      J.get$classes$x(this.btn_0).remove$1(0, "error-blink");
    }
  },
  fadeBoxOut_closure: {
    "^": "Closure:46;box_0,callback_1",
    call$0: function() {
      J.get$classes$x(this.box_0).add$1(0, "hidden");
      var t1 = this.callback_1;
      if (t1 != null)
        t1.call$0();
    }
  }
},
1],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooMany: function() {
    return new P.StateError("Too many elements");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1, t2;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = J.getInterceptor$asx(src); i >= srcStart; --i, --j)
        C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
    else
      for (t1 = srcStart + count, t2 = J.getInterceptor$asx(src), j = dstStart, i = srcStart; i < t1; ++i, ++j)
        C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  },
  Lists_indexOf: function(a, element, startIndex, endIndex) {
    var i;
    if (startIndex >= a.length)
      return -1;
    for (i = startIndex; i < endIndex; ++i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
    },
    fold$2: function(_, initialValue, combine) {
      var $length, value, i;
      $length = this.get$length(this);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return value;
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    toList$1$growable: function(_, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(this)), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return t1.$gt();
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2, t3;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$ge();
        t3 = t2 >= $length;
      } else
        t3 = true;
      if (t3)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, t1;
      realIndex = this.get$_startIndex() + index;
      if (index >= 0) {
        t1 = this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this), null, null));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, t1, t2;
      if (count < 0)
        throw H.wrapException(P.RangeError$value(count, null, null));
      newStart = this._start + count;
      t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = newStart >= t1;
      } else
        t2 = false;
      if (t2) {
        t1 = new H.EmptyIterable();
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
      return H.SubListIterable$(this._iterable, newStart, t1, H.getTypeArgumentByIndex(this, 0));
    },
    take$1: function(_, count) {
      var t1, t2, newEnd;
      if (count < 0)
        throw H.wrapException(P.RangeError$value(count, null, null));
      t1 = this._endOrLength;
      t2 = this._start;
      if (t1 == null)
        return H.SubListIterable$(this._iterable, t2, t2 + count, H.getTypeArgumentByIndex(this, 0));
      else {
        newEnd = t2 + count;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < newEnd)
          return this;
        return H.SubListIterable$(this._iterable, t2, newEnd, H.getTypeArgumentByIndex(this, 0));
      }
    },
    toList$1$growable: function(_, growable) {
      var start, t1, t2, end, end0, t3, $length, result, i;
      start = this._start;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      end = t2.get$length(t1);
      end0 = this._endOrLength;
      if (end0 != null) {
        if (typeof end0 !== "number")
          return end0.$lt();
        t3 = end0 < end;
      } else
        t3 = false;
      if (t3)
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length < 0)
        $length = 0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, $length);
      } else
        result = H.setRuntimeTypeInfo(Array($length), [H.getTypeArgumentByIndex(this, 0)]);
      for (i = 0; i < $length; ++i) {
        t3 = t2.elementAt$1(t1, start + i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t3;
        if (t2.get$length(t1) < end)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1, t2;
      t1 = this._start;
      if (t1 < 0)
        throw H.wrapException(P.RangeError$value(t1, null, null));
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t2 < 0)
          throw H.wrapException(P.RangeError$value(t2, null, null));
        if (t1 > t2)
          throw H.wrapException(P.RangeError$range(t1, 0, t2, null, null));
      }
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,__internal$_length,_index,__internal$_current",
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this.__internal$_current = null;
        return false;
      }
      this.__internal$_current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;__internal$_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this.__internal$_current = this._f$1(t1.get$current());
        return true;
      }
      this.__internal$_current = null;
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  SkipIterable: {
    "^": "IterableBase;_iterable,_skipCount",
    skip$1: function(_, n) {
      if (n < 0)
        throw H.wrapException(P.RangeError$value(n, null, null));
      return H.SkipIterable_SkipIterable(this._iterable, this._skipCount + n, H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    SkipIterable$_$2: function(_iterable, _skipCount, $E) {
      if (this._skipCount < 0)
        throw H.wrapException(P.RangeError$(this._skipCount));
    },
    static: {SkipIterable_SkipIterable: function(iterable, skipCount, $E) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, skipCount), [$E]);
          t1.SkipIterable$_$2(iterable, skipCount, $E);
          return t1;
        }
        return H.SkipIterable$_(iterable, skipCount, $E);
      }, SkipIterable$_: function(_iterable, _skipCount, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
        t1.SkipIterable$_$2(_iterable, _skipCount, $E);
        return t1;
      }}
  },
  EfficientLengthSkipIterable: {
    "^": "SkipIterable;_iterable,_skipCount",
    get$length: function(_) {
      var t1, $length;
      t1 = this._iterable;
      $length = t1.get$length(t1) - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    $isEfficientLength: true
  },
  SkipIterator: {
    "^": "Iterator;_iterator,_skipCount",
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  EmptyIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    forEach$1: function(_, action) {
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    map$1: function(_, f) {
      return C.C_EmptyIterable;
    },
    skip$1: function(_, count) {
      if (count < 0)
        throw H.wrapException(P.RangeError$value(count, null, null));
      return this;
    },
    toList$1$growable: function(_, growable) {
      return growable ? H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]) : H.setRuntimeTypeInfo(Array(0), [H.getTypeArgumentByIndex(this, 0)]);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  EmptyIterator: {
    "^": "Object;",
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    }
  },
  IterableMixinWorkaround: {
    "^": "Object;",
    static: {IterableMixinWorkaround_any: function(iterable, f) {
        var t1;
        for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
          if (f.call$1(t1.__internal$_current) === true)
            return true;
        return false;
      }, IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
        var t1;
        for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
          initialValue = combine.call$2(initialValue, t1.__internal$_current);
        return initialValue;
      }, IterableMixinWorkaround_sortList: function(list, compare) {
        if (compare == null)
          compare = P.Comparable_compare$closure();
        H.Sort__doSort(list, 0, list.length - 1, compare);
      }, IterableMixinWorkaround__rangeCheck: function(list, start, end) {
        if (start < 0 || start > list.length)
          throw H.wrapException(P.RangeError$range(start, 0, list.length, null, null));
        if (end < start || end > list.length)
          throw H.wrapException(P.RangeError$range(end, start, list.length, null, null));
      }, IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
        var $length, t1, otherStart, otherList;
        H.IterableMixinWorkaround__rangeCheck(list, start, end);
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount < 0)
          throw H.wrapException(P.ArgumentError$(skipCount));
        t1 = J.getInterceptor(from);
        if (!!t1.$isList) {
          otherStart = skipCount;
          otherList = from;
        } else {
          otherList = t1.skip$1(from, skipCount).toList$1$growable(0, false);
          otherStart = 0;
        }
        if (otherStart + $length > J.get$length$asx(otherList))
          throw H.wrapException(H.IterableElementError_tooFew());
        H.Lists_copy(otherList, otherStart, list, start, $length);
      }}
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1: [function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }, "call$1", "get$remove", 2, 0, 72],
    clear$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
    }
  },
  Symbol0: {
    "^": "Object;_name<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isSymbol0 && J.$eq(this._name, other._name);
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    },
    toString$0: function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    },
    $isSymbol0: true,
    static: {"^": "Symbol_reservedWordRE,Symbol_publicIdentifierRE,Symbol_identifierRE,Symbol_operatorRE,Symbol_publicSymbolPattern,Symbol_symbolPattern"}
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(function(victim, hasOwnProperty) {
      var result = [];
      for (var key in victim) {
        if (hasOwnProperty.call(victim, key))
          result.push(key);
      }
      return result;
    }(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = Array;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    var t1, div, span;
    t1 = {};
    if (self.scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    if (self.MutationObserver != null && self.document != null) {
      div = self.document.createElement("div");
      span = self.document.createElement("span");
      t1.storedCallback_0 = null;
      new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
      return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
    } else if (self.setImmediate != null)
      return P._AsyncRun__scheduleImmediateWithSetImmediate$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 23],
  _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 23],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P.Timer__createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 23],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  _asyncRunCallbackLoop: function() {
    var t1, t2;
    for (; t1 = $._nextCallback, t1 != null;) {
      $._lastPriorityCallback = null;
      t2 = t1.get$next();
      $._nextCallback = t2;
      if (t2 == null)
        $._lastCallback = null;
      t1.callback$0();
    }
  },
  _asyncRunCallback: [function() {
    $._isInCallbackLoop = true;
    try {
      P._asyncRunCallbackLoop();
    } finally {
      $._lastPriorityCallback = null;
      $._isInCallbackLoop = false;
      if ($._nextCallback != null)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    }
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 0],
  _scheduleAsyncCallback: function(callback) {
    var t1, newEntry;
    if ($._nextCallback == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      if (!$._isInCallbackLoop)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      newEntry = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback.next = newEntry;
      $._lastCallback = newEntry;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (C.C__RootZone === t1) {
      P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
      return;
    }
    P._rootScheduleMicrotask(null, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    if (onCancel == null)
      return sync ? new P._NoCallbackSyncStreamController(null, 0, null) : new P._NoCallbackAsyncStreamController(null, 0, null);
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
    var t1;
    if (sync) {
      t1 = H.setRuntimeTypeInfo(new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
    } else {
      t1 = H.setRuntimeTypeInfo(new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
    }
    return t1;
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(null, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 8, 24],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 25, 22, 26, 27],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 0],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, replacement, error, stackTrace, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      $.Zone__current.toString;
      replacement = null;
      if (replacement == null)
        onError.call$2(e, s);
      else {
        t1 = J.get$error$x(replacement);
        error = t1;
        stackTrace = replacement.get$stackTrace();
        onError.call$2(error, stackTrace);
      }
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  _addErrorWithReplacement: function(sink, error, stackTrace) {
    $.Zone__current.toString;
    sink._addError$2(error, stackTrace);
  },
  Timer_Timer: function(duration, callback) {
    var t1, milliseconds;
    t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      milliseconds = C.JSNumber_methods._tdivFast$1(duration._core$_duration, 1000);
      return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    }
    t1 = t1.bindCallback$2$runGuarded(callback, true);
    milliseconds = C.JSNumber_methods._tdivFast$1(duration._core$_duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, t1);
  },
  Timer_Timer$periodic: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P.Timer__createPeriodicTimer(duration, callback);
    }
    return P.Timer__createPeriodicTimer(duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
  },
  Timer__createTimer: function(duration, callback) {
    var milliseconds = C.JSNumber_methods._tdivFast$1(duration._core$_duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Timer__createPeriodicTimer: function(duration, callback) {
    var milliseconds = C.JSNumber_methods._tdivFast$1(duration._core$_duration, 1000);
    return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    var t1, entry, t2;
    t1 = new P._rootHandleUncaughtError_closure(error, stackTrace);
    entry = new P._AsyncCallbackEntry(t1, null);
    t2 = $._nextCallback;
    if (t2 == null) {
      P._scheduleAsyncCallback(t1);
      $._lastPriorityCallback = $._lastCallback;
    } else {
      t1 = $._lastPriorityCallback;
      if (t1 == null) {
        entry.next = t2;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t1.next;
        t1.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    }
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    var t1 = C.C__RootZone !== zone;
    if (t1)
      f = zone.bindCallback$2$runGuarded(f, !(!t1 || C.C__RootZone.get$errorZone() === zone));
    P._scheduleAsyncCallback(f);
  },
  _AsyncRun__initializeScheduleImmediate_internalCallback: {
    "^": "Closure:44;box_0",
    call$1: [function(_) {
      var t1, f;
      H.leaveJsAsync();
      t1 = this.box_0;
      f = t1.storedCallback_0;
      t1.storedCallback_0 = null;
      f.call$0();
    }, "call$1", null, 2, 0, null, 79, "call"]
  },
  _AsyncRun__initializeScheduleImmediate_closure: {
    "^": "Closure:80;box_0,div_1,span_2",
    call$1: function(callback) {
      var t1, t2;
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      this.box_0.storedCallback_0 = callback;
      t1 = this.div_1;
      t2 = this.span_2;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    }
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:46;callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
    "^": "Closure:46;callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }, "call$0", null, 0, 0, null, "call"]
  },
  _UncaughtAsyncError: {
    "^": "AsyncError;error,stackTrace",
    toString$0: function(_) {
      var result, t1;
      result = "Uncaught Error: " + H.S(this.error);
      t1 = this.stackTrace;
      return t1 != null ? result + ("\nStack Trace:\n" + H.S(t1)) : result;
    },
    static: {_UncaughtAsyncError$: function(error, stackTrace) {
        return new P._UncaughtAsyncError(error, P._UncaughtAsyncError__getBestStackTrace(error, stackTrace));
      }, _UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
        if (stackTrace != null)
          return stackTrace;
        if (!!J.getInterceptor(error).$isError)
          return error.get$stackTrace();
        return;
      }}
  },
  _BroadcastStream: {
    "^": "_ControllerStream;_async$_controller"
  },
  _BroadcastSubscription: {
    "^": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    get$_async$_controller: function() {
      return this._async$_controller;
    },
    _expectsEvent$1: function(eventId) {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) === eventId;
    },
    _toggleEventId$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$xor();
      this._eventState = t1 ^ 1;
    },
    get$_isFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    _setRemoveAfterFiring$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$or();
      this._eventState = t1 | 4;
    },
    get$_removeAfterFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 0],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 0],
    static: {"^": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING"}
  },
  _BroadcastStreamController: {
    "^": "Object;_async$_next@,_async$_previous@",
    get$isPaused: function() {
      return false;
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      this._doneFuture = t1;
      return t1;
    },
    _removeListener$1: function(subscription) {
      var previous, next;
      previous = subscription.get$_async$_previous();
      next = subscription.get$_async$_next();
      previous.set$_async$_next(next);
      next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t1, t2, subscription;
      if ((this._state & 4) !== 0) {
        if (onDone == null)
          onDone = P._nullDoneHandler$closure();
        t1 = new P._DoneStreamSubscription($.Zone__current, 0, onDone);
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        t1._schedule$0();
        return t1;
      }
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = new P._BroadcastSubscription(null, null, null, this, null, null, null, t1, t2, null, null);
      subscription.$builtinTypeInfo = this.$builtinTypeInfo;
      subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
      subscription._async$_previous = subscription;
      subscription._async$_next = subscription;
      t2 = this._async$_previous;
      subscription._async$_previous = t2;
      subscription._async$_next = this;
      t2.set$_async$_next(subscription);
      this._async$_previous = subscription;
      subscription._eventState = this._state & 1;
      if (this._async$_next === subscription)
        P._runGuarded(this._onListen);
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      if (subscription.get$_async$_next() === subscription)
        return;
      if (subscription.get$_isFiring())
        subscription._setRemoveAfterFiring$0();
      else {
        this._removeListener$1(subscription);
        if ((this._state & 2) === 0 && this._async$_next === this)
          this._callOnCancel$0();
      }
      return;
    },
    _recordPause$1: function(subscription) {
    },
    _recordResume$1: function(subscription) {
    },
    _addEventError$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add new events after calling close");
      return new P.StateError("Cannot add new events while doing an addStream");
    },
    add$1: [function(_, data) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendData$1(data);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 81],
    addError$2: [function(error, stackTrace) {
      error = error != null ? error : new P.NullThrownError();
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      $.Zone__current.toString;
      this._sendError$2(error, stackTrace);
    }, function(error) {
      return this.addError$2(error, null);
    }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 82, 22, 26, 27],
    close$0: function(_) {
      var t1, doneFuture;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._addEventError$0());
      this._state = t1 | 4;
      doneFuture = this._ensureDoneFuture$0();
      this._sendDone$0();
      return doneFuture;
    },
    _async$_add$1: function(data) {
      this._sendData$1(data);
    },
    _addError$2: function(error, stackTrace) {
      this._sendError$2(error, stackTrace);
    },
    _close$0: function() {
      var addState = this._addStreamState;
      this._addStreamState = null;
      this._state &= 4294967287;
      C.JSNull_methods.complete$0(addState);
    },
    _forEachListener$1: function(action) {
      var t1, link, id, link0;
      t1 = this._state;
      if ((t1 & 2) !== 0)
        throw H.wrapException(P.StateError$("Cannot fire new event. Controller is already firing an event"));
      link = this._async$_next;
      if (link === this)
        return;
      id = t1 & 1;
      this._state = t1 ^ 3;
      for (; link !== this;)
        if (link._expectsEvent$1(id)) {
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$or();
          link.set$_eventState(t1 | 2);
          action.call$1(link);
          link._toggleEventId$0();
          link0 = link.get$_async$_next();
          if (link.get$_removeAfterFiring())
            this._removeListener$1(link);
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$and();
          link.set$_eventState(t1 & 4294967293);
          link = link0;
        } else
          link = link.get$_async$_next();
      this._state &= 4294967293;
      if (this._async$_next === this)
        this._callOnCancel$0();
    },
    _callOnCancel$0: function() {
      if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
        this._doneFuture._asyncComplete$1(null);
      P._runGuarded(this._onCancel);
    }
  },
  _SyncBroadcastStreamController: {
    "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      var t1 = this._async$_next;
      if (t1 === this)
        return;
      if (t1.get$_async$_next() === this) {
        this._state |= 2;
        this._async$_next._async$_add$1(data);
        this._state &= 4294967293;
        if (this._async$_next === this)
          this._callOnCancel$0();
        return;
      }
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
    },
    _sendError$2: function(error, stackTrace) {
      if (this._async$_next === this)
        return;
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0: function() {
      if (this._async$_next !== this)
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
      else
        this._doneFuture._asyncComplete$1(null);
    }
  },
  _SyncBroadcastStreamController__sendData_closure: {
    "^": "Closure;this_0,data_1",
    call$1: function(subscription) {
      subscription._async$_add$1(this.data_1);
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _SyncBroadcastStreamController__sendError_closure: {
    "^": "Closure;this_0,error_1,stackTrace_2",
    call$1: function(subscription) {
      subscription._addError$2(this.error_1, this.stackTrace_2);
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _SyncBroadcastStreamController__sendDone_closure: {
    "^": "Closure;this_0",
    call$1: function(subscription) {
      subscription._close$0();
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BroadcastSubscription", args: [[P._BroadcastSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _AsyncBroadcastStreamController: {
    "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      var link;
      for (link = this._async$_next; link !== this; link = link.get$_async$_next())
        link._addPending$1(new P._DelayedData(data, null));
    },
    _sendError$2: function(error, stackTrace) {
      var link;
      for (link = this._async$_next; link !== this; link = link.get$_async$_next())
        link._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _sendDone$0: function() {
      var link = this._async$_next;
      if (link !== this)
        for (; link !== this; link = link.get$_async$_next())
          link._addPending$1(C.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  _Completer: {
    "^": "Object;",
    completeError$2: [function(error, stackTrace) {
      error = error != null ? error : new P.NullThrownError();
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      $.Zone__current.toString;
      this._completeError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 82, 22, 26, 27]
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    complete$1: function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  },
  _FutureListener: {
    "^": "Object;_nextListener@,result>,state,callback,errorCallback",
    callback$0: function() {
      return this.callback.call$0();
    },
    get$_zone: function() {
      return this.result.get$_zone();
    },
    get$handlesValue: function() {
      return (this.state & 1) !== 0;
    },
    get$hasErrorTest: function() {
      return this.state === 6;
    },
    get$handlesComplete: function() {
      return this.state === 8;
    },
    get$_onValue: function() {
      return this.callback;
    },
    get$_onError: function() {
      return this.errorCallback;
    },
    get$_errorTest: function() {
      return this.callback;
    },
    get$_whenCompleteAction: function() {
      return this.callback;
    },
    static: {"^": "_FutureListener_MASK_VALUE,_FutureListener_MASK_ERROR,_FutureListener_MASK_TEST_ERROR,_FutureListener_MASK_WHENCOMPLETE,_FutureListener_STATE_CHAIN,_FutureListener_STATE_THEN,_FutureListener_STATE_THEN_ONERROR,_FutureListener_STATE_CATCHERROR,_FutureListener_STATE_CATCHERROR_TEST,_FutureListener_STATE_WHENCOMPLETE"}
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners",
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    then$2$onError: function(f, onError) {
      var result, t1;
      result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1 = result._zone;
      if (t1 !== C.C__RootZone) {
        t1.toString;
        if (onError != null)
          onError = P._registerErrorHandler(onError, t1);
      }
      t1 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(null, result, t1, f, onError));
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      result = new P._Future(0, t1, null);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      if (t1 !== C.C__RootZone)
        t1.toString;
      this._addListener$1(new P._FutureListener(null, result, 8, action, null));
      return result;
    },
    _markPendingCompletion$0: function() {
      if (this._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      this._state = 1;
    },
    get$_async$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setErrorObject$1: function(error) {
      this._state = 8;
      this._resultOrListeners = error;
    },
    _setError$2: function(error, stackTrace) {
      this._setErrorObject$1(new P.AsyncError(error, stackTrace));
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(new P.AsyncError(error, stackTrace));
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 25, 22, 26, 27],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              this._markPendingCompletion$0();
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future__chainForeignFuture: function(source, target) {
        target.set$_isChained(true);
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        var listener;
        target.set$_isChained(true);
        listener = new P._FutureListener(null, target, 0, null, null);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, listener);
        else
          source._addListener$1(listener);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, listeners0, sourceValue, zone, oldZone, chainSource, result;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          hasError = t2.get$_hasError();
          if (listeners == null) {
            if (hasError) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(null, null, t2, t3, t4);
            }
            return;
          }
          for (; listeners.get$_nextListener() != null; listeners = listeners0) {
            listeners0 = listeners.get$_nextListener();
            listeners.set$_nextListener(null);
            P._Future__propagateToListeners(t1.source_4, listeners);
          }
          t3.listenerHasValue_1 = true;
          sourceValue = hasError ? null : t1.source_4.get$_async$_value();
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (!t2 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
            zone = listeners.get$_zone();
            if (hasError) {
              t4 = t1.source_4.get$_zone();
              t4.toString;
              if (t4 == null ? zone != null : t4 !== zone) {
                t4 = t4.get$errorZone();
                zone.toString;
                t4 = t4 === zone;
              } else
                t4 = true;
              t4 = !t4;
            } else
              t4 = false;
            if (t4) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(null, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if (listeners.get$handlesValue())
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$handlesComplete())
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              result = J.get$result$x(listeners);
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  result.set$_isChained(true);
                  t1.source_4 = chainSource;
                  listeners = new P._FutureListener(null, result, 0, null, null);
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, result);
              else
                P._Future__chainForeignFuture(chainSource, result);
              return;
            }
          }
          result = J.get$result$x(listeners);
          listeners = result._removeListeners$0();
          t2 = t3.listenerHasValue_1;
          t3 = t3.listenerValueOrError_2;
          if (t2 === true)
            result._setValue$1(t3);
          else
            result._setErrorObject$1(t3);
          t1.source_4 = result;
          t2 = result;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:46;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:44;target_0",
    call$1: [function(value) {
      this.target_0._completeWithValue$1(value);
    }, "call$1", null, 2, 0, null, 24, "call"]
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:83;target_1",
    call$2: [function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 22, 26, 27, "call"]
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:46;this_0,coreFuture_1",
    call$0: function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:46;this_2,value_3",
    call$0: function() {
      this.this_2._completeWithValue$1(this.value_3);
    }
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:46;this_0,error_1,stackTrace_2",
    call$0: function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:84;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, exception, t1;
      try {
        this.box_1.listenerValueOrError_2 = this.zone_5.runUnary$2(this.listener_3.get$_onValue(), this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P.AsyncError(e, s);
        return false;
      }

    }
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:0;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, matchesTest, test, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
      asyncError = this.box_2.source_4.get$_error();
      matchesTest = true;
      t1 = this.listener_6;
      if (t1.get$hasErrorTest()) {
        test = t1.get$_errorTest();
        try {
          matchesTest = this.zone_7.runUnary$2(test, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      }
      errorCallback = t1.get$_onError();
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2)
            t4.listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          else
            t4.listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:0;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, completeResult, t2, exception, result;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        completeResult = this.zone_10.run$1(this.listener_9.get$_whenCompleteAction());
        t1.completeResult_0 = completeResult;
        t2 = completeResult;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t1 = J.get$error$x(this.box_2.source_4.get$_error());
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this.box_1;
        if (t1)
          t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t2.listenerValueOrError_2 = new P.AsyncError(e, s);
        t2.listenerHasValue_1 = false;
        return;
      }

      if (!!J.getInterceptor(t2).$isFuture) {
        result = J.get$result$x(this.listener_9);
        result.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, result), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, result));
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:44;box_2,result_11",
    call$1: [function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, new P._FutureListener(null, this.result_11, 0, null, null));
    }, "call$1", null, 2, 0, null, 85, "call"]
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:83;box_0,result_12",
    call$2: [function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, new P._FutureListener(null, this.result_12, 0, null, null));
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 22, 26, 27, "call"]
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next@",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    map$1: function(_, convert) {
      return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.$int]);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.bool]);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var result, future;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [[P.List, H.getRuntimeTypeArgument(this, "Stream", 0)]]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    },
    skip$1: function(_, count) {
      var t1 = H.setRuntimeTypeInfo(new P._SkipStream(count, this), [null]);
      t1._SkipStream$2(this, count, null);
      return t1;
    }
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: [function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    }, "call$1", null, 2, 0, null, 37, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:46;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "^": "Closure:44;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "^": "Closure:46;future_6",
    call$0: [function() {
      this.future_6._complete$1(null);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_length_closure: {
    "^": "Closure:44;box_0",
    call$1: [function(_) {
      ++this.box_0.count_0;
    }, "call$1", null, 2, 0, null, 79, "call"]
  },
  Stream_length_closure0: {
    "^": "Closure:46;box_0,future_1",
    call$0: [function() {
      this.future_1._complete$1(this.box_0.count_0);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_isEmpty_closure: {
    "^": "Closure:44;box_0,future_1",
    call$1: [function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }, "call$1", null, 2, 0, null, 79, "call"]
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:46;future_2",
    call$0: [function() {
      this.future_2._complete$1(true);
    }, "call$0", null, 0, 0, null, "call"]
  },
  Stream_toList_closure: {
    "^": "Closure;this_0,result_1",
    call$1: [function(data) {
      this.result_1.push(data);
    }, "call$1", null, 2, 0, null, 81, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_0, "Stream");
    }
  },
  Stream_toList_closure0: {
    "^": "Closure:46;result_2,future_3",
    call$0: [function() {
      this.future_3._complete$1(this.result_2);
    }, "call$0", null, 0, 0, null, "call"]
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _StreamController: {
    "^": "Object;",
    get$isPaused: function() {
      var t1 = this._state;
      return (t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0;
    },
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      var t1, state;
      if ((this._state & 8) === 0) {
        t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      state = this._varData;
      state.get$varData();
      return state.get$varData();
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    add$1: function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    },
    _async$_add$1: function(value) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, null);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state |= 1;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, e, s, exception, t1, result0;
      result = null;
      if ((this._state & 8) !== 0)
        result = this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      if (this.get$_onCancel() != null)
        if (result == null)
          try {
            result = this._onCancel$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = new H._StackTrace(exception, null);
            result0 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }

        else
          result = result.whenComplete$1(this.get$_onCancel());
      t1 = new P._StreamController__recordCancel_complete(this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    _recordPause$1: function(subscription) {
      if ((this._state & 8) !== 0)
        this._varData.pause$0(0);
      P._runGuarded(this.get$_onPause());
    },
    _recordResume$1: function(subscription) {
      if ((this._state & 8) !== 0)
        this._varData.resume$0();
      P._runGuarded(this.get$_onResume());
    }
  },
  _StreamController__subscribe_closure: {
    "^": "Closure:46;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "^": "Closure:0;this_0",
    call$0: [function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _SyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    }
  },
  _AsyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    }
  },
  _AsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    _onCancel$0: function() {
      return this._onCancel.call$0();
    }
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;"
  },
  _SyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    _onCancel$0: function() {
      return this._onCancel.call$0();
    }
  },
  _StreamController__SyncStreamControllerDispatch: {
    "^": "_StreamController+_SyncStreamControllerDispatch;"
  },
  _NoCallbacks: {
    "^": "Object;",
    get$_onListen: function() {
      return;
    },
    get$_onPause: function() {
      return;
    },
    get$_onResume: function() {
      return;
    },
    get$_onCancel: function() {
      return;
    },
    _onCancel$0: function() {
      return this.get$_onCancel().call$0();
    }
  },
  _NoCallbackAsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch0: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;",
    $as_StreamController: function() {
      return [null];
    }
  },
  _NoCallbackSyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch0: {
    "^": "_StreamController+_SyncStreamControllerDispatch;",
    $as_StreamController: function() {
      return [null];
    }
  },
  _ControllerStream: {
    "^": "_StreamImpl;_async$_controller",
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return this._async$_controller._subscribe$4(onData, onError, onDone, cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller<,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this.get$_async$_controller()._recordCancel$1(this);
    },
    _onPause$0: [function() {
      this.get$_async$_controller()._recordPause$1(this);
    }, "call$0", "get$_onPause", 0, 0, 0],
    _onResume$0: [function() {
      this.get$_async$_controller()._recordResume$1(this);
    }, "call$0", "get$_onResume", 0, 0, 0]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_async$_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        this._pending.schedule$1(this);
      }
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    get$_isInputPaused: function() {
      return (this._state & 4) !== 0;
    },
    get$isPaused: function() {
      return this._state >= 128;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 0],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 0],
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0) {
        t1 = this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      var t1 = this._zone;
      t1.toString;
      this._async$_onData = onData;
      this._onError = P._registerErrorHandler(onError == null ? P._nullErrorHandler$closure() : onError, t1);
      this._onDone = onDone == null ? P._nullDoneHandler$closure() : onDone;
    },
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT", _BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
        var t1, t2;
        t1 = $.Zone__current;
        t2 = cancelOnError ? 1 : 0;
        t2 = H.setRuntimeTypeInfo(new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null), [$T]);
        t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
        return t2;
      }}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:0;this_0,error_1,stackTrace_2",
    call$0: [function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._onError;
      t3 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
      t4 = t1._zone;
      t5 = this.error_1;
      t6 = t1._onError;
      if (t3)
        t4.runBinaryGuarded$3(t6, t5, this.stackTrace_2);
      else
        t4.runUnaryGuarded$2(t6, t5);
      t1._state = (t1._state & 4294967263) >>> 0;
    }, "call$0", null, 0, 0, null, "call"]
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:0;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:46;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    },
    clear$0: function(_) {
      if (this._state === 1)
        this._state = 3;
      this.lastPendingEvent = null;
      this.firstPendingEvent = null;
    }
  },
  _DoneStreamSubscription: {
    "^": "Object;_zone<,_state,_onDone",
    get$isPaused: function() {
      return this._state >= 4;
    },
    _schedule$0: function() {
      var t1, t2;
      if ((this._state & 2) !== 0)
        return;
      t1 = this._zone;
      t2 = this.get$_sendDone();
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, t2);
      this._state = (this._state | 2) >>> 0;
    },
    pause$1: function(_, resumeSignal) {
      this._state += 4;
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if (t1 >= 4) {
        t1 -= 4;
        this._state = t1;
        if (t1 < 4 && (t1 & 1) === 0)
          this._schedule$0();
      }
    },
    cancel$0: function() {
      return;
    },
    _sendDone$0: [function() {
      var t1 = (this._state & 4294967293) >>> 0;
      this._state = t1;
      if (t1 >= 4)
        return;
      this._state = (t1 | 1) >>> 0;
      this._zone.runGuarded$1(this._onDone);
    }, "call$0", "get$_sendDone", 0, 0, 0],
    static: {"^": "_DoneStreamSubscription__DONE_SENT,_DoneStreamSubscription__SCHEDULED,_DoneStreamSubscription__PAUSED"}
  },
  _cancelAndError_closure: {
    "^": "Closure:46;future_0,error_1,stackTrace_2",
    call$0: [function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:86;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  _cancelAndValue_closure: {
    "^": "Closure:46;future_0,value_1",
    call$0: [function() {
      return this.future_0._complete$1(this.value_1);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      t4 = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      t4._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t2);
      t4._ForwardingStreamSubscription$5(this, onData, onError, onDone, cancelOnError, t1, t2);
      return t4;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 0],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 0],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 81],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 87, 26, 27],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 0],
    _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  _MapStream: {
    "^": "_ForwardingStream;_transform,_async$_source",
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        P._addErrorWithReplacement(sink, e, s);
        return;
      }

      sink._async$_add$1(outputEvent);
    }
  },
  _SkipStream: {
    "^": "_ForwardingStream;_remaining,_async$_source",
    _handleData$2: function(inputEvent, sink) {
      var t1 = this._remaining;
      if (t1 > 0) {
        this._remaining = t1 - 1;
        return;
      }
      sink._async$_add$1(inputEvent);
    },
    _SkipStream$2: function(source, count, $T) {
      if (count < 0)
        throw H.wrapException(P.ArgumentError$(count));
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  Timer: {
    "^": "Object;"
  },
  AsyncError: {
    "^": "Object;error>,stackTrace<",
    toString$0: function(_) {
      return J.toString$0(this.error);
    },
    $isError: true
  },
  _Zone: {
    "^": "Object;"
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:46;error_0,stackTrace_1",
    call$0: function() {
      throw H.wrapException(P._UncaughtAsyncError$(this.error_0, this.stackTrace_1));
    }
  },
  _RootZone: {
    "^": "_Zone;",
    get$parent: function(_) {
      return;
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$0();
          return t1;
        }
        t1 = P._rootRun(null, null, this, f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$1(arg);
          return t1;
        }
        t1 = P._rootRunUnary(null, null, this, f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$2(arg1, arg2);
          return t1;
        }
        t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindCallback_closure(this, f);
      else
        return new P._RootZone_bindCallback_closure0(this, f);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      else
        return new P._RootZone_bindUnaryCallback_closure0(this, f);
    },
    $index: function(_, key) {
      return;
    },
    run$1: function(f) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f);
    },
    runUnary$2: function(f, arg) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2);
    },
    static: {"^": "_RootZone__rootMap,_RootZone__rootDelegate"}
  },
  _RootZone_bindCallback_closure: {
    "^": "Closure:46;this_0,f_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.f_1);
    }
  },
  _RootZone_bindCallback_closure0: {
    "^": "Closure:46;this_2,f_3",
    call$0: function() {
      return this.this_2.run$1(this.f_3);
    }
  },
  _RootZone_bindUnaryCallback_closure: {
    "^": "Closure:44;this_0,f_1",
    call$1: [function(arg) {
      return this.this_0.runUnaryGuarded$2(this.f_1, arg);
    }, "call$1", null, 2, 0, null, 88, "call"]
  },
  _RootZone_bindUnaryCallback_closure0: {
    "^": "Closure:44;this_2,f_3",
    call$1: [function(arg) {
      return this.this_2.runUnary$2(this.f_3, arg);
    }, "call$1", null, 2, 0, null, 88, "call"]
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 28],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 29, 30],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (P.IterableBase__isToStringVisiting(iterable)) {
      if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
      return leftDelimiter + "..." + rightDelimiter;
    }
    parts = [];
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      P.IterableBase__iterablePartsToStrings(iterable, parts);
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = P.StringBuffer$(leftDelimiter);
    t1.writeAll$2(parts, ", ");
    t1.write$1(rightDelimiter);
    t1 = t1._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (P.IterableBase__isToStringVisiting(iterable))
      return leftDelimiter + "..." + rightDelimiter;
    buffer = P.StringBuffer$(leftDelimiter);
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      buffer.writeAll$2(iterable, ", ");
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    buffer.write$1(rightDelimiter);
    t1 = buffer.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase__isToStringVisiting: function(o) {
    var i, t1;
    for (i = 0; t1 = $.get$IterableBase__toStringVisiting(), i < t1.length; ++i) {
      t1 = t1[i];
      if (o == null ? t1 == null : o === t1)
        return true;
    }
    return false;
  },
  IterableBase__iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
    t1.$builtinTypeInfo = [$K, $V];
    return t1;
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result;
    t1 = {};
    if (P.IterableBase__isToStringVisiting(m))
      return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$IterableBase__toStringVisiting().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$IterableBase__toStringVisiting();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = result.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function(_) {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._keys = null;
        }
      }
    },
    remove$1: [function(_, key) {
      if (key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else
        return this._remove$1(key);
    }, "call$1", "get$remove", 2, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "V__Object", ret: V, args: [P.Object]};
      }, this.$receiver, "_HashMap");
    }],
    _remove$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      --this._collection$_length;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._keys = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = P._HashMap__getTableEntry(table, key);
        delete table[key];
        --this._collection$_length;
        this._keys = null;
        return value;
      } else
        return;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    $asMap: null,
    static: {_HashMap__getTableEntry: function(table, key) {
        var entry = table[key];
        return entry === table ? null : entry;
      }, _HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:44;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 89, "call"]
  },
  _IdentityHashMap: {
    "^": "_HashMap;_collection$_length,_strings,_nums,_rest,_keys",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function(_) {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    addAll$1: function(_, other) {
      other.forEach$1(0, new P._LinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_value();
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    remove$1: [function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    }, "call$1", "get$remove", 2, 0, function() {
      return H.computeSignature(function(K, V) {
        return {func: "V__Object0", ret: V, args: [P.Object]};
      }, this.$receiver, "_LinkedHashMap");
    }],
    _remove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(cell), cell.get$_value());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(J.get$_key$x(bucket[i]), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    $asMap: null,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:44;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 89, "call"]
  },
  _LinkedHashMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: function(key, value) {
      this.this_0.$indexSet(0, key, value);
    },
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V", args: [K, V]};
      }, this.this_0, "_LinkedHashMap");
    }
  },
  LinkedHashMapCell: {
    "^": "Object;_key>,_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key(cell));
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.get$_next();
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key(t1);
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_collection$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: [function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    }, "call$1", "get$remove", 2, 0, 72],
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_collection$_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_collection$_element();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "SetBase;"
  },
  IterableBase: {
    "^": "Object;",
    map$1: function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element;
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        if (remaining === 0)
          return element;
        --remaining;
      }
      throw H.wrapException(P.RangeError$value(index, null, null));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    },
    $isIterable: true,
    $asIterable: null
  },
  ListBase: {
    "^": "Object_ListMixin;"
  },
  Object_ListMixin: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
    },
    toList$1$growable: function(receiver, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(receiver)), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var t1, element, t2;
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        element = t1.get$current();
        t2 = this.get$length(receiver);
        this.set$length(receiver, t2 + 1);
        this.$indexSet(receiver, t2, element);
      }
    },
    remove$1: [function(receiver, element) {
      var i;
      for (i = 0; i < this.get$length(receiver); ++i)
        if (J.$eq(this.$index(receiver, i), element)) {
          this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
          this.set$length(receiver, this.get$length(receiver) - 1);
          return true;
        }
      return false;
    }, "call$1", "get$remove", 2, 0, 72],
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    _rangeCheck$2: function(receiver, start, end) {
      if (start < 0 || start > this.get$length(receiver))
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver), null, null));
      if (end < start || end > this.get$length(receiver))
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver), null, null));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, t1, otherStart, otherList, i;
      this._rangeCheck$2(receiver, start, end);
      $length = end - start;
      if ($length === 0)
        return;
      t1 = J.getInterceptor(iterable);
      if (!!t1.$isList) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = t1.skip$1(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    indexOf$2: function(receiver, element, startIndex) {
      var i;
      if (startIndex >= this.get$length(receiver))
        return -1;
      for (i = startIndex; i < this.get$length(receiver); ++i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  Maps_mapToString_closure: {
    "^": "Closure:52;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    toList$1$growable: function(_, growable) {
      var list, t1;
      if (growable) {
        list = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(list, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = init;
        list = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    remove$1: [function(_, object) {
      var i, t1;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i], object)) {
          this._remove$1(i);
          ++this._modificationCount;
          return true;
        }
      }
      return false;
    }, "call$1", "get$remove", 2, 0, 72],
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    addFirst$1: function(element) {
      var t1, t2, t3;
      t1 = this._head;
      t2 = this._table;
      t3 = t2.length;
      t1 = (t1 - 1 & t3 - 1) >>> 0;
      this._head = t1;
      if (t1 < 0 || t1 >= t3)
        return H.ioore(t2, t1);
      t2[t1] = element;
      if (t1 === this._tail)
        this._grow$0();
      ++this._modificationCount;
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _remove$1: function(offset) {
      var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
      t1 = this._table;
      t2 = t1.length;
      mask = t2 - 1;
      t3 = this._head;
      t4 = this._tail;
      if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
        for (i = offset; i !== t3; i = prevOffset) {
          prevOffset = (i - 1 & mask) >>> 0;
          if (prevOffset < 0 || prevOffset >= t2)
            return H.ioore(t1, prevOffset);
          t4 = t1[prevOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        this._head = (t3 + 1 & mask) >>> 0;
        return (offset + 1 & mask) >>> 0;
      } else {
        t3 = (t4 - 1 & mask) >>> 0;
        this._tail = t3;
        for (i = offset; i !== t3; i = nextOffset) {
          nextOffset = (i + 1 & mask) >>> 0;
          if (nextOffset < 0 || nextOffset >= t2)
            return H.ioore(t1, nextOffset);
          t4 = t1[nextOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        return offset;
      }
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      C.JSArray_methods.checkMutable$1(newTable, "set range");
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t2 = this._head;
      t1 = this._table;
      C.JSArray_methods.checkMutable$1(newTable, "set range");
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t2, t1, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    _writeToList$1: function(target) {
      var t1, t2, t3, $length, firstPartSize;
      t1 = this._head;
      t2 = this._tail;
      t3 = this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        C.JSArray_methods.checkMutable$1(target, "set range");
        H.IterableMixinWorkaround_setRangeList(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        C.JSArray_methods.checkMutable$1(target, "set range");
        H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t3, t1);
        t1 = this._tail;
        t2 = this._table;
        C.JSArray_methods.checkMutable$1(target, "set range");
        H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
        return this._tail + firstPartSize;
      }
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {"^": "ListQueue__INITIAL_CAPACITY", ListQueue$: function(initialCapacity, $E) {
        var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
        t1.ListQueue$1(initialCapacity, $E);
        return t1;
      }}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  SetMixin: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    clear$0: function(_) {
      this.removeAll$1(this.toList$0(0));
    },
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    removeAll$1: function(elements) {
      var t1;
      for (t1 = new H.ListIterator(elements, elements.length, 0, null); t1.moveNext$0();)
        this.remove$1(0, t1.__internal$_current);
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i, element, i0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(this)), [H.getTypeArgumentByIndex(this, 0)]);
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
        element = t1._collection$_current;
        i0 = i + 1;
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = element;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(this, f), [H.getTypeArgumentByIndex(this, 0), null]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator === "") {
        do {
          t1 = H.S(iterator._collection$_current);
          buffer._contents += t1;
        } while (iterator.moveNext$0());
      } else {
        buffer.write$1(H.S(iterator._collection$_current));
        for (; iterator.moveNext$0();) {
          buffer._contents += separator;
          t1 = H.S(iterator._collection$_current);
          buffer._contents += t1;
        }
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getTypeArgumentByIndex(this, 0));
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  SetBase: {
    "^": "SetMixin;"
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  _convertJsonToDartLazy: function(object) {
    var i;
    if (object == null)
      return;
    if (typeof object != "object")
      return object;
    if (Object.getPrototypeOf(object) !== Array.prototype)
      return new P._JsonMap(object, Object.create(null), null);
    for (i = 0; i < object.length; ++i)
      object[i] = P._convertJsonToDartLazy(object[i]);
    return object;
  },
  _parseJson: function(source, reviver) {
    var parsed, e, t1, exception;
    t1 = source;
    if (typeof t1 !== "string")
      throw H.wrapException(P.ArgumentError$(source));
    parsed = null;
    try {
      parsed = JSON.parse(source);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      throw H.wrapException(P.FormatException$(String(e), null, null));
    }

    return P._convertJsonToDartLazy(parsed);
  },
  _defaultToEncodable: [function(object) {
    return object.toJson$0();
  }, "call$1", "_defaultToEncodable$closure", 2, 0, 31, 11],
  _JsonMap: {
    "^": "Object;_original,_processed,_data",
    $index: function(_, key) {
      var t1, result;
      t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1 === 0;
    },
    get$keys: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return t1.get$keys(t1);
      }
      t1 = this._convert$_computeKeys$0();
      return H.SubListIterable$(t1, 0, null, H.getTypeArgumentByIndex(H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(t1, 0)]), 0));
    },
    get$values: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return t1.get$values(t1);
      }
      return H.MappedIterable_MappedIterable(this._convert$_computeKeys$0(), new P._JsonMap_values_closure(this), null, null);
    },
    $indexSet: function(_, key, value) {
      var processed, original;
      if (this._processed == null)
        this._data.$indexSet(0, key, value);
      else if (this.containsKey$1(0, key)) {
        processed = this._processed;
        processed[key] = value;
        original = this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1: function(_, key) {
      if (this._processed == null)
        return this._data.containsKey$1(0, key);
      if (typeof key !== "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    remove$1: [function(_, key) {
      if (this._processed != null && !this.containsKey$1(0, key))
        return;
      return this._upgrade$0().remove$1(0, key);
    }, "call$1", "get$remove", 2, 0, 90],
    clear$0: function(_) {
      var t1;
      if (this._processed == null)
        this._data.clear$0(0);
      else {
        t1 = this._data;
        if (t1 != null)
          J.clear$0$ax(t1);
        this._processed = null;
        this._original = null;
        this._data = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      }
    },
    forEach$1: function(_, f) {
      var keys, i, key, value;
      if (this._processed == null)
        return this._data.forEach$1(0, f);
      keys = this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(this._original[key]);
          this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== this._data)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _convert$_computeKeys$0: function() {
      var keys = this._data;
      if (keys == null) {
        keys = Object.keys(this._original);
        this._data = keys;
      }
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key;
      if (this._processed == null)
        return this._data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      keys = this._convert$_computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, this.$index(0, key));
      }
      if (t1 === 0)
        keys.push(null);
      else
        C.JSArray_methods.set$length(keys, 0);
      this._processed = null;
      this._original = null;
      this._data = result;
      return result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $isMap: true,
    $asMap: function() {
      return [null, null];
    }
  },
  _JsonMap_values_closure: {
    "^": "Closure:44;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 89, "call"]
  },
  Codec: {
    "^": "Object;"
  },
  Converter: {
    "^": "Object;"
  },
  JsonUnsupportedObjectError: {
    "^": "Error;unsupportedObject,cause",
    toString$0: function(_) {
      if (this.cause != null)
        return "Converting object to an encodable object failed.";
      else
        return "Converting object did not return an encodable object.";
    },
    static: {JsonUnsupportedObjectError$: function(unsupportedObject, cause) {
        return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
      }}
  },
  JsonCyclicError: {
    "^": "JsonUnsupportedObjectError;unsupportedObject,cause",
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    },
    static: {JsonCyclicError$: function(object) {
        return new P.JsonCyclicError(object, null);
      }}
  },
  JsonCodec: {
    "^": "Codec;_reviver,_toEncodable",
    decode$2$reviver: function(source, reviver) {
      return P._parseJson(source, this.get$decoder()._reviver);
    },
    decode$1: function(source) {
      return this.decode$2$reviver(source, null);
    },
    encode$2$toEncodable: function(value, toEncodable) {
      var t1 = this.get$encoder();
      return P._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
    },
    encode$1: function(value) {
      return this.encode$2$toEncodable(value, null);
    },
    get$encoder: function() {
      return C.JsonEncoder_null_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    }
  },
  JsonEncoder: {
    "^": "Converter;indent,_toEncodable"
  },
  JsonDecoder: {
    "^": "Converter;_reviver"
  },
  _JsonStringifier: {
    "^": "Object;",
    _toEncodable$1: function(arg0) {
      return this._toEncodable.call$1(arg0);
    },
    writeStringContent$1: function(s) {
      var t1, $length, offset, i, charCode, t2;
      t1 = J.getInterceptor$asx(s);
      $length = t1.get$length(s);
      if (typeof $length !== "number")
        return H.iae($length);
      offset = 0;
      i = 0;
      for (; i < $length; ++i) {
        charCode = t1.codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              this.writeCharCode$1(98);
              break;
            case 9:
              this.writeCharCode$1(116);
              break;
            case 10:
              this.writeCharCode$1(110);
              break;
            case 12:
              this.writeCharCode$1(102);
              break;
            case 13:
              this.writeCharCode$1(114);
              break;
            default:
              this.writeCharCode$1(117);
              this.writeCharCode$1(48);
              this.writeCharCode$1(48);
              t2 = charCode >>> 4 & 15;
              this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
              t2 = charCode & 15;
              this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          this.writeCharCode$1(92);
          this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        this.writeString$1(s);
      else if (offset < $length)
        this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(P.JsonCyclicError$(object));
      }
      t1.push(object);
    },
    _removeSeen$1: function(object) {
      var t1 = this._seen;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception;
      if (this.writeJsonValue$1(object))
        return;
      this._checkCycle$1(object);
      try {
        customJson = this._toEncodable$1(object);
        if (!this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null);
          throw H.wrapException(t1);
        }
        t1 = this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(P.JsonUnsupportedObjectError$(object, e));
      }

    },
    writeJsonValue$1: function(object) {
      var t1;
      if (typeof object === "number") {
        if (!C.JSNumber_methods.get$isFinite(object))
          return false;
        this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        this.writeString$1("true");
        return true;
      } else if (object === false) {
        this.writeString$1("false");
        return true;
      } else if (object == null) {
        this.writeString$1("null");
        return true;
      } else if (typeof object === "string") {
        this.writeString$1("\"");
        this.writeStringContent$1(object);
        this.writeString$1("\"");
        return true;
      } else {
        t1 = J.getInterceptor(object);
        if (!!t1.$isList) {
          this._checkCycle$1(object);
          this.writeList$1(object);
          this._removeSeen$1(object);
          return true;
        } else if (!!t1.$isMap) {
          this._checkCycle$1(object);
          this.writeMap$1(object);
          this._removeSeen$1(object);
          return true;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t1, i;
      this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$length(list) > 0) {
        this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          this.writeString$1(",");
          this.writeObject$1(t1.$index(list, i));
        }
      }
      this.writeString$1("]");
    },
    writeMap$1: function(map) {
      var t1 = {};
      this.writeString$1("{");
      t1.separator_0 = "\"";
      J.forEach$1$ax(map, new P._JsonStringifier_writeMap_closure(t1, this));
      this.writeString$1("}");
    }
  },
  _JsonStringifier_writeMap_closure: {
    "^": "Closure:73;box_0,this_1",
    call$2: function(key, value) {
      var t1, t2;
      t1 = this.this_1;
      t2 = this.box_0;
      t1.writeString$1(t2.separator_0);
      t2.separator_0 = ",\"";
      t1.writeStringContent$1(key);
      t1.writeString$1("\":");
      t1.writeObject$1(value);
    }
  },
  _JsonStringStringifier: {
    "^": "_JsonStringifier;_sink,_seen,_toEncodable",
    writeNumber$1: function(number) {
      this._sink.write$1(C.JSNumber_methods.toString$0(number));
    },
    writeString$1: function(string) {
      this._sink.write$1(string);
    },
    writeStringSlice$3: function(string, start, end) {
      this._sink.write$1(J.substring$2$s(string, start, end));
    },
    writeCharCode$1: function(charCode) {
      this._sink.writeCharCode$1(charCode);
    },
    static: {_JsonStringStringifier_stringify: function(object, toEncodable, indent) {
        var output, t1;
        output = P.StringBuffer$("");
        P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
        t1 = output._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }, _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
        var t1, stringifier;
        t1 = P._defaultToEncodable$closure();
        stringifier = new P._JsonStringStringifier(output, [], t1);
        stringifier.writeObject$1(object);
      }}
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Function__toMangledNames: function(namedArguments) {
    return;
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 32],
  Error_safeToString: function(object) {
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string")
      return JSON.stringify(object);
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 33],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 34],
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = Array;
    return list;
  },
  List_List$generate: function($length, generator, growable, $E) {
    var result, t1, i;
    if (growable) {
      result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
    } else {
      t1 = Array($length);
      t1.fixed$length = init;
      result = H.setRuntimeTypeInfo(t1, [$E]);
    }
    for (i = 0; i < $length; ++i) {
      t1 = generator.call$1(i);
      if (i >= result.length)
        return H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  Function__toMangledNames_closure: {
    "^": "Closure:52;result_0",
    call$2: function(symbol, value) {
      this.result_0.$indexSet(0, symbol.get$_name(), value);
    }
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:91;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(key.get$_name());
      t1.sb_0.write$1(": ");
      t1.sb_0.write$1(P.Error_safeToString(value));
      ++t1.i_1;
    }
  },
  bool: {
    "^": "Object;",
    $isbool: true
  },
  "+bool": 0,
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(C.JSNumber_methods.$add(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
    },
    difference$1: function(other) {
      return P.Duration$(0, 0, 0, this.millisecondsSinceEpoch - other.millisecondsSinceEpoch, 0, 0);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime_parse: function(formattedString) {
        var match, t1, t2, years, month, day, hour, minute, second, millisecond, addOneMillisecond, t3, sign, hourDifference, minuteDifference, isUtc, millisecondsSinceEpoch;
        match = new H.JSSyntaxRegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", H.JSSyntaxRegExp_makeNative("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", false, true, false), null, null).firstMatch$1(formattedString);
        if (match != null) {
          t1 = new P.DateTime_parse_parseIntOrZero();
          t2 = match._match;
          if (1 >= t2.length)
            return H.ioore(t2, 1);
          years = H.Primitives_parseInt(t2[1], null, null);
          if (2 >= t2.length)
            return H.ioore(t2, 2);
          month = H.Primitives_parseInt(t2[2], null, null);
          if (3 >= t2.length)
            return H.ioore(t2, 3);
          day = H.Primitives_parseInt(t2[3], null, null);
          if (4 >= t2.length)
            return H.ioore(t2, 4);
          hour = t1.call$1(t2[4]);
          if (5 >= t2.length)
            return H.ioore(t2, 5);
          minute = t1.call$1(t2[5]);
          if (6 >= t2.length)
            return H.ioore(t2, 6);
          second = t1.call$1(t2[6]);
          if (7 >= t2.length)
            return H.ioore(t2, 7);
          millisecond = J.round$0$n(J.$mul$ns(new P.DateTime_parse_parseDoubleOrZero().call$1(t2[7]), 1000));
          if (millisecond === 1000) {
            addOneMillisecond = true;
            millisecond = 999;
          } else
            addOneMillisecond = false;
          t3 = t2.length;
          if (8 >= t3)
            return H.ioore(t2, 8);
          if (t2[8] != null) {
            if (9 >= t3)
              return H.ioore(t2, 9);
            t3 = t2[9];
            if (t3 != null) {
              sign = J.$eq(t3, "-") ? -1 : 1;
              if (10 >= t2.length)
                return H.ioore(t2, 10);
              hourDifference = H.Primitives_parseInt(t2[10], null, null);
              if (11 >= t2.length)
                return H.ioore(t2, 11);
              minuteDifference = t1.call$1(t2[11]);
              if (typeof hourDifference !== "number")
                return H.iae(hourDifference);
              minuteDifference = J.$add$ns(minuteDifference, 60 * hourDifference);
              if (typeof minuteDifference !== "number")
                return H.iae(minuteDifference);
              minute = J.$sub$n(minute, sign * minuteDifference);
            }
            isUtc = true;
          } else
            isUtc = false;
          millisecondsSinceEpoch = H.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond, isUtc);
          if (millisecondsSinceEpoch == null)
            throw H.wrapException(P.FormatException$("Time out of range", formattedString, null));
          return P.DateTime$fromMillisecondsSinceEpoch(addOneMillisecond ? millisecondsSinceEpoch + 1 : millisecondsSinceEpoch, isUtc);
        } else
          throw H.wrapException(P.FormatException$("Invalid date format", formattedString, null));
      }, DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  DateTime_parse_parseIntOrZero: {
    "^": "Closure:92;",
    call$1: function(matched) {
      if (matched == null)
        return 0;
      return H.Primitives_parseInt(matched, null, null);
    }
  },
  DateTime_parse_parseDoubleOrZero: {
    "^": "Closure:93;",
    call$1: function(matched) {
      if (matched == null)
        return 0;
      return H.Primitives_parseDouble(matched, null);
    }
  },
  $double: {
    "^": "num;",
    $is$double: true
  },
  "+double": 0,
  Duration: {
    "^": "Object;_core$_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._core$_duration + other.get$_core$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._core$_duration - other.get$_core$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._core$_duration * factor)), 0, 0, 0);
    },
    $tdiv: function(_, quotient) {
      if (quotient === 0)
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      return P.Duration$(0, 0, C.JSNumber_methods.$tdiv(this._core$_duration, quotient), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._core$_duration < other.get$_core$_duration();
    },
    $gt: function(_, other) {
      return this._core$_duration > other.get$_core$_duration();
    },
    $le: function(_, other) {
      return this._core$_duration <= other.get$_core$_duration();
    },
    $ge: function(_, other) {
      return C.JSNumber_methods.$ge(this._core$_duration, other.get$_core$_duration());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._core$_duration === other._core$_duration;
    },
    get$hashCode: function(_) {
      return this._core$_duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this._core$_duration, other.get$_core$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._core$_duration;
      if (t2 < 0)
        return "-" + P.Duration$(0, 0, -t2, 0, 0, 0).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
      return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    get$isNegative: function(_) {
      return this._core$_duration < 0;
    },
    abs$0: function(_) {
      return P.Duration$(0, 0, Math.abs(this._core$_duration), 0, 0, 0);
    },
    $negate: function(_) {
      return P.Duration$(0, 0, -this._core$_duration, 0, 0, 0);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:94;",
    call$1: function(n) {
      if (n >= 100000)
        return H.S(n);
      if (n >= 10000)
        return "0" + H.S(n);
      if (n >= 1000)
        return "00" + H.S(n);
      if (n >= 100)
        return "000" + H.S(n);
      if (n >= 10)
        return "0000" + H.S(n);
      return "00000" + H.S(n);
    }
  },
  Duration_toString_twoDigits: {
    "^": "Closure:94;",
    call$1: function(n) {
      if (n >= 10)
        return H.S(n);
      return "0" + H.S(n);
    }
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;_hasValue,invalidValue,name>,message",
    toString$0: function(_) {
      var t1;
      if (!this._hasValue) {
        t1 = this.message;
        return t1 != null ? "Invalid arguments(s): " + H.S(t1) : "Invalid arguments(s)";
      }
      return H.S(this.message) + ": " + H.S(P.Error_safeToString(this.invalidValue));
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(false, null, null, message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
    toString$0: function(_) {
      var value, t1, explanation, t2, t3;
      if (!this._hasValue)
        return "RangeError: " + H.S(this.message);
      value = P.Error_safeToString(this.invalidValue);
      t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else {
          t3 = J.getInterceptor$n(t2);
          if (t3.$gt(t2, t1))
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive.";
          else
            explanation = t3.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
      }
      return "RangeError: " + H.S(this.message) + " (" + H.S(value) + ")" + explanation;
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(null, null, false, null, null, message);
      }, RangeError$value: function(value, $name, message) {
        return new P.RangeError(null, null, true, value, $name, "Value not in range");
      }, RangeError$range: function(invalidValue, start, end, $name, message) {
        return new P.RangeError(start, end, true, invalidValue, $name, "Invalid value");
      }}
  },
  IndexError: {
    "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
    toString$0: function(_) {
      var target, explanation, t1;
      target = P.Error_safeToString(this.indexable);
      explanation = "index should be less than " + H.S(this.length);
      t1 = this.invalidValue;
      if (J.$lt$n(t1, 0))
        explanation = "index must not be negative";
      return "RangeError: " + H.S(this.message) + " (" + H.S(target) + "[" + H.S(t1) + "]): " + explanation;
    },
    $isError: true,
    static: {IndexError$: function(invalidValue, indexable, $name, message, $length) {
        var t1 = J.get$length$asx(indexable);
        return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
      }}
  },
  NoSuchMethodError: {
    "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
    toString$0: function(_) {
      var t1, t2, t3, t4, t5, str;
      t1 = {};
      t1.sb_0 = P.StringBuffer$("");
      t1.i_1 = 0;
      for (t2 = this._core$_arguments, t3 = 0; t4 = t2.length, t3 < t4; t3 = ++t1.i_1) {
        if (t3 > 0) {
          t5 = t1.sb_0;
          t5._contents += ", ";
        }
        t5 = t1.sb_0;
        if (t3 < 0)
          return H.ioore(t2, t3);
        str = P.Error_safeToString(t2[t3]);
        t5._contents += typeof str === "string" ? str : H.S(str);
      }
      this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1));
      return "NoSuchMethodError : method not found: '" + this._memberName.toString$0(0) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + H.S(t1.sb_0) + "]";
    },
    static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(this.modifiedObject)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message,source,offset",
    toString$0: function(_) {
      var t1, report, source;
      t1 = this.message;
      report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
      source = this.source;
      if (typeof source !== "string")
        return report;
      if (source.length > 78)
        source = J.substring$2$s(source, 0, 75) + "...";
      return report + "\n" + H.S(source);
    },
    static: {FormatException$: function(message, source, offset) {
        return new P.FormatException(message, source, offset);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    static: {IntegerDivisionByZeroException$: function() {
        return new P.IntegerDivisionByZeroException();
      }}
  },
  Expando: {
    "^": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;",
    $isFunction: true
  },
  $int: {
    "^": "num;",
    $is$int: true
  },
  "+int": 0,
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+List": 0,
  Map: {
    "^": "Object;",
    $isMap: true,
    $asMap: null
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isnum: true
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }
  },
  Match: {
    "^": "Object;"
  },
  StackTrace: {
    "^": "Object;"
  },
  String: {
    "^": "Object;",
    $isString: true
  },
  "+String": 0,
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    write$1: function(obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeCharCode$1: function(charCode) {
      this.write$1(H.Primitives_stringFromCharCode(charCode));
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0) {
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0());
      } else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    clear$0: function(_) {
      this._contents = "";
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "^": "Object;"
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "^": "HtmlElement;target=,type%,hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "^": "HtmlElement;shape=,target=,hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  BaseElement: {
    "^": "HtmlElement;href},target=",
    "%": "HTMLBaseElement"
  },
  BeforeUnloadEvent: {
    "^": "Event;",
    "%": "BeforeUnloadEvent"
  },
  Blob: {
    "^": "Interceptor;type=",
    $isBlob: true,
    "%": ";Blob"
  },
  BodyElement: {
    "^": "HtmlElement;",
    $isBodyElement: true,
    $isEventTarget: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;name=,type%,value=",
    $isButtonElement: true,
    "%": "HTMLButtonElement"
  },
  CanvasElement: {
    "^": "HtmlElement;height=,width=",
    getContext$2: function(receiver, contextId, attrs) {
      return receiver.getContext(contextId);
    },
    getContext$1: function($receiver, contextId) {
      return this.getContext$2($receiver, contextId, null);
    },
    $isCanvasElement: true,
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext2D: {
    "^": "Interceptor;fillStyle}",
    beginPath$0: function(receiver) {
      return receiver.beginPath();
    },
    fillRect$4: function(receiver, x, y, width, height) {
      return receiver.fillRect(x, y, width, height);
    },
    stroke$1: function(receiver, path) {
      return receiver.stroke(path);
    },
    stroke$0: function($receiver) {
      return $receiver.stroke();
    },
    closePath$0: function(receiver) {
      return receiver.closePath();
    },
    lineTo$2: function(receiver, x, y) {
      return receiver.lineTo(x, y);
    },
    moveTo$2: function(receiver, x, y) {
      return receiver.moveTo(x, y);
    },
    setFillColorRgb$4: function(receiver, r, g, b, a) {
      receiver.fillStyle = "rgba(" + H.S(r) + ", " + H.S(g) + ", " + b + ", " + H.S(a) + ")";
    },
    setFillColorRgb$3: function($receiver, r, g, b) {
      return this.setFillColorRgb$4($receiver, r, g, b, 1);
    },
    setStrokeColorRgb$4: function(receiver, r, g, b, a) {
      receiver.strokeStyle = "rgba(" + H.S(r) + ", " + H.S(g) + ", " + b + ", " + H.S(a) + ")";
    },
    arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
      receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    },
    fill$1: function(receiver, winding) {
      receiver.fill(winding);
    },
    fill$0: function($receiver) {
      return this.fill$1($receiver, "nonzero");
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "^": "Node;length=",
    "%": "CDATASection|Comment|Text;CharacterData"
  },
  CloseEvent: {
    "^": "Event;code=",
    "%": "CloseEvent"
  },
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=",
    getPropertyValue$1: function(receiver, propertyName) {
      var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
      return propValue != null ? propValue : "";
    },
    _getPropertyValueHelper$1: function(receiver, propertyName) {
      var t1;
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return receiver.getPropertyValue(propertyName);
      else {
        t1 = P.Device_cssPrefix();
        if (t1 == null)
          return t1.$add();
        return receiver.getPropertyValue(J.$add$ns(t1, propertyName));
      }
    },
    setProperty$3: function(receiver, propertyName, value, priority) {
      var t1;
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return this._setPropertyHelper$3(receiver, propertyName, value, priority);
      else {
        t1 = P.Device_cssPrefix();
        if (t1 == null)
          return t1.$add();
        return this._setPropertyHelper$3(receiver, J.$add$ns(t1, propertyName), value, priority);
      }
    },
    setProperty$2: function($receiver, propertyName, value) {
      return this.setProperty$3($receiver, propertyName, value, null);
    },
    _setPropertyHelper$3: function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (value == null)
          value = "";
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }

    },
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  DivElement: {
    "^": "HtmlElement;",
    $isDivElement: true,
    "%": "HTMLDivElement"
  },
  Document: {
    "^": "Node;",
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(selectors);
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forTarget$1(receiver);
    },
    "%": "Document|HTMLDocument|XMLDocument"
  },
  DocumentFragment: {
    "^": "Node;",
    get$children: function(receiver) {
      if (receiver._docChildren == null)
        receiver._docChildren = H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [null]);
      return receiver._docChildren;
    },
    get$innerHtml: function(receiver) {
      var e, t1;
      e = W._ElementFactoryProvider_createElement_tag("div", null);
      t1 = J.getInterceptor$x(e);
      t1.append$1(e, this.clone$1(receiver, true));
      return t1.get$innerHtml(e);
    },
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(selectors);
    },
    "%": ";DocumentFragment"
  },
  DomError: {
    "^": "Interceptor;name=",
    "%": ";DOMError"
  },
  DomException: {
    "^": "Interceptor;",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  DomRectReadOnly: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=,x=,y=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.get$width(receiver);
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = this.get$height(receiver);
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(this.get$width(receiver));
      t4 = J.get$hashCode$(this.get$height(receiver));
      return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": ";DOMRectReadOnly"
  },
  Element: {
    "^": "Node;title},className%,id%,style=,tagName=",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    get$dataset: function(receiver) {
      return new W._DataAttributeMap(new W._ElementAttributeMap(receiver));
    },
    get$client: function(receiver) {
      return P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientHeight)), null);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    insertAdjacentHtml$2: function(receiver, where, html) {
      var t1, t2, first;
      if (!!receiver.insertAdjacentHTML)
        receiver.insertAdjacentHTML(where, html);
      else {
        t1 = J.createFragment$3$treeSanitizer$validator$x(document.body, html, null, null);
        switch (where.toLowerCase()) {
          case "beforebegin":
            receiver.parentNode.insertBefore(t1, receiver);
            break;
          case "afterbegin":
            if (receiver.childNodes.length > 0) {
              t2 = receiver.childNodes;
              if (0 >= t2.length)
                return H.ioore(t2, 0);
              first = t2[0];
            } else
              first = null;
            receiver.insertBefore(t1, first);
            break;
          case "beforeend":
            receiver.appendChild(t1);
            break;
          case "afterend":
            receiver.parentNode.insertBefore(t1, receiver.nextSibling);
            break;
          default:
            H.throwExpression(P.ArgumentError$("Invalid position " + where));
        }
      }
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, base, contextElement, fragment;
      if (treeSanitizer == null) {
        if (validator == null) {
          t1 = $.Element__defaultValidator;
          if (t1 == null) {
            t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
            t2 = new W.NodeValidatorBuilder(t1);
            t1.push(W._Html5NodeValidator$(null));
            t1.push(W._TemplatingNodeValidator$());
            $.Element__defaultValidator = t2;
            validator = t2;
          } else
            validator = t1;
        }
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      } else if (validator != null)
        throw H.wrapException(P.ArgumentError$("validator can only be passed if treeSanitizer is null"));
      if ($.Element__parseDocument == null) {
        t1 = document.implementation.createHTMLDocument("");
        $.Element__parseDocument = t1;
        $.Element__parseRange = t1.createRange();
        base = $.Element__parseDocument.createElement("base", null);
        J.set$href$x(base, document.baseURI);
        $.Element__parseDocument.head.appendChild(base);
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName, null);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    set$innerHtml: function(receiver, html) {
      this.setInnerHtml$1(receiver, html);
    },
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    get$innerHtml: function(receiver) {
      return receiver.innerHTML;
    },
    click$0: function(receiver) {
      return receiver.click();
    },
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(selectors);
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forElement$1(receiver);
    },
    get$onContextMenu: function(receiver) {
      return C.EventStreamProvider_contextmenu.forElement$1(receiver);
    },
    $isElement: true,
    $isEventTarget: true,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;height=,name=,src=,type%,width=",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "^": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;type=",
    get$currentTarget: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.currentTarget);
    },
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    stopPropagation$0: function(receiver) {
      return receiver.stopPropagation();
    },
    $isEvent: true,
    "%": "AnimationPlayerEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|AutocompleteErrorEvent|CustomEvent|DeviceLightEvent|DeviceMotionEvent|DeviceOrientationEvent|FetchEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|InstallPhaseEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RelatedEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;ClipboardEvent|Event|InputEvent"
  },
  EventTarget: {
    "^": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    addEventListener$2: function($receiver, type, listener) {
      return this.addEventListener$3($receiver, type, listener, null);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      if (listener != null)
        this._removeEventListener$3(receiver, type, listener, useCapture);
    },
    removeEventListener$2: function($receiver, type, listener) {
      return this.removeEventListener$3($receiver, type, listener, null);
    },
    _addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    _removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    $isEventTarget: true,
    "%": ";EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;name=",
    "%": "File"
  },
  FileError: {
    "^": "DomError;code=",
    "%": "FileError"
  },
  FormElement: {
    "^": "HtmlElement;length=,name=,target=",
    "%": "HTMLFormElement"
  },
  History: {
    "^": "Interceptor;length=",
    "%": "History"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;responseText=",
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;height=,name=,src=,width=",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;height=,width=",
    $isImageData: true,
    "%": "ImageData"
  },
  ImageElement: {
    "^": "HtmlElement;height=,src=,width=",
    complete$0: function($receiver) {
      return $receiver.complete.call$0();
    },
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;height=,name=,src=,type%,value=,width=",
    $isElement: true,
    $isEventTarget: true,
    $isNode: true,
    "%": "HTMLInputElement"
  },
  KeyboardEvent: {
    "^": "UIEvent;altKey=,metaKey=",
    get$keyCode: function(receiver) {
      return receiver.keyCode;
    },
    "%": "KeyboardEvent"
  },
  KeygenElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value=",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "^": "HtmlElement;href},type%",
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Location"
  },
  MapElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "^": "HtmlElement;error=,src=",
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MediaError: {
    "^": "Interceptor;code=",
    "%": "MediaError"
  },
  MediaKeyError: {
    "^": "Interceptor;code=",
    "%": "MediaKeyError"
  },
  MediaStream: {
    "^": "EventTarget;id=",
    "%": "MediaStream"
  },
  MenuElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLMenuElement"
  },
  MenuItemElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLMenuItemElement"
  },
  MetaElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "^": "HtmlElement;value=",
    "%": "HTMLMeterElement"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=,name=,type=",
    "%": "MIDIInput;MIDIPort"
  },
  MouseEvent: {
    "^": "UIEvent;altKey=,metaKey=",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
    },
    "%": ";DragEvent|MSPointerEvent|MouseEvent|PointerEvent"
  },
  NavigatorUserMediaError: {
    "^": "Interceptor;name=",
    "%": "NavigatorUserMediaError"
  },
  Node: {
    "^": "EventTarget;parent:parentElement=",
    get$nodes: function(receiver) {
      return new W._ChildNodeListLazy(receiver);
    },
    remove$0: [function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    }, "call$0", "get$remove", 0, 0, 0],
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    _clearChildren$0: function(receiver) {
      var t1;
      for (; t1 = receiver.firstChild, t1 != null;)
        receiver.removeChild(t1);
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    append$1: function(receiver, newChild) {
      return receiver.appendChild(newChild);
    },
    clone$1: function(receiver, deep) {
      return receiver.cloneNode(deep);
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    $isNode: true,
    "%": "DocumentType|Notation;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  OListElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;height=,name=,type%,width=",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "^": "HtmlElement;index=,value=",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;name=,type=,value=",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;name=,value=",
    "%": "HTMLParamElement"
  },
  PositionError: {
    "^": "Interceptor;code=",
    "%": "PositionError"
  },
  ProcessingInstruction: {
    "^": "CharacterData;target=",
    "%": "ProcessingInstruction"
  },
  ProgressElement: {
    "^": "HtmlElement;position=,value=",
    "%": "HTMLProgressElement"
  },
  ProgressEvent: {
    "^": "Event;",
    "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
  },
  ScriptElement0: {
    "^": "HtmlElement;src=,type%",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;length=,name=,type=,value=",
    "%": "HTMLSelectElement"
  },
  ShadowRoot: {
    "^": "DocumentFragment;innerHtml:innerHTML=",
    clone$1: function(receiver, deep) {
      return receiver.cloneNode(deep);
    },
    "%": "ShadowRoot"
  },
  SourceElement: {
    "^": "HtmlElement;src=,type%",
    "%": "HTMLSourceElement"
  },
  SpeechRecognitionError: {
    "^": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  SpeechSynthesisEvent: {
    "^": "Event;name=",
    "%": "SpeechSynthesisEvent"
  },
  Storage: {
    "^": "Interceptor;",
    containsKey$1: function(receiver, key) {
      return receiver.getItem(key) != null;
    },
    $index: function(receiver, key) {
      return receiver.getItem(key);
    },
    $indexSet: function(receiver, key, value) {
      receiver.setItem(key, value);
    },
    remove$1: [function(receiver, key) {
      var value = receiver.getItem(key);
      receiver.removeItem(key);
      return value;
    }, "call$1", "get$remove", 2, 0, 1],
    clear$0: function(receiver) {
      return receiver.clear();
    },
    forEach$1: function(receiver, f) {
      var i, key;
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        f.call$2(key, receiver.getItem(key));
      }
    },
    get$keys: function(receiver) {
      var keys = [];
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = [];
      this.forEach$1(receiver, new W.Storage_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$isEmpty: function(receiver) {
      return receiver.key(0) == null;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    },
    "%": "Storage"
  },
  StorageEvent: {
    "^": "Event;key=",
    "%": "StorageEvent"
  },
  StyleElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLStyleElement"
  },
  TableElement: {
    "^": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + H.S(html) + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, J.get$nodes$x(table));
      return fragment;
    },
    "%": "HTMLTableElement"
  },
  TableRowElement: {
    "^": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    },
    "%": "HTMLTableRowElement"
  },
  TableSectionElement: {
    "^": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    },
    "%": "HTMLTableSectionElement"
  },
  TemplateElement: {
    "^": "HtmlElement;",
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment;
      receiver.textContent = null;
      fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
      receiver.content.appendChild(fragment);
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    $isTemplateElement: true,
    "%": "HTMLTemplateElement"
  },
  TextAreaElement: {
    "^": "HtmlElement;name=,type=,value=",
    "%": "HTMLTextAreaElement"
  },
  TouchEvent: {
    "^": "UIEvent;altKey=,metaKey=",
    "%": "TouchEvent"
  },
  TrackElement: {
    "^": "HtmlElement;src=",
    "%": "HTMLTrackElement"
  },
  UIEvent: {
    "^": "Event;which=",
    "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"
  },
  VideoElement: {
    "^": "MediaElement;height=,width=",
    "%": "HTMLVideoElement"
  },
  WheelEvent: {
    "^": "MouseEvent;",
    get$deltaY: function(receiver) {
      var detail;
      if (receiver.deltaY !== undefined)
        return receiver.deltaY;
      else if (receiver.wheelDelta !== undefined)
        return -receiver.wheelDelta;
      else if (receiver.detail !== undefined) {
        if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
          detail = receiver.detail;
          if (Math.abs(detail) < 100)
            return -detail * 40;
          return -detail;
        }
        return 0;
      }
      throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
    },
    "%": "MouseScrollEvent|MouseWheelEvent|WheelEvent"
  },
  Window: {
    "^": "EventTarget;name=",
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    get$parent: function(receiver) {
      return W._convertNativeToDart_Window(receiver.parent);
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forTarget$1(receiver);
    },
    $isWindow: true,
    $isEventTarget: true,
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "^": "Node;name=,value=",
    "%": "Attr"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect"
  },
  _DomRect: {
    "^": "DomRectReadOnly;",
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    get$x: function(receiver) {
      return receiver.x;
    },
    set$x: function(receiver, value) {
      receiver.x = value;
    },
    get$y: function(receiver) {
      return receiver.y;
    },
    set$y: function(receiver, value) {
      receiver.y = value;
    },
    "%": "DOMRect"
  },
  _HTMLFrameSetElement: {
    "^": "HtmlElement;",
    $isEventTarget: true,
    "%": "HTMLFrameSetElement"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  AnchorElement_AnchorElement: function(href) {
    var e = document.createElement("a", null);
    return e;
  },
  CssStyleDeclaration__camelCase: function(hyphenated) {
    return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
  },
  Element_Element$html: function(html, treeSanitizer, validator) {
    var fragment, t1;
    fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1 = t1.where$1(t1, new W.Element_Element$html_closure());
    return t1.get$single(t1);
  },
  Element__determineMouseWheelEventType: [function(e) {
    if (e.onwheel !== undefined)
      return "wheel";
    else if (e.onmousewheel !== undefined)
      return "mousewheel";
    else
      return "DOMMouseScroll";
  }, "call$1", "Element__determineMouseWheelEventType$closure", 2, 0, 35, 9],
  _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
    return document.createElement(tag);
  },
  HttpRequest_getString: function(url, onProgress, withCredentials) {
    return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
  },
  HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
    var t1, completer, xhr;
    t1 = W.HttpRequest;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
    xhr = new XMLHttpRequest();
    C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
    C.EventStreamProvider_load.forTarget$1(xhr).listen$1(new W.HttpRequest_request_closure(completer, xhr));
    C.EventStreamProvider_error.forTarget$1(xhr).listen$1(completer.get$completeError());
    xhr.send();
    return completer.future;
  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  _convertNativeToDart_Window: function(win) {
    if (win == null)
      return;
    return W._DOMWindowCrossFrame__createSafe(win);
  },
  _convertNativeToDart_EventTarget: function(e) {
    var $window;
    if (e == null)
      return;
    if ("postMessage" in e) {
      $window = W._DOMWindowCrossFrame__createSafe(e);
      if (!!J.getInterceptor($window).$isEventTarget)
        return $window;
      return;
    } else
      return e;
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    get$clear: function(receiver) {
      return this.getPropertyValue$1(receiver, "clear");
    },
    clear$0: function($receiver) {
      return this.get$clear($receiver).call$0();
    },
    set$display: function(receiver, value) {
      this.setProperty$3(receiver, "display", value, "");
    },
    get$height: function(receiver) {
      return this.getPropertyValue$1(receiver, "height");
    },
    set$left: function(receiver, value) {
      this.setProperty$3(receiver, "left", value, "");
    },
    set$marginLeft: function(receiver, value) {
      this.setProperty$3(receiver, "margin-left", value, "");
    },
    set$marginTop: function(receiver, value) {
      this.setProperty$3(receiver, "margin-top", value, "");
    },
    set$maxWidth: function(receiver, value) {
      this.setProperty$3(receiver, "max-width", value, "");
    },
    set$opacity: function(receiver, value) {
      this.setProperty$3(receiver, "opacity", value, "");
    },
    get$position: function(receiver) {
      return this.getPropertyValue$1(receiver, "position");
    },
    get$src: function(receiver) {
      return this.getPropertyValue$1(receiver, "src");
    },
    set$top: function(receiver, value) {
      this.setProperty$3(receiver, "top", value, "");
    },
    set$transform: function(receiver, value) {
      this.setProperty$3(receiver, "transform", value, "");
    },
    get$width: function(receiver) {
      return this.getPropertyValue$1(receiver, "width");
    },
    set$width: function(receiver, value) {
      this.setProperty$3(receiver, "width", value, "");
    }
  },
  _ChildrenElementList: {
    "^": "ListBase;_element,_childElements",
    get$isEmpty: function(_) {
      return this._element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new H.ListIterator(t1, t1.length, 0, null);
    },
    addAll$1: function(_, iterable) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(!!J.getInterceptor(iterable).$is_ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._element; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    remove$1: [function(_, object) {
      return false;
    }, "call$1", "get$remove", 2, 0, 72],
    clear$0: function(_) {
      J._clearChildren$0$x(this._element);
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    }
  },
  _FrozenElementList: {
    "^": "ListBase;_nodeList,_elementList",
    get$length: function(_) {
      return this._nodeList.length;
    },
    $index: function(_, index) {
      var t1 = this._nodeList;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    get$classes: function(_) {
      return W._MultiElementCssClassSet$(this._elementList);
    },
    get$onClick: function(_) {
      return C.EventStreamProvider_click._forElementList$1(this);
    },
    _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
      var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
      this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_FrozenElementList$_wrap: function(_nodeList, $T) {
        var t1 = H.setRuntimeTypeInfo(new W._FrozenElementList(_nodeList, null), [$T]);
        t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
        return t1;
      }}
  },
  _FrozenElementList$_wrap_closure: {
    "^": "Closure:44;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement;
    }
  },
  Element_Element$html_closure: {
    "^": "Closure:44;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement;
    }
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  HttpRequest_getString_closure: {
    "^": "Closure:44;",
    call$1: [function(xhr) {
      return J.get$responseText$x(xhr);
    }, "call$1", null, 2, 0, null, 95, "call"]
  },
  HttpRequest_request_closure0: {
    "^": "Closure:52;xhr_0",
    call$2: function(header, value) {
      this.xhr_0.setRequestHeader(header, value);
    }
  },
  HttpRequest_request_closure: {
    "^": "Closure:44;completer_1,xhr_2",
    call$1: [function(e) {
      var t1, t2, t3;
      t1 = this.xhr_2;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
      t3 = this.completer_1;
      if (t2)
        t3.complete$1(0, t1);
      else
        t3.completeError$1(e);
    }, "call$1", null, 2, 0, null, 9, "call"]
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this",
    get$single: function(_) {
      var t1, l;
      t1 = this._this;
      l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      t1 = J.getInterceptor(iterable);
      if (!!t1.$is_ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      }
      for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    remove$1: [function(_, object) {
      return false;
    }, "call$1", "get$remove", 2, 0, 72],
    clear$0: function(_) {
      J._clearChildren$0$x(this._this);
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $is_ChildNodeListLazy: true,
    $asListBase: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Storage_keys_closure: {
    "^": "Closure:52;keys_0",
    call$2: function(k, v) {
      return this.keys_0.push(k);
    }
  },
  Storage_values_closure: {
    "^": "Closure:52;values_0",
    call$2: function(k, v) {
      return this.values_0.push(v);
    }
  },
  _BeforeUnloadEvent: {
    "^": "_WrappedEvent;_returnValue,wrapped,_selector",
    $isEvent: true
  },
  _BeforeUnloadEventStreamProvider: {
    "^": "Object;_eventType",
    forTarget$2$useCapture: function(e, useCapture) {
      var stream, controller;
      stream = H.setRuntimeTypeInfo(new W._EventStream(e, this._eventType, useCapture), [null]);
      controller = P.StreamController_StreamController(null, null, null, null, true, null);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, stream._target, stream._eventType, W._wrapZone(new W._BeforeUnloadEventStreamProvider_forTarget_closure(controller)), stream._useCapture), [H.getTypeArgumentByIndex(stream, 0)])._tryResume$0();
      return H.setRuntimeTypeInfo(new P._ControllerStream(controller), [null]);
    },
    forTarget$1: function(e) {
      return this.forTarget$2$useCapture(e, false);
    }
  },
  _BeforeUnloadEventStreamProvider_forTarget_closure: {
    "^": "Closure:44;controller_0",
    call$1: [function($event) {
      var wrapped, t1, t2;
      wrapped = new W._BeforeUnloadEvent(null, $event, null);
      t1 = this.controller_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t2 = t1._state;
      if ((t2 & 1) !== 0)
        t1._sendData$1(wrapped);
      else if ((t2 & 3) === 0)
        t1._ensurePendingEvents$0().add$1(0, new P._DelayedData(wrapped, null));
      return;
    }, "call$1", null, 2, 0, null, 4, "call"]
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  _AttributeMap: {
    "^": "Object;",
    clear$0: function(_) {
      var t1;
      for (t1 = this.get$keys(this), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        this.remove$1(0, t1.__internal$_current);
    },
    forEach$1: function(_, f) {
      var t1, key;
      for (t1 = this.get$keys(this), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1.__internal$_current;
        f.call$2(key, this.$index(0, key));
      }
    },
    get$keys: function(_) {
      var attributes, keys, len, i;
      attributes = this._element.attributes;
      keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          keys.push(J.get$name$x(attributes[i]));
        }
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i;
      attributes = this._element.attributes;
      values = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          values.push(J.get$value$x(attributes[i]));
        }
      }
      return values;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    }
  },
  _ElementAttributeMap: {
    "^": "_AttributeMap;_element",
    containsKey$1: function(_, key) {
      return this._element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._element.setAttribute(key, value);
    },
    remove$1: [function(_, key) {
      var t1, value;
      t1 = this._element;
      value = t1.getAttribute(key);
      t1.removeAttribute(key);
      return value;
    }, "call$1", "get$remove", 2, 0, 1],
    get$length: function(_) {
      return this.get$keys(this).length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  _DataAttributeMap: {
    "^": "Object;_attributes",
    containsKey$1: function(_, key) {
      return this._attributes._element.hasAttribute("data-" + H.S(this._toHyphenedName$1(key)));
    },
    $index: function(_, key) {
      return this._attributes._element.getAttribute("data-" + H.S(this._toHyphenedName$1(key)));
    },
    $indexSet: function(_, key, value) {
      this._attributes._element.setAttribute("data-" + H.S(this._toHyphenedName$1(key)), value);
    },
    remove$1: [function(_, key) {
      var t1, t2, value;
      t1 = "data-" + H.S(this._toHyphenedName$1(key));
      t2 = this._attributes._element;
      value = t2.getAttribute(t1);
      t2.removeAttribute(t1);
      return value;
    }, "call$1", "get$remove", 2, 0, 1],
    clear$0: function(_) {
      var t1, t2, t3;
      for (t1 = this.get$keys(this), t1 = new H.ListIterator(t1, t1.length, 0, null), t2 = this._attributes._element; t1.moveNext$0();) {
        t3 = "data-" + H.S(this._toHyphenedName$1(t1.__internal$_current));
        t2.getAttribute(t3);
        t2.removeAttribute(t3);
      }
    },
    forEach$1: function(_, f) {
      this._attributes.forEach$1(0, new W._DataAttributeMap_forEach_closure(this, f));
    },
    get$keys: function(_) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this._attributes.forEach$1(0, new W._DataAttributeMap_keys_closure(this, keys));
      return keys;
    },
    get$values: function(_) {
      var values = H.setRuntimeTypeInfo([], [P.String]);
      this._attributes.forEach$1(0, new W._DataAttributeMap_values_closure(this, values));
      return values;
    },
    get$length: function(_) {
      return this.get$keys(this).length;
    },
    get$isEmpty: function(_) {
      return this.get$keys(this).length === 0;
    },
    _toCamelCase$2$startUppercase: function(hyphenedName, startUppercase) {
      var segments, start, i, segment, t1;
      segments = hyphenedName.split("-");
      start = startUppercase ? 0 : 1;
      for (i = start; i < segments.length; ++i) {
        segment = segments[i];
        t1 = J.getInterceptor$asx(segment);
        if (J.$gt$n(t1.get$length(segment), 0)) {
          t1 = J.toUpperCase$0$s(t1.$index(segment, 0)) + t1.substring$1(segment, 1);
          if (i >= segments.length)
            return H.ioore(segments, i);
          segments[i] = t1;
        }
      }
      return C.JSArray_methods.join$1(segments, "");
    },
    _toCamelCase$1: function(hyphenedName) {
      return this._toCamelCase$2$startUppercase(hyphenedName, false);
    },
    _toHyphenedName$1: function(word) {
      var sb, t1, i, t2, lower;
      sb = P.StringBuffer$("");
      t1 = J.getInterceptor$asx(word);
      i = 0;
      while (true) {
        t2 = t1.get$length(word);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        lower = J.toLowerCase$0$s(t1.$index(word, i));
        if (!J.$eq(t1.$index(word, i), lower) && i > 0)
          sb._contents += "-";
        sb._contents += lower;
        ++i;
      }
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    }
  },
  _DataAttributeMap_forEach_closure: {
    "^": "Closure:96;this_0,f_1",
    call$2: function(key, value) {
      var t1 = J.getInterceptor$s(key);
      if (t1.startsWith$1(key, "data-"))
        this.f_1.call$2(this.this_0._toCamelCase$1(t1.substring$1(key, 5)), value);
    }
  },
  _DataAttributeMap_keys_closure: {
    "^": "Closure:96;this_0,keys_1",
    call$2: function(key, value) {
      var t1 = J.getInterceptor$s(key);
      if (t1.startsWith$1(key, "data-"))
        this.keys_1.push(this.this_0._toCamelCase$1(t1.substring$1(key, 5)));
    }
  },
  _DataAttributeMap_values_closure: {
    "^": "Closure:96;this_0,values_1",
    call$2: function(key, value) {
      if (J.startsWith$1$s(key, "data-"))
        this.values_1.push(value);
    }
  },
  _MultiElementCssClassSet: {
    "^": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
    readClasses$0: function() {
      var s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      this._elementCssClassSetIterable.forEach$1(0, new W._MultiElementCssClassSet_readClasses_closure(s));
      return s;
    },
    writeClasses$1: function(s) {
      var classes, t1;
      classes = C.JSArray_methods.join$1(P.List_List$from(s, true, null), " ");
      for (t1 = this._elementIterable, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        J.set$className$x(t1.__internal$_current, classes);
    },
    modify$1: function(f) {
      this._elementCssClassSetIterable.forEach$1(0, new W._MultiElementCssClassSet_modify_closure(f));
    },
    remove$1: [function(_, value) {
      return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_remove_closure(value));
    }, "call$1", "get$remove", 2, 0, 72],
    _modifyWithReturnValue$1: function(f) {
      return this._elementCssClassSetIterable.fold$2(0, false, new W._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
    },
    _MultiElementCssClassSet$1: function(_elementIterable) {
      this._elementCssClassSetIterable = H.setRuntimeTypeInfo(new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._MultiElementCssClassSet_closure()), [null, null]);
    },
    static: {_MultiElementCssClassSet$: function(_elementIterable) {
        var t1 = new W._MultiElementCssClassSet(_elementIterable, null);
        t1._MultiElementCssClassSet$1(_elementIterable);
        return t1;
      }}
  },
  _MultiElementCssClassSet_closure: {
    "^": "Closure:44;",
    call$1: [function(e) {
      return new W._ElementCssClassSet(e);
    }, "call$1", null, 2, 0, null, 9, "call"]
  },
  _MultiElementCssClassSet_readClasses_closure: {
    "^": "Closure:44;s_0",
    call$1: function(e) {
      return this.s_0.addAll$1(0, e.readClasses$0());
    }
  },
  _MultiElementCssClassSet_modify_closure: {
    "^": "Closure:44;f_0",
    call$1: function(e) {
      return e.modify$1(this.f_0);
    }
  },
  _MultiElementCssClassSet_remove_closure: {
    "^": "Closure:44;value_0",
    call$1: function(e) {
      return J.remove$1$ax(e, this.value_0);
    }
  },
  _MultiElementCssClassSet__modifyWithReturnValue_closure: {
    "^": "Closure:52;f_0",
    call$2: function(prevValue, element) {
      return this.f_0.call$1(element) === true || prevValue === true;
    }
  },
  _ElementCssClassSet: {
    "^": "CssClassSetImpl;_element",
    readClasses$0: function() {
      var s, t1, trimmed;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      for (t1 = J.get$className$x(this._element).split(" "), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1.__internal$_current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      P.List_List$from(s, true, null);
      J.set$className$x(this._element, s.join$1(0, " "));
    }
  },
  EventStreamProvider: {
    "^": "Object;_eventType",
    forTarget$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._EventStream(e, this._eventType, useCapture), [null]);
    },
    forTarget$1: function(e) {
      return this.forTarget$2$useCapture(e, false);
    },
    forElement$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(e, this._eventType, useCapture), [null]);
    },
    forElement$1: function(e) {
      return this.forElement$2$useCapture(e, false);
    },
    _forElementList$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._ElementListEventStreamImpl(e, useCapture, this._eventType), [null]);
    },
    _forElementList$1: function(e) {
      return this._forElementList$2$useCapture(e, false);
    }
  },
  _EventStream: {
    "^": "Stream;_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_target,_eventType,_useCapture"
  },
  _ElementListEventStreamImpl: {
    "^": "Stream;_targetList,_useCapture,_eventType",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var pool, t1, t2, t3, t4;
      pool = H.setRuntimeTypeInfo(new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, null], [P.StreamSubscription, null])), [null]);
      pool._html$_StreamPool$broadcast$0(null);
      for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
        t4 = new W._EventStream(t1.__internal$_current, t2, t3);
        t4.$builtinTypeInfo = [null];
        pool.add$1(0, t4);
      }
      t1 = pool._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
    cancel$0: function() {
      if (this._target == null)
        return;
      this._unlisten$0();
      this._target = null;
      this._onData = null;
      return;
    },
    pause$1: function(_, resumeSignal) {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    get$isPaused: function() {
      return this._pauseCount > 0;
    },
    resume$0: function() {
      if (this._target == null || this._pauseCount <= 0)
        return;
      --this._pauseCount;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    }
  },
  _StreamPool: {
    "^": "Object;_controller,_subscriptions",
    add$1: function(_, stream) {
      var t1, t2;
      t1 = this._subscriptions;
      if (t1.containsKey$1(0, stream))
        return;
      t2 = this._controller;
      t1.$indexSet(0, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), this._controller.get$addError()));
    },
    remove$1: [function(_, stream) {
      var subscription = this._subscriptions.remove$1(0, stream);
      if (subscription != null)
        subscription.cancel$0();
    }, "call$1", "get$remove", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__Stream", void: true, args: [[P.Stream, T]]};
      }, this.$receiver, "_StreamPool");
    }],
    close$0: [function(_) {
      var t1, t2;
      for (t1 = this._subscriptions, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2.__internal$_current.cancel$0();
      t1.clear$0(0);
      this._controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 0],
    _html$_StreamPool$broadcast$0: function($T) {
      this._controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
    }
  },
  _StreamPool_add_closure: {
    "^": "Closure:46;this_0,stream_1",
    call$0: [function() {
      return this.this_0.remove$1(0, this.stream_1);
    }, "call$0", null, 0, 0, null, "call"]
  },
  _CustomEventStreamProvider: {
    "^": "Object;_eventTypeGetter",
    _eventTypeGetter$1: function(arg0) {
      return this._eventTypeGetter.call$1(arg0);
    },
    forElement$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), useCapture), [null]);
    },
    forElement$1: function(e) {
      return this.forElement$2$useCapture(e, false);
    }
  },
  _Html5NodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return $.get$_Html5NodeValidator__allowedElements().contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = J.get$tagName$x(element);
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, t2;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        for (t2 = new H.ListIterator(C.List_1GN, 261, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2.__internal$_current, W._Html5NodeValidator__standardAttributeValidator$closure());
        for (t2 = new H.ListIterator(C.List_yrN, 12, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2.__internal$_current, W._Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    static: {"^": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators", _Html5NodeValidator$: function(uriPolicy) {
        var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), window.location);
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      }, _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
        return true;
      }, "call$4", "_Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 36, 37, 38, 24, 39], _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
        return context.get$uriPolicy().allowsUri$1(value);
      }, "call$4", "_Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 36, 37, 38, 24, 39]}
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    addAll$1: function(receiver, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    remove$1: [function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    }, "call$1", "get$remove", 2, 0, 72],
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  NodeValidatorBuilder: {
    "^": "Object;_validators",
    allowCustomElement$4$attributes$uriAttributes$uriPolicy: function(tagName, attributes, uriAttributes, uriPolicy) {
      var tagNameUpper, attrs, t1, t2, t3;
      tagNameUpper = tagName.toUpperCase();
      attrs = H.setRuntimeTypeInfo(new H.MappedListIterable(attributes, new W.NodeValidatorBuilder_allowCustomElement_closure(tagNameUpper)), [null, null]);
      uriPolicy = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), window.location);
      t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      t1.addAll$1(0, [tagNameUpper]);
      t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      t2.addAll$1(0, attrs);
      t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      this._validators.push(new W._CustomElementNodeValidator(false, true, t1, t2, t3, uriPolicy));
    },
    add$1: function(_, validator) {
      this._validators.push(validator);
    },
    allowsElement$1: function(element) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    }
  },
  NodeValidatorBuilder_allowCustomElement_closure: {
    "^": "Closure:44;tagNameUpper_0",
    call$1: [function($name) {
      return this.tagNameUpper_0 + "::" + J.toLowerCase$0$s($name);
    }, "call$1", null, 2, 0, null, 97, "call"]
  },
  NodeValidatorBuilder_allowCustomElement_closure0: {
    "^": "Closure:44;tagNameUpper_1",
    call$1: function($name) {
      return this.tagNameUpper_1 + "::" + H.S($name.toLowerCase$0(0));
    }
  },
  NodeValidatorBuilder_allowsElement_closure: {
    "^": "Closure:44;element_0",
    call$1: function(v) {
      return v.allowsElement$1(this.element_0);
    }
  },
  NodeValidatorBuilder_allowsAttribute_closure: {
    "^": "Closure:44;element_0,attributeName_1,value_2",
    call$1: function(v) {
      return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
    }
  },
  _SimpleNodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = J.get$tagName$x(element);
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    }
  },
  _CustomElementNodeValidator: {
    "^": "_SimpleNodeValidator;allowTypeExtension,allowCustomTag,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsElement$1: function(element) {
      var t1, isAttr, t2;
      if (this.allowTypeExtension) {
        t1 = J.getInterceptor$x(element);
        isAttr = t1.get$attributes(element)._element.getAttribute("is");
        if (isAttr != null) {
          t2 = this.allowedElements;
          return t2.contains$1(0, isAttr.toUpperCase()) && t2.contains$1(0, t1.get$tagName(element));
        }
      }
      return this.allowCustomTag && this.allowedElements.contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var t1;
      if (this.allowsElement$1(element)) {
        if (this.allowTypeExtension)
          if (attributeName === "is") {
            value.toString;
            t1 = this.allowedElements.contains$1(0, value.toUpperCase());
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          return true;
        return W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value);
      }
      return false;
    }
  },
  _TemplatingNodeValidator: {
    "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsAttribute$3: function(element, attributeName, value) {
      if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (J.get$attributes$x(element)._element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    },
    static: {"^": "_TemplatingNodeValidator__TEMPLATE_ATTRS", _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4;
        t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(0, ["TEMPLATE"]);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t3.addAll$1(0, t1);
        t1 = t3;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        t4.addAll$1(0, C.List_wSV);
        return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
      }}
  },
  _TemplatingNodeValidator_closure: {
    "^": "Closure:44;",
    call$1: [function(attr) {
      return "TEMPLATE::" + H.S(attr);
    }, "call$1", null, 2, 0, null, 98, "call"]
  },
  _SvgNodeValidator: {
    "^": "Object;",
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor(element);
      if (!!t1.$isScriptElement)
        return false;
      if (!!t1.$isSvgElement)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    }
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_length,_position,_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._length;
      if (nextPosition < t1) {
        this._current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  _DOMWindowCrossFrame: {
    "^": "Object;_window",
    get$parent: function(_) {
      return W._DOMWindowCrossFrame__createSafe(this._window.parent);
    },
    addEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    addEventListener$2: function($receiver, type, listener) {
      return this.addEventListener$3($receiver, type, listener, null);
    },
    removeEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    removeEventListener$2: function($receiver, type, listener) {
      return this.removeEventListener$3($receiver, type, listener, null);
    },
    $isEventTarget: true,
    static: {_DOMWindowCrossFrame__createSafe: function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }}
  },
  _WrappedEvent: {
    "^": "Object;",
    get$currentTarget: function(_) {
      return J.get$currentTarget$x(this.wrapped);
    },
    get$target: function(_) {
      return J.get$target$x(this.wrapped);
    },
    get$type: function(_) {
      return J.get$type$x(this.wrapped);
    },
    preventDefault$0: function(_) {
      J.preventDefault$0$x(this.wrapped);
    },
    stopPropagation$0: function(_) {
      J.stopPropagation$0$x(this.wrapped);
    },
    $isEvent: true
  },
  NodeValidator: {
    "^": "Object;"
  },
  _SameOriginUriPolicy: {
    "^": "Object;_hiddenAnchor,_loc",
    allowsUri$1: function(uri) {
      var t1, t2, t3, t4, t5;
      t1 = this._hiddenAnchor;
      t2 = J.getInterceptor$x(t1);
      t2.set$href(t1, uri);
      t3 = t2.get$hostname(t1);
      t4 = this._loc;
      t5 = t4.hostname;
      if (t3 == null ? t5 == null : t3 === t5) {
        t3 = t2.get$port(t1);
        t5 = t4.port;
        if (t3 == null ? t5 == null : t3 === t5) {
          t3 = t2.get$protocol(t1);
          t4 = t4.protocol;
          t4 = t3 == null ? t4 == null : t3 === t4;
          t3 = t4;
        } else
          t3 = false;
      } else
        t3 = false;
      if (!t3)
        t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
      else
        t1 = true;
      return t1;
    }
  },
  _ValidatingTreeSanitizer: {
    "^": "Object;validator",
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
    },
    sanitizeNode$1: function(node) {
      var t1, attrs, t2, isAttr, keys, i, $name, t3;
      switch (node.nodeType) {
        case 1:
          t1 = J.getInterceptor$x(node);
          attrs = t1.get$attributes(node);
          if (!this.validator.allowsElement$1(node)) {
            window;
            t2 = "Removing disallowed element <" + H.S(t1.get$tagName(node)) + ">";
            if (typeof console != "undefined")
              console.warn(t2);
            t1.remove$0(node);
            break;
          }
          t2 = attrs._element;
          isAttr = t2.getAttribute("is");
          if (isAttr != null)
            if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
              window;
              t2 = "Removing disallowed type extension <" + H.S(t1.get$tagName(node)) + " is=\"" + isAttr + "\">";
              if (typeof console != "undefined")
                console.warn(t2);
              t1.remove$0(node);
              break;
            }
          keys = C.JSArray_methods.toList$0(attrs.get$keys(attrs));
          for (i = attrs.get$keys(attrs).length - 1; i >= 0; --i) {
            if (i >= keys.length)
              return H.ioore(keys, i);
            $name = keys[i];
            if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
              window;
              t3 = "Removing disallowed attribute <" + H.S(t1.get$tagName(node)) + " " + H.S($name) + "=\"" + H.S(t2.getAttribute($name)) + "\">";
              if (typeof console != "undefined")
                console.warn(t3);
              t2.getAttribute($name);
              t2.removeAttribute($name);
            }
          }
          if (!!t1.$isTemplateElement)
            this.sanitizeTree$1(node.content);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          J.remove$0$ax(node);
      }
    }
  },
  _ValidatingTreeSanitizer_sanitizeTree_walk: {
    "^": "Closure:99;this_0",
    call$1: function(node) {
      var child, nextChild;
      this.this_0.sanitizeNode$1(node);
      child = node.lastChild;
      for (; child != null; child = nextChild) {
        nextChild = child.previousSibling;
        this.call$1(child);
      }
    }
  }
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": "",
  KeyRange: {
    "^": "Interceptor;",
    $isKeyRange: true,
    "%": "IDBKeyRange"
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  AElement: {
    "^": "GraphicsElement;target=",
    "%": "SVGAElement"
  },
  FEBlendElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,height=,result=,width=,x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;height=,result=,width=,x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=,height=,result=,width=,x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    "%": "SVGPatternElement"
  },
  PointList: {
    "^": "Interceptor;length=",
    clear$0: function(receiver) {
      return receiver.clear();
    },
    "%": "SVGPointList"
  },
  PolygonElement: {
    "^": "GeometryElement;points=",
    "%": "SVGPolygonElement"
  },
  PolylineElement: {
    "^": "GeometryElement;points=",
    "%": "SVGPolylineElement"
  },
  Rect: {
    "^": "Interceptor;height=,width=,x%,y%",
    "%": "SVGRect"
  },
  RectElement: {
    "^": "GeometryElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement: {
    "^": "SvgElement;type%",
    $isScriptElement: true,
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "^": "SvgElement;type%",
    set$title: function(receiver, value) {
      receiver.title = value;
    },
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "^": "Element;",
    get$classes: function(receiver) {
      if (receiver._cssClassSet == null)
        receiver._cssClassSet = new P._AttributeClassSet(receiver);
      return receiver._cssClassSet;
    },
    get$children: function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
    },
    get$innerHtml: function(receiver) {
      var container, cloned, t1;
      container = W._ElementFactoryProvider_createElement_tag("div", null);
      cloned = receiver.cloneNode(true);
      t1 = J.getInterceptor$x(container);
      J.addAll$1$ax(t1.get$children(container), J.get$children$x(cloned));
      return t1.get$innerHtml(container);
    },
    set$innerHtml: function(receiver, value) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, fragment, svgFragment, root;
      if (validator == null) {
        t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
        validator = new W.NodeValidatorBuilder(t1);
        t1.push(W._Html5NodeValidator$(null));
        t1.push(W._TemplatingNodeValidator$());
        t1.push(new W._SvgNodeValidator());
      }
      treeSanitizer = new W._ValidatingTreeSanitizer(validator);
      html = "<svg version=\"1.1\">" + H.S(svg) + "</svg>";
      fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
      svgFragment = document.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    insertAdjacentHtml$2: function(receiver, where, text) {
      throw H.wrapException(P.UnsupportedError$("Cannot invoke insertAdjacentHtml on SVG."));
    },
    click$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot invoke click SVG."));
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forElement$1(receiver);
    },
    get$onContextMenu: function(receiver) {
      return C.EventStreamProvider_contextmenu.forElement$1(receiver);
    },
    $isSvgElement: true,
    $isEventTarget: true,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGUseElement"
  },
  _AttributeClassSet: {
    "^": "CssClassSetImpl;_svg$_element",
    readClasses$0: function() {
      var classname, s, t1, trimmed;
      classname = this._svg$_element.getAttribute("class");
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1.__internal$_current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._svg$_element.setAttribute("class", s.join$1(0, " "));
    }
  }
}],
["dart.dom.web_gl", "dart:web_gl", , P, {
  "^": "",
  RenderingContext: {
    "^": "Interceptor;",
    enable$1: function(receiver, cap) {
      return receiver.enable(cap);
    },
    finish$0: function(receiver) {
      return receiver.finish();
    },
    "%": "WebGLRenderingContext"
  }
}],
["dart.dom.web_sql", "dart:web_sql", , P, {
  "^": "",
  SqlError: {
    "^": "Interceptor;code=",
    "%": "SQLError"
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;",
    $isCapability: true
  }
}],
["dart.js", "dart:js", , P, {
  "^": "",
  _convertDartFunction: function(f, captureThis) {
    return function(_call, f, captureThis) {
      return function() {
        return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
      };
    }(P._callDartFunction, f, captureThis);
  },
  _callDartFunction: [function(callback, captureThis, $self, $arguments) {
    var arguments0;
    if (captureThis === true) {
      arguments0 = [$self];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      $arguments = arguments0;
    }
    return P._convertToJS(H.Primitives_applyFunction(callback, P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure()), true, null), P.Function__toMangledNames(null)));
  }, "call$4", "_callDartFunction$closure", 8, 0, null, 40, 41, 42, 43],
  _defineProperty: function(o, $name, value) {
    var exception;
    if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name))
      try {
        Object.defineProperty(o, $name, {value: value});
        return true;
      } catch (exception) {
        H.unwrapException(exception);
      }

    return false;
  },
  _getOwnProperty: function(o, $name) {
    if (Object.prototype.hasOwnProperty.call(o, $name))
      return o[$name];
    return;
  },
  _convertToJS: [function(o) {
    var t1;
    if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
      return o;
    else {
      t1 = J.getInterceptor(o);
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      else if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      else if (!!t1.$isJsObject)
        return o._jsObject;
      else if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      else
        return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.get$_dartProxyCtor()));
    }
  }, "call$1", "_convertToJS$closure", 2, 0, 44, 45],
  _getJsProxy: function(o, propertyName, createProxy) {
    var jsProxy = P._getOwnProperty(o, propertyName);
    if (jsProxy == null) {
      jsProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, jsProxy);
    }
    return jsProxy;
  },
  _convertToDart: [function(o) {
    var t1;
    if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
      return o;
    else {
      if (o instanceof Object) {
        t1 = J.getInterceptor(o);
        t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
      } else
        t1 = false;
      if (t1)
        return o;
      else if (o instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
      else if (o.constructor === $.get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }
  }, "call$1", "_convertToDart$closure", 2, 0, 31, 45],
  _wrapToDart: function(o) {
    if (typeof o == "function")
      return P._getDartProxy(o, $.get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
    else if (o instanceof Array)
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
    else
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
  },
  _getDartProxy: function(o, propertyName, createProxy) {
    var dartProxy = P._getOwnProperty(o, propertyName);
    if (dartProxy == null || !(o instanceof Object)) {
      dartProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, dartProxy);
    }
    return dartProxy;
  },
  JsObject: {
    "^": "Object;_jsObject",
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isJsObject && this._jsObject === other._jsObject;
    },
    hasProperty$1: function(property) {
      return property in this._jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return P.Object.prototype.toString$0.call(this, this);
      }

    },
    callMethod$2: function(method, args) {
      var t1, t2;
      t1 = this._jsObject;
      t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P._convertToJS$closure()), true, null);
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    callMethod$1: function(method) {
      return this.callMethod$2(method, null);
    },
    $isJsObject: true,
    static: {JsObject_JsObject: function($constructor, $arguments) {
        var constr, args, factoryFunction;
        constr = P._convertToJS($constructor);
        args = [null];
        C.JSArray_methods.addAll$1(args, H.setRuntimeTypeInfo(new H.MappedListIterable($arguments, P._convertToJS$closure()), [null, null]));
        factoryFunction = constr.bind.apply(constr, args);
        String(factoryFunction);
        return P._wrapToDart(new factoryFunction());
      }, JsObject_JsObject$jsify: function(object) {
        return P._wrapToDart(P.JsObject__convertDataTree(object));
      }, JsObject__convertDataTree: function(data) {
        return new P.JsObject__convertDataTree__convert(H.setRuntimeTypeInfo(new P._IdentityHashMap(0, null, null, null, null), [null, null])).call$1(data);
      }}
  },
  JsObject__convertDataTree__convert: {
    "^": "Closure:44;_convertedObjects_0",
    call$1: [function(o) {
      var t1, t2, convertedMap, key, convertedList;
      t1 = this._convertedObjects_0;
      if (t1.containsKey$1(0, o))
        return t1.$index(0, o);
      t2 = J.getInterceptor(o);
      if (!!t2.$isMap) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.get$iterator$ax(t2.get$keys(o)); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(t2.$index(o, key));
        }
        return convertedMap;
      } else if (!!t2.$isIterable) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
        return convertedList;
      } else
        return P._convertToJS(o);
    }, "call$1", null, 2, 0, null, 45, "call"]
  },
  JsFunction: {
    "^": "JsObject;_jsObject",
    static: {JsFunction_JsFunction$withThis: function(f) {
        return new P.JsFunction(P._convertDartFunction(f, true));
      }}
  },
  JsArray: {
    "^": "JsObject_ListMixin;_jsObject",
    $index: function(_, index) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
      }
      return P.JsObject.prototype.$index.call(this, this, index);
    },
    $indexSet: function(_, index, value) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
      }
      P.JsObject.prototype.$indexSet.call(this, this, index, value);
    },
    get$length: function(_) {
      var len = this._jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      P.JsObject.prototype.$indexSet.call(this, this, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [value]);
    },
    addAll$1: function(_, iterable) {
      this.callMethod$2("push", iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var $length, args;
      P.JsArray__checkRange(start, end, this.get$length(this));
      $length = end - start;
      if ($length === 0)
        return;
      args = [start, $length];
      C.JSArray_methods.addAll$1(args, H.SubListIterable$(iterable, skipCount, null, H.getRuntimeTypeArgument(iterable, "ListMixin", 0)).take$1(0, $length));
      this.callMethod$2("splice", args);
    },
    static: {JsArray__checkRange: function(start, end, $length) {
        if (start > $length)
          throw H.wrapException(P.RangeError$range(start, 0, $length, null, null));
        if (end < start || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, null, null));
      }}
  },
  JsObject_ListMixin: {
    "^": "JsObject+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  _convertToJS_closure: {
    "^": "Closure:44;",
    call$1: function(o) {
      var jsFunction = P._convertDartFunction(o, false);
      P._defineProperty(jsFunction, $.get$_DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    }
  },
  _convertToJS_closure0: {
    "^": "Closure:44;ctor_0",
    call$1: function(o) {
      return new this.ctor_0(o);
    }
  },
  _wrapToDart_closure: {
    "^": "Closure:44;",
    call$1: function(o) {
      return new P.JsFunction(o);
    }
  },
  _wrapToDart_closure0: {
    "^": "Closure:44;",
    call$1: function(o) {
      return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
    }
  },
  _wrapToDart_closure1: {
    "^": "Closure:44;",
    call$1: function(o) {
      return new P.JsObject(o);
    }
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish0: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    var t1;
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0)
        t1 = b === 0 ? 1 / b < 0 : b < 0;
      else
        t1 = false;
      if (t1 || isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
  },
  _JSRandom: {
    "^": "Object;",
    nextInt$1: function(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    nextDouble$0: function() {
      return Math.random();
    }
  },
  Point: {
    "^": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isPoint)
        return false;
      t1 = this.x;
      t2 = other.x;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.y;
        t2 = other.y;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point(t1 + t3, t4 + t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point(t1 - t3, t4 - t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $mul: function(_, factor) {
      var t1, t2;
      t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof factor !== "number")
        return H.iae(factor);
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 = new P.Point(t1 * factor, t2 * factor);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $isPoint: true
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      return this.get$left(this) + this.width;
    },
    get$bottom: function(_) {
      return this.get$top(this) + this.height;
    },
    toString$0: function(_) {
      return "Rectangle (" + this.get$left(this) + ", " + this.top + ") " + this.width + " x " + this.height;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      if (this.get$left(this) === t1.get$left(other)) {
        t2 = this.top;
        t1 = t2 === t1.get$top(other) && this.left + this.width === t1.get$right(other) && t2 + this.height === t1.get$bottom(other);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this.top;
      return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, this.get$left(this) & 0x1FFFFFFF), t1 & 0x1FFFFFFF), this.left + this.width & 0x1FFFFFFF), t1 + this.height & 0x1FFFFFFF));
    }
  },
  Rectangle: {
    "^": "_RectangleBase;left>,top>,width>,height>",
    $isRectangle: true,
    $asRectangle: null,
    static: {Rectangle$: function(left, $top, width, height, $T) {
        var t1, t2;
        t1 = width < 0 ? -width * 0 : width;
        t2 = height < 0 ? -height * 0 : height;
        return H.setRuntimeTypeInfo(new P.Rectangle(left, $top, t1, t2), [$T]);
      }}
  }
}],
["dart.typed_data", "dart:typed_data", , P, {
  "^": "",
  Uint8List: {
    "^": "Object;",
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    }
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length)) {
        if (!!this.$isList)
          if ($length === receiver.length)
            throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        throw H.wrapException(P.RangeError$range(index, 0, $length - 1, null, null));
      } else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    $isTypedData: true,
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeByteData: {
    "^": "NativeTypedData;",
    $isTypedData: true,
    "%": "DataView"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    },
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    },
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isTypedData: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    "%": ";Uint8Array"
  },
  _checkLength: function($length) {
    return $length;
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfDouble: true
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  Device_isOpera: function() {
    var t1 = $.Device__isOpera;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isOpera = t1;
    }
    return t1;
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  Device_cssPrefix: function() {
    var t1 = $.Device__cachedCssPrefix;
    if (t1 == null) {
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1 === true) {
        $.Device__cachedCssPrefix = "-moz-";
        t1 = "-moz-";
      } else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1 === true) {
          $.Device__cachedCssPrefix = "-ms-";
          t1 = "-ms-";
        } else if (P.Device_isOpera() === true) {
          $.Device__cachedCssPrefix = "-o-";
          t1 = "-o-";
        } else {
          $.Device__cachedCssPrefix = "-webkit-";
          t1 = "-webkit-";
        }
      }
    }
    return t1;
  },
  CssClassSetImpl: {
    "^": "Object;",
    toString$0: function(_) {
      return this.readClasses$0().join$1(0, " ");
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this.readClasses$0();
      t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      this.readClasses$0().forEach$1(0, f);
    },
    map$1: function(_, f) {
      var t1 = this.readClasses$0();
      return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(t1, f), [H.getTypeArgumentByIndex(t1, 0), null]);
    },
    get$isEmpty: function(_) {
      return this.readClasses$0()._collection$_length === 0;
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    lookup$1: function(value) {
      return this.readClasses$0().contains$1(0, value) ? value : null;
    },
    add$1: function(_, value) {
      return this.modify$1(new P.CssClassSetImpl_add_closure(value));
    },
    remove$1: [function(_, value) {
      var s, result;
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    }, "call$1", "get$remove", 2, 0, 72],
    toList$1$growable: function(_, growable) {
      return this.readClasses$0().toList$1$growable(0, growable);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    skip$1: function(_, n) {
      var t1 = this.readClasses$0();
      return H.SkipIterable_SkipIterable(t1, n, H.getTypeArgumentByIndex(t1, 0));
    },
    clear$0: function(_) {
      this.modify$1(new P.CssClassSetImpl_clear_closure());
    },
    modify$1: function(f) {
      var s, ret;
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.String];
    }
  },
  CssClassSetImpl_add_closure: {
    "^": "Closure:44;value_0",
    call$1: [function(s) {
      return J.add$1$ax(s, this.value_0);
    }, "call$1", null, 2, 0, null, 100, "call"]
  },
  CssClassSetImpl_clear_closure: {
    "^": "Closure:44;",
    call$1: [function(s) {
      return J.clear$0$ax(s);
    }, "call$1", null, 2, 0, null, 100, "call"]
  },
  FilteredElementList: {
    "^": "ListBase;_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    },
    forEach$1: function(_, f) {
      C.JSArray_methods.forEach$1(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len = this.get$_filtered().length;
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
    },
    removeRange$2: function(_, start, end) {
      C.JSArray_methods.forEach$1(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._childNodes._this);
    },
    remove$1: [function(_, element) {
      return false;
    }, "call$1", "get$remove", 2, 0, 72],
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1 = this.get$_filtered();
      return new H.ListIterator(t1, t1.length, 0, null);
    }
  },
  FilteredElementList__filtered_closure: {
    "^": "Closure:44;",
    call$1: function(n) {
      return !!J.getInterceptor(n).$isElement;
    }
  },
  FilteredElementList_removeRange_closure: {
    "^": "Closure:44;",
    call$1: function(el) {
      return J.remove$0$ax(el);
    }
  }
}],
["sprintf", "package:sprintf/sprintf.dart", , O, {
  "^": "",
  Formatter_get_padding: function(count, pad) {
    var padding, padding_piece, t1;
    padding = P.StringBuffer$("");
    for (padding_piece = pad; t1 = J.getInterceptor$n(count), t1.$gt(count, 0);) {
      if (t1.$and(count, 1) === 1)
        padding._contents += typeof padding_piece === "string" ? padding_piece : H.S(padding_piece);
      count = t1.$shr(count, 1);
      padding_piece = H.S(padding_piece) + H.S(padding_piece);
    }
    t1 = padding._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  Formatter: {
    "^": "Object;"
  },
  FloatFormatter: {
    "^": "Formatter;_arg,_digits,_exponent,_decimal,_is_negative,_fraction_is_negative,fmt_type,options",
    toString$0: function(_) {
      var t1, ret, t2, _exp, sig_digs, min_chars, str_len, padding;
      t1 = this.options;
      if (t1.$index(0, "add_space") === true && J.$eq(t1.$index(0, "sign"), "") && J.$ge$n(this._arg, 0))
        t1.$indexSet(0, "sign", " ");
      if (J.get$isInfinite$n(H.numTypeCast(this._arg))) {
        if (J.get$isNegative$n(this._arg))
          t1.$indexSet(0, "sign", "-");
        t1.$indexSet(0, "padding_char", " ");
        ret = "inf";
      } else
        ret = "";
      if (J.get$isNaN$n(H.numTypeCast(this._arg))) {
        t1.$indexSet(0, "padding_char", " ");
        ret = "nan";
      }
      if (J.$eq(t1.$index(0, "precision"), -1))
        t1.$indexSet(0, "precision", 6);
      else if (this.fmt_type === "g" && J.$eq(t1.$index(0, "precision"), 0))
        t1.$indexSet(0, "precision", 1);
      t2 = this._arg;
      if (typeof t2 === "number") {
        if (this._is_negative)
          t1.$indexSet(0, "sign", "-");
        t2 = this.fmt_type;
        if (t2 === "e")
          ret = this.asExponential$2$remove_trailing_zeros(t1.$index(0, "precision"), false);
        else if (t2 === "f")
          ret = this.asFixed$2$remove_trailing_zeros(t1.$index(0, "precision"), false);
        else {
          _exp = this._exponent;
          sig_digs = t1.$index(0, "precision");
          if (typeof _exp !== "number")
            return H.iae(_exp);
          if (-4 <= _exp) {
            t2 = t1.$index(0, "precision");
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = _exp < t2;
          } else
            t2 = false;
          if (t2) {
            sig_digs = J.$sub$n(sig_digs, this._decimal);
            ret = this.asFixed$2$remove_trailing_zeros(P.max(J.$sub$n(J.$sub$n(t1.$index(0, "precision"), 1), _exp), sig_digs), t1.$index(0, "alternate_form") !== true);
          } else
            ret = this.asExponential$2$remove_trailing_zeros(J.$sub$n(t1.$index(0, "precision"), 1), t1.$index(0, "alternate_form") !== true);
        }
      }
      min_chars = t1.$index(0, "width");
      str_len = J.$add$ns(J.get$length$asx(ret), J.get$length$asx(t1.$index(0, "sign")));
      t2 = J.getInterceptor$n(min_chars);
      if (t2.$gt(min_chars, str_len))
        padding = J.$eq(t1.$index(0, "padding_char"), "0") && t1.$index(0, "left_align") !== true ? O.Formatter_get_padding(t2.$sub(min_chars, str_len), "0") : O.Formatter_get_padding(t2.$sub(min_chars, str_len), " ");
      else
        padding = "";
      if (t1.$index(0, "left_align") === true)
        ret = H.S(t1.$index(0, "sign")) + H.S(ret) + H.S(padding);
      else
        ret = J.$eq(t1.$index(0, "padding_char"), "0") ? H.S(t1.$index(0, "sign")) + H.S(padding) + H.S(ret) : H.S(padding) + H.S(t1.$index(0, "sign")) + H.S(ret);
      return t1.$index(0, "is_upper") === true ? ret.toUpperCase() : ret;
    },
    asFixed$2$remove_trailing_zeros: function(precision, remove_trailing_zeros) {
      var t1, ret, offset, t2, extra_zeroes, trailing_zeroes;
      t1 = this._digits;
      ret = H.IterableMixinWorkaround_fold(C.JSArray_methods.sublist$2(t1, 0, this._decimal), "", new O.FloatFormatter_asFixed_closure());
      offset = this._decimal;
      t2 = t1.length;
      if (typeof offset !== "number")
        return H.iae(offset);
      extra_zeroes = J.$sub$n(precision, t2 - offset);
      if (!remove_trailing_zeros) {
        if (J.$gt$n(extra_zeroes, 0))
          C.JSArray_methods.addAll$1(t1, J.split$1$s(O.Formatter_get_padding(extra_zeroes, "0"), ""));
        if (typeof precision !== "number")
          return H.iae(precision);
        trailing_zeroes = H.IterableMixinWorkaround_fold(C.JSArray_methods.sublist$2(t1, offset, offset + precision), "", new O.FloatFormatter_asFixed_closure0());
        if (J.get$length$asx(trailing_zeroes) === 0)
          return ret;
        ret = H.S(ret) + "." + H.S(trailing_zeroes);
      }
      return ret;
    },
    asExponential$2$remove_trailing_zeros: function(precision, remove_trailing_zeros) {
      var offset, t1, t2, t3, ret, extra_zeroes, trailing_digits, _exp_str, i, nzeroes;
      offset = J.$sub$n(this._decimal, this._exponent);
      t1 = this._digits;
      t2 = J.$sub$n(offset, 1);
      t3 = t1.length;
      if (t2 >>> 0 !== t2 || t2 >= t3)
        return H.ioore(t1, t2);
      ret = t1[t2];
      if (typeof offset !== "number")
        return H.iae(offset);
      extra_zeroes = J.$sub$n(precision, t3 - offset);
      if (J.$gt$n(extra_zeroes, 0))
        C.JSArray_methods.addAll$1(t1, J.split$1$s(O.Formatter_get_padding(extra_zeroes, "0"), ""));
      if (typeof precision !== "number")
        return H.iae(precision);
      trailing_digits = C.JSArray_methods.sublist$2(t1, offset, offset + precision);
      _exp_str = J.toString$0(J.abs$0$n(this._exponent));
      if (J.$lt$n(this._exponent, 10) && J.$gt$n(this._exponent, -10))
        _exp_str = "0" + _exp_str;
      _exp_str = J.$lt$n(this._exponent, 0) ? "e-" + _exp_str : "e+" + _exp_str;
      if (remove_trailing_zeros) {
        for (i = trailing_digits.length - 1, nzeroes = 0; i > 0; --i) {
          if (i >= trailing_digits.length)
            return H.ioore(trailing_digits, i);
          if (J.$eq(trailing_digits[i], "0"))
            ++nzeroes;
          else
            break;
        }
        trailing_digits = C.JSArray_methods.sublist$2(trailing_digits, 0, trailing_digits.length - nzeroes);
      }
      if (trailing_digits.length > 0)
        ret = J.$add$ns(ret, ".");
      return H.S(H.IterableMixinWorkaround_fold(trailing_digits, ret, new O.FloatFormatter_asExponential_closure())) + _exp_str;
    },
    FloatFormatter$3: function(_arg, fmt_type, options) {
      var arg_str, m1, t1, t2, int_part, fraction, leading_zeroes_match, zeroes_count, m2, t3, t4, diff;
      if (J.$lt$n(this._arg, 0)) {
        this._is_negative = true;
        this._arg = J.$negate$n(this._arg);
      }
      arg_str = C.JSNumber_methods.toString$0(J.toDouble$0$n(this._arg));
      m1 = $.get$FloatFormatter__number_rx().firstMatch$1(arg_str);
      if (m1 != null) {
        t1 = m1._match;
        t2 = t1.length;
        if (1 >= t2)
          return H.ioore(t1, 1);
        int_part = t1[1];
        if (2 >= t2)
          return H.ioore(t1, 2);
        fraction = t1[2];
        t1 = J.getInterceptor$asx(int_part);
        this._decimal = t1.get$length(int_part);
        t2 = this._digits;
        C.JSArray_methods.addAll$1(t2, t1.split$1(int_part, ""));
        C.JSArray_methods.addAll$1(t2, J.split$1$s(fraction, ""));
        if (t1.get$length(int_part) === 1)
          if (t1.$eq(int_part, "0")) {
            leading_zeroes_match = $.get$FloatFormatter__leading_zeroes_rx().firstMatch$1(fraction);
            if (leading_zeroes_match != null) {
              t1 = leading_zeroes_match._match;
              if (1 >= t1.length)
                return H.ioore(t1, 1);
              zeroes_count = J.get$length$asx(t1[1]);
              t1 = J.getInterceptor$n(zeroes_count);
              this._exponent = t1.$gt(zeroes_count, 0) ? -t1.$add(zeroes_count, 1) : t1.$sub(zeroes_count, 1);
            } else
              this._exponent = 0;
          } else
            this._exponent = 0;
        else
          this._exponent = J.$sub$n(t1.get$length(int_part), 1);
      } else {
        m2 = $.get$FloatFormatter__expo_rx().firstMatch$1(arg_str);
        if (m2 != null) {
          t1 = m2._match;
          t2 = t1.length;
          if (1 >= t2)
            return H.ioore(t1, 1);
          int_part = t1[1];
          if (2 >= t2)
            return H.ioore(t1, 2);
          fraction = t1[2];
          if (3 >= t2)
            return H.ioore(t1, 3);
          t1 = H.Primitives_parseInt(t1[3], null, null);
          this._exponent = t1;
          t2 = this._digits;
          t3 = J.getInterceptor$asx(int_part);
          t4 = J.getInterceptor$asx(fraction);
          if (J.$gt$n(t1, 0)) {
            diff = J.$add$ns(J.$sub$n(this._exponent, t4.get$length(fraction)), 1);
            this._decimal = J.$add$ns(this._exponent, 1);
            C.JSArray_methods.addAll$1(t2, t3.split$1(int_part, ""));
            C.JSArray_methods.addAll$1(t2, t4.split$1(fraction, ""));
            C.JSArray_methods.addAll$1(t2, J.split$1$s(O.Formatter_get_padding(diff, "0"), ""));
          } else {
            t1 = J.$sub$n(t3.get$length(int_part), this._exponent);
            this._decimal = t3.get$length(int_part);
            C.JSArray_methods.addAll$1(t2, J.split$1$s(O.Formatter_get_padding(t1 - 1, "0"), ""));
            C.JSArray_methods.addAll$1(t2, t3.split$1(int_part, ""));
            C.JSArray_methods.addAll$1(t2, t4.split$1(fraction, ""));
          }
        }
      }
    },
    static: {"^": "FloatFormatter__number_rx,FloatFormatter__expo_rx,FloatFormatter__leading_zeroes_rx", FloatFormatter$: function(_arg, fmt_type, options) {
        var t1 = new O.FloatFormatter(_arg, H.setRuntimeTypeInfo([], [P.String]), 0, 0, false, false, fmt_type, options);
        t1.FloatFormatter$3(_arg, fmt_type, options);
        return t1;
      }}
  },
  FloatFormatter_asFixed_closure: {
    "^": "Closure:52;",
    call$2: function(i, e) {
      return H.S(i) + H.S(e);
    }
  },
  FloatFormatter_asFixed_closure0: {
    "^": "Closure:52;",
    call$2: function(i, e) {
      return H.S(i) + H.S(e);
    }
  },
  FloatFormatter_asExponential_closure: {
    "^": "Closure:52;",
    call$2: function(i, e) {
      return H.S(i) + H.S(e);
    }
  },
  IntFormatter: {
    "^": "Formatter;_arg,fmt_type,options",
    toString$0: function(_) {
      var t1, radix, ret, prefix, min_digits, min_chars, num_length, sign_length, t2, str_len, padding;
      t1 = this.fmt_type;
      if (t1 === "x")
        radix = 16;
      else
        radix = t1 === "o" ? 8 : 10;
      if (J.$lt$n(this._arg, 0)) {
        t1 = J.abs$0$n(this._arg);
        this._arg = t1;
        if (radix === 10)
          this.options.$indexSet(0, "sign", "-");
        else
          this._arg = (18446744073709551616 - J.$mod$n(t1, 18446744073709551616) + 1 & 18446744073709551616) >>> 0;
      }
      ret = J.toRadixString$1$n(this._arg, radix);
      t1 = this.options;
      if (t1.$index(0, "alternate_form") === true) {
        if (radix === 16 && !J.$eq(this._arg, 0))
          prefix = "0x";
        else
          prefix = radix === 8 && !J.$eq(this._arg, 0) ? "0" : "";
        if (J.$eq(t1.$index(0, "sign"), "+") && radix !== 10)
          t1.$indexSet(0, "sign", "");
      } else
        prefix = "";
      if (t1.$index(0, "add_space") === true && J.$eq(t1.$index(0, "sign"), "") && J.$gt$n(this._arg, -1) && radix === 10)
        t1.$indexSet(0, "sign", " ");
      if (radix !== 10)
        t1.$indexSet(0, "sign", "");
      min_digits = t1.$index(0, "precision");
      min_chars = t1.$index(0, "width");
      num_length = ret.length;
      sign_length = J.get$length$asx(t1.$index(0, "sign"));
      if (radix === 8 && J.$le$n(min_chars, min_digits))
        num_length += prefix.length;
      t2 = J.getInterceptor$n(min_digits);
      if (t2.$gt(min_digits, num_length)) {
        ret = H.S(O.Formatter_get_padding(t2.$sub(min_digits, num_length), "0")) + ret;
        num_length = ret.length;
      }
      if (typeof sign_length !== "number")
        return H.iae(sign_length);
      str_len = num_length + sign_length + prefix.length;
      t2 = J.getInterceptor$n(min_chars);
      if (t2.$gt(min_chars, str_len))
        padding = J.$eq(t1.$index(0, "padding_char"), "0") && t1.$index(0, "left_align") !== true ? O.Formatter_get_padding(t2.$sub(min_chars, str_len), "0") : O.Formatter_get_padding(t2.$sub(min_chars, str_len), " ");
      else
        padding = "";
      if (t1.$index(0, "left_align") === true)
        ret = H.S(t1.$index(0, "sign")) + prefix + ret + H.S(padding);
      else
        ret = J.$eq(t1.$index(0, "padding_char"), "0") ? H.S(t1.$index(0, "sign")) + prefix + H.S(padding) + ret : H.S(padding) + H.S(t1.$index(0, "sign")) + prefix + ret;
      return t1.$index(0, "is_upper") === true ? ret.toUpperCase() : ret;
    },
    static: {"^": "IntFormatter_MAX_INT"}
  },
  StringFormatter: {
    "^": "Formatter;_arg,fmt_type,options",
    toString$0: function(_) {
      var ret, t1, diff, padding;
      ret = this._arg;
      t1 = this.options;
      if (J.$gt$n(t1.$index(0, "precision"), -1) && J.$le$n(t1.$index(0, "precision"), J.get$length$asx(ret)))
        ret = J.substring$2$s(ret, 0, t1.$index(0, "precision"));
      if (J.$gt$n(t1.$index(0, "width"), -1)) {
        diff = J.$sub$n(t1.$index(0, "width"), J.get$length$asx(ret));
        if (J.$gt$n(diff, 0)) {
          padding = O.Formatter_get_padding(diff, t1.$index(0, "padding_char"));
          ret = t1.$index(0, "left_align") !== true ? H.S(padding) + H.S(ret) : H.S(ret) + H.S(padding);
        }
      }
      return ret;
    }
  },
  PrintFormat: {
    "^": "Object:101;_formatters",
    call$2: function(fmt, args) {
      var t1, t2, t3, t4, ret, offset, arg_offset, t5, t6, _parameter, _flags, _width, _precision, _type, _options, t7, t8, _arg, arg_offset0, t9, _arg_str;
      t1 = J.getInterceptor(args);
      if (!t1.$isList)
        throw H.wrapException(P.ArgumentError$("Expecting list as second argument"));
      t2 = $.get$PrintFormat_specifier();
      t2.toString;
      H.checkString(fmt);
      H.checkInt(0);
      t3 = J.get$length$asx(fmt);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = 0 > t3;
      if (t3)
        H.throwExpression(P.RangeError$range(0, 0, J.get$length$asx(fmt), null, null));
      t2 = new H._AllMatchesIterator(t2, fmt, 0, null);
      t3 = J.getInterceptor$s(fmt);
      t4 = this._formatters;
      ret = "";
      offset = 0;
      arg_offset = 0;
      for (; t2.moveNext$0();) {
        t5 = t2.__js_helper$_current._match;
        t6 = t5.length;
        if (1 >= t6)
          return H.ioore(t5, 1);
        _parameter = t5[1];
        if (2 >= t6)
          return H.ioore(t5, 2);
        _flags = t5[2];
        if (3 >= t6)
          return H.ioore(t5, 3);
        _width = t5[3];
        if (4 >= t6)
          return H.ioore(t5, 4);
        _precision = t5[4];
        if (5 >= t6)
          return H.ioore(t5, 5);
        _type = t5[5];
        _options = P.LinkedHashMap_LinkedHashMap$_literal(["is_upper", false, "width", -1, "precision", -1, "length", -1, "radix", 10, "sign", "", "specifier_type", _type], null, null);
        t6 = J.getInterceptor$asx(_flags);
        t7 = t6.indexOf$1(_flags, "+") > -1 ? "+" : "";
        t8 = t6.indexOf$1(_flags, "0") > -1 ? "0" : " ";
        P.LinkedHashMap_LinkedHashMap$_literal(["sign", t7, "padding_char", t8, "add_space", t6.indexOf$1(_flags, " ") > -1, "left_align", t6.indexOf$1(_flags, "-") > -1, "alternate_form", t6.indexOf$1(_flags, "#") > -1], null, null).forEach$1(0, new O.PrintFormat_call_closure(_options));
        _arg = _parameter == null ? null : t1.$index(args, H.Primitives_parseInt(_parameter, null, null));
        t7 = _width == null;
        if (!t7) {
          if (J.$eq(_width, "*")) {
            arg_offset0 = arg_offset + 1;
            t8 = t1.$index(args, arg_offset);
            arg_offset = arg_offset0;
          } else
            t8 = H.Primitives_parseInt(_width, null, null);
          _options.$indexSet(0, "width", t8);
        }
        t8 = _precision != null;
        if (t8) {
          if (J.$eq(_precision, "*")) {
            arg_offset0 = arg_offset + 1;
            t9 = t1.$index(args, arg_offset);
            arg_offset = arg_offset0;
          } else
            t9 = H.Primitives_parseInt(_precision, null, null);
          _options.$indexSet(0, "precision", t9);
        }
        if (_arg == null && !J.$eq(_type, "%")) {
          arg_offset0 = arg_offset + 1;
          _arg = t1.$index(args, arg_offset);
          arg_offset = arg_offset0;
        }
        t9 = $.get$PrintFormat_uppercase_rx()._nativeRegExp;
        if (typeof _type !== "string")
          H.throwExpression(P.ArgumentError$(_type));
        _options.$indexSet(0, "is_upper", t9.test(_type));
        if (J.$eq(_type, "%")) {
          if (J.$gt$n(t6.get$length(_flags), 0) || !t7 || t8)
            throw H.wrapException(P.Exception_Exception("\"%\" does not take any flags"));
          _arg_str = "%";
        } else if (t4.containsKey$1(0, _type))
          _arg_str = J.toString$0(t4.$index(0, _type).call$2(_arg, _options));
        else
          throw H.wrapException(P.ArgumentError$("Unknown format type " + H.S(_type)));
        ret += t3.substring$2(fmt, offset, t5.index);
        t6 = t5.index;
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = J.get$length$asx(t5[0]);
        if (typeof t5 !== "number")
          return H.iae(t5);
        offset = t6 + t5;
        ret = C.JSString_methods.$add(ret, _arg_str);
      }
      return ret + t3.substring$1(fmt, offset);
    },
    $isFunction: true,
    static: {"^": "PrintFormat_specifier,PrintFormat_uppercase_rx"}
  },
  closure5: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return new O.IntFormatter(arg, "i", options);
    }
  },
  closure6: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return new O.IntFormatter(arg, "d", options);
    }
  },
  closure7: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return new O.IntFormatter(arg, "x", options);
    }
  },
  closure8: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return new O.IntFormatter(arg, "x", options);
    }
  },
  closure9: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return new O.IntFormatter(arg, "o", options);
    }
  },
  closure10: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return new O.IntFormatter(arg, "o", options);
    }
  },
  closure11: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return O.FloatFormatter$(arg, "e", options);
    }
  },
  closure12: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return O.FloatFormatter$(arg, "e", options);
    }
  },
  closure13: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return O.FloatFormatter$(arg, "f", options);
    }
  },
  closure14: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return O.FloatFormatter$(arg, "f", options);
    }
  },
  closure15: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return O.FloatFormatter$(arg, "g", options);
    }
  },
  closure16: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      return O.FloatFormatter$(arg, "g", options);
    }
  },
  closure17: {
    "^": "Closure:52;",
    call$2: function(arg, options) {
      options.$indexSet(0, "padding_char", " ");
      return new O.StringFormatter(arg, "s", options);
    }
  },
  PrintFormat_call_closure: {
    "^": "Closure:52;_options_0",
    call$2: function($K, $V) {
      this._options_0.$indexSet(0, $K, $V);
    }
  }
}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
  "^": "",
  Matrix2: {
    "^": "Object;storage<",
    index$2: [function(_, row, col) {
      return col * 2 + row;
    }, "call$2", "get$index", 4, 0, 102],
    setValues$4: function(arg0, arg1, arg2, arg3) {
      var t1 = this.storage;
      t1[3] = arg3;
      t1[2] = arg2;
      t1[1] = arg1;
      t1[0] = arg0;
      return this;
    },
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.get$storage();
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t1[3] = t2[3];
      t2 = arg.get$storage();
      if (2 >= t2.length)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      t2 = arg.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = arg.get$storage();
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n";
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(H._checkLength(2));
      t2 = this.storage;
      if (row >= 4)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 2 + row;
      if (t3 >= 4)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      return new T.Vector2(t1);
    },
    $mul: function(_, arg) {
      var t1, t2;
      if (typeof arg === "number") {
        t1 = new Float32Array(H._checkLength(4));
        t2 = this.storage;
        t1[3] = t2[3] * arg;
        t1[2] = t2[2] * arg;
        t1[1] = t2[1] * arg;
        t1[0] = t2[0] * arg;
        return new T.Matrix2(t1);
      }
      arg.get$dimension();
      throw H.wrapException(P.ArgumentError$(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = new Float32Array(H._checkLength(4));
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t1[0] = t3 + t4[0];
      t4 = t2[1];
      t3 = arg.get$storage();
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = t4 + t3[1];
      t3 = t2[2];
      t4 = arg.get$storage();
      if (2 >= t4.length)
        return H.ioore(t4, 2);
      t1[2] = t3 + t4[2];
      t2 = t2[3];
      t4 = arg.get$storage();
      if (3 >= t4.length)
        return H.ioore(t4, 3);
      t1[3] = t2 + t4[3];
      return new T.Matrix2(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = new Float32Array(H._checkLength(4));
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t1[0] = t3 - t4[0];
      t4 = t2[1];
      t3 = arg.get$storage();
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = t4 - t3[1];
      t3 = t2[2];
      t4 = arg.get$storage();
      if (2 >= t4.length)
        return H.ioore(t4, 2);
      t1[2] = t3 - t4[2];
      t2 = t2[3];
      t4 = arg.get$storage();
      if (3 >= t4.length)
        return H.ioore(t4, 3);
      t1[3] = t2 - t4[3];
      return new T.Matrix2(t1);
    },
    $negate: function(_) {
      var t1, t2;
      t1 = new Float32Array(H._checkLength(4));
      t2 = this.storage;
      t1[0] = -t2[0];
      t1[1] = -t2[1];
      return new T.Matrix2(t1);
    },
    transposed$0: function() {
      var t1, t2;
      t1 = new Float32Array(H._checkLength(4));
      t2 = this.storage;
      t1[0] = t2[0];
      t1[1] = t2[2];
      t1[2] = t2[1];
      t1[3] = t2[3];
      return new T.Matrix2(t1);
    },
    invert$0: function() {
      var t1, t2, t3, t4, t5, det, invDet;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[3];
      t4 = t1[1];
      t5 = t1[2];
      det = t2 * t3 - t4 * t5;
      if (det === 0)
        return 0;
      invDet = 1 / det;
      t1[0] = t3 * invDet;
      t1[1] = -t4 * invDet;
      t1[2] = -t5 * invDet;
      t1[3] = t2 * invDet;
      return det;
    },
    setRotation$1: function(radians) {
      var c, s, t1;
      c = Math.cos(H.checkNum(radians));
      s = Math.sin(H.checkNum(radians));
      t1 = this.storage;
      t1[0] = c;
      t1[1] = s;
      t1[2] = -s;
      t1[3] = c;
    },
    add$1: function(_, o) {
      var t1 = this.storage;
      t1[0] = C.JSNumber_methods.$add(t1[0], o.get$storage().$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t1[1], o.get$storage().$index(0, 1));
      t1[2] = C.JSNumber_methods.$add(t1[2], o.get$storage().$index(0, 2));
      t1[3] = C.JSNumber_methods.$add(t1[3], o.get$storage().$index(0, 3));
      return this;
    },
    transformed$2: function(arg, out) {
      var t1, t2, t3, t4, t5, t6, t7;
      out.setFrom$1(arg);
      t1 = this.storage;
      t2 = t1[0];
      t3 = out.storage;
      t4 = t3[0];
      t5 = t1[2];
      t6 = t3[1];
      t7 = t1[1];
      t1 = t1[3];
      t3[0] = t2 * t4 + t5 * t6;
      t3[1] = t7 * t4 + t1 * t6;
      return out;
    }
  },
  Vector2: {
    "^": "Object;storage<",
    setValues$2: function(x_, y_) {
      var t1 = this.storage;
      t1[0] = x_;
      t1[1] = y_;
      return this;
    },
    setZero$0: function() {
      var t1 = this.storage;
      t1[0] = 0;
      t1[1] = 0;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t2 = other.get$storage();
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
    },
    $negate: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = -t2;
      t3[1] = -t1;
      return new T.Vector2(t3);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t1 = t1[1];
      t4 = other.get$storage();
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      t4 = t4[1];
      t5 = new Float32Array(H._checkLength(2));
      t5[0] = t2 - t3;
      t5[1] = t1 - t4;
      return new T.Vector2(t5);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t1 = t1[1];
      t4 = other.get$storage();
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      t4 = t4[1];
      t5 = new Float32Array(H._checkLength(2));
      t5[0] = t2 + t3;
      t5[1] = t1 + t4;
      return new T.Vector2(t5);
    },
    $div: function(_, scale) {
      var o, t1, t2, t3;
      if (typeof scale !== "number")
        return H.iae(scale);
      o = 1 / scale;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2 * o;
      t3[1] = t1 * o;
      return new T.Vector2(t3);
    },
    $mul: function(_, scale) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      if (typeof scale !== "number")
        return H.iae(scale);
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2 * scale;
      t3[1] = t1 * scale;
      return new T.Vector2(t3);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return Math.sqrt(H.checkNum(t2 * t2 + t1 * t1));
    },
    get$length2: function() {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return t2 * t2 + t1 * t1;
    },
    normalize$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return this;
    },
    normalizeLength$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return 0;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return l;
    },
    dot$1: function(other) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t1 = t1[1];
      t4 = other.get$storage();
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      return t2 * t3 + t1 * t4[1];
    },
    cross$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.storage;
      return t1[0] * t2[1] - t1[1] * t2[0];
    },
    add$1: function(_, arg) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t1[0] = t2 + t3[0];
      t3 = t1[1];
      t2 = arg.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t3 + t2[1];
      return this;
    },
    sub$1: function(arg) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t1[0] = t2 - t3[0];
      t3 = t1[1];
      t2 = arg.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t3 - t2[1];
      return this;
    },
    scale$1: function(_, arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[1];
      if (typeof arg !== "number")
        return H.iae(arg);
      t1[1] = t2 * arg;
      t1[0] = t1[0] * arg;
      return this;
    },
    negate$0: function() {
      var t1 = this.storage;
      t1[1] = -t1[1];
      t1[0] = -t1[0];
      return this;
    },
    clone$0: function(_) {
      var t1 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t1.setFrom$1(this);
      return t1;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    }
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
;(function() {
  var TRUE = !0, _;
  _ = P.String;
  _.$isString = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.String];
  _.$isObject = TRUE;
  _ = P.$int;
  _.$is$int = TRUE;
  _.$isnum = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.num];
  _.$isObject = TRUE;
  _ = P.$double;
  _.$is$double = TRUE;
  _.$isnum = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.num];
  _.$isObject = TRUE;
  _ = W.Node;
  _.$isNode = TRUE;
  _.$isEventTarget = TRUE;
  _.$isObject = TRUE;
  _ = P.num;
  _.$isnum = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.num];
  _.$isObject = TRUE;
  _ = W.BeforeUnloadEvent;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = P.Duration;
  _.$isDuration = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [P.Duration];
  _.$isObject = TRUE;
  _ = W.Element;
  _.$isElement = TRUE;
  _.$isNode = TRUE;
  _.$isEventTarget = TRUE;
  _.$isEventTarget = TRUE;
  _.$isObject = TRUE;
  P.Match.$isObject = TRUE;
  P.Object.$isObject = TRUE;
  D.State.$isObject = TRUE;
  X.HItem.$isObject = TRUE;
  V.Body.$isObject = TRUE;
  F.Star.$isObject = TRUE;
  _ = W.MouseEvent;
  _.$isMouseEvent = TRUE;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = W.WheelEvent;
  _.$isWheelEvent = TRUE;
  _.$isMouseEvent = TRUE;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = W.KeyboardEvent;
  _.$isKeyboardEvent = TRUE;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = W.Event;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = W.NodeValidator;
  _.$isNodeValidator = TRUE;
  _.$isObject = TRUE;
  _ = P.Symbol;
  _.$isSymbol = TRUE;
  _.$isObject = TRUE;
  _ = T.Vector2;
  _.$isVector2 = TRUE;
  _.$isObject = TRUE;
  _ = P.Map;
  _.$isMap = TRUE;
  _.$isObject = TRUE;
  _ = W.HttpRequest;
  _.$isEventTarget = TRUE;
  _.$isObject = TRUE;
  _ = W.ProgressEvent;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = P.Stream;
  _.$isStream = TRUE;
  _.$isObject = TRUE;
  _ = P.StreamSubscription;
  _.$isStreamSubscription = TRUE;
  _.$isObject = TRUE;
  _ = P.bool;
  _.$isbool = TRUE;
  _.$isObject = TRUE;
  _ = P.List;
  _.$isList = TRUE;
  _.$isObject = TRUE;
  V.ContactRegister.$isObject = TRUE;
  V.Contact.$isObject = TRUE;
  V.PolygonContact.$isObject = TRUE;
  V.ManifoldPoint.$isObject = TRUE;
  V.PolygonAndCircleContact.$isObject = TRUE;
  V.CircleContact.$isObject = TRUE;
  V.DynamicTreeNode.$isObject = TRUE;
  _ = V.Pair;
  _.$isComparable = TRUE;
  _.$asComparable = [null];
  _.$isObject = TRUE;
  V.ContactConstraint.$isObject = TRUE;
  V.ContactConstraintPoint.$isObject = TRUE;
  V.TimeOfImpactConstraint.$isObject = TRUE;
  V.SimplexVertex.$isObject = TRUE;
  V.ClipVertex.$isObject = TRUE;
  V.Joint.$isObject = TRUE;
  V.Velocity.$isObject = TRUE;
  V.Position0.$isObject = TRUE;
  H.RawReceivePortImpl.$isObject = TRUE;
  H._IsolateEvent.$isObject = TRUE;
  H._IsolateContext.$isObject = TRUE;
  _ = W.DivElement;
  _.$isDivElement = TRUE;
  _.$isHtmlElement = TRUE;
  _.$isElement = TRUE;
  _.$isNode = TRUE;
  _.$isEventTarget = TRUE;
  _.$isEventTarget = TRUE;
  _.$isObject = TRUE;
  _ = P._BufferingStreamSubscription;
  _.$is_BufferingStreamSubscription = TRUE;
  _.$is_EventSink = TRUE;
  _.$isStreamSubscription = TRUE;
  _.$isObject = TRUE;
  _ = P.JsObject;
  _.$isJsObject = TRUE;
  _.$isObject = TRUE;
  _ = W.CanvasElement;
  _.$isCanvasElement = TRUE;
  _.$isHtmlElement = TRUE;
  _.$isElement = TRUE;
  _.$isNode = TRUE;
  _.$isEventTarget = TRUE;
  _.$isEventTarget = TRUE;
  _.$isObject = TRUE;
  _ = P.Timer;
  _.$isTimer = TRUE;
  _.$isObject = TRUE;
  _ = P.StackTrace;
  _.$isStackTrace = TRUE;
  _.$isObject = TRUE;
  _ = P._BroadcastSubscription;
  _.$is_BroadcastSubscription = TRUE;
  _.$is_BufferingStreamSubscription = TRUE;
  _.$is_EventSink = TRUE;
  _.$isStreamSubscription = TRUE;
  _.$isObject = TRUE;
  _ = A.Key;
  _.$isKey = TRUE;
  _.$isObject = TRUE;
  _ = W.EventTarget;
  _.$isEventTarget = TRUE;
  _.$isObject = TRUE;
  _ = W._Html5NodeValidator;
  _.$is_Html5NodeValidator = TRUE;
  _.$isNodeValidator = TRUE;
  _.$isObject = TRUE;
  _ = P.Comparable;
  _.$isComparable = TRUE;
  _.$isObject = TRUE;
  _ = P.AsyncError;
  _.$isAsyncError = TRUE;
  _.$isObject = TRUE;
  _ = P.Future;
  _.$isFuture = TRUE;
  _.$isObject = TRUE;
  _ = P._EventSink;
  _.$is_EventSink = TRUE;
  _.$isObject = TRUE;
  _ = W.HtmlElement;
  _.$isHtmlElement = TRUE;
  _.$isElement = TRUE;
  _.$isNode = TRUE;
  _.$isEventTarget = TRUE;
  _.$isEventTarget = TRUE;
  _.$isObject = TRUE;
  _ = P.DateTime;
  _.$isDateTime = TRUE;
  _.$isComparable = TRUE;
  _.$asComparable = [null];
  _.$isObject = TRUE;
  _ = P._DelayedEvent;
  _.$is_DelayedEvent = TRUE;
  _.$isObject = TRUE;
  _ = T.Matrix2;
  _.$isMatrix2 = TRUE;
  _.$isObject = TRUE;
  _ = P.Function;
  _.$isFunction = TRUE;
  _.$isObject = TRUE;
  _ = P.Uint8List;
  _.$isUint8List = TRUE;
  _.$isList = TRUE;
  _.$asList = [P.$int];
  _.$isObject = TRUE;
  _ = V.Fixture;
  _.$isFixture = TRUE;
  _.$isObject = TRUE;
  _ = V.TimeOfImpactOutput;
  _.$isTimeOfImpactOutput = TRUE;
  _.$isObject = TRUE;
  _ = V.TimeOfImpactInput;
  _.$isTimeOfImpactInput = TRUE;
  _.$isObject = TRUE;
  _ = V.DistanceOutput;
  _.$isDistanceOutput = TRUE;
  _.$isObject = TRUE;
  _ = V.SimplexCache;
  _.$isSimplexCache = TRUE;
  _.$isObject = TRUE;
  _ = V.DistanceInput;
  _.$isDistanceInput = TRUE;
  _.$isObject = TRUE;
})();
;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$a = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mod$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$mod(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J._addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
};
J._clearChildren$0$x = function(receiver) {
  return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
};
J._removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.checkMutable$1$a = function(receiver, a0) {
  return J.getInterceptor$a(receiver).checkMutable$1(receiver, a0);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.click$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).click$0(receiver);
};
J.clone$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).clone$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.complete$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).complete$0(receiver);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.enable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enable$1(receiver, a0);
};
J.fill$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).fill$0(receiver);
};
J.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
J.finish$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).finish$0(receiver);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_key(receiver);
};
J.get$a$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$a(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$body$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$body(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$code$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$code(receiver);
};
J.get$currentTarget$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$currentTarget(receiver);
};
J.get$dataset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$dataset(receiver);
};
J.get$deltaY$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$deltaY(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$filter$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$filter(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$index$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$index(receiver);
};
J.get$innerHtml$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$innerHtml(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isInfinite$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isInfinite(receiver);
};
J.get$isNaN$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isNaN(receiver);
};
J.get$isNegative$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isNegative(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$key(receiver);
};
J.get$keyCode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keyCode(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$onClick$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onClick(receiver);
};
J.get$onContextMenu$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onContextMenu(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$position$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$position(receiver);
};
J.get$remove$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$remove(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$result$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$result(receiver);
};
J.get$shape$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$shape(receiver);
};
J.get$src$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$src(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.getPropertyValue$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getPropertyValue$1(receiver, a0);
};
J.insertAdjacentHtml$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertAdjacentHtml$2(receiver, a0, a1);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$a$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$a(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$fillStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$left$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$left(receiver, value);
};
J.set$marginLeft$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$marginLeft(receiver, value);
};
J.set$marginTop$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$marginTop(receiver, value);
};
J.set$maxWidth$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$maxWidth(receiver, value);
};
J.set$opacity$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$opacity(receiver, value);
};
J.set$parent$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parent(receiver, value);
};
J.set$top$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$top(receiver, value);
};
J.set$transform$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$transform(receiver, value);
};
J.set$type$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$type(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.set$x$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$x(receiver, value);
};
J.set$y$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$y(receiver, value);
};
J.setFillColorRgb$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).setFillColorRgb$3(receiver, a0, a1, a2);
};
J.setInnerHtml$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).setInnerHtml$1(receiver, a0);
};
J.setProperty$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).setProperty$2(receiver, a0, a1);
};
J.setTransform$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).setTransform$2(receiver, a0, a1);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.stopPropagation$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).stopPropagation$0(receiver);
};
J.stroke$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).stroke$0(receiver);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toUpperCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = Array;
  list.fixed$length = Array;
  return list;
};
;
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.NodeList_methods = W.NodeList.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_EmptyIterable = new H.EmptyIterable();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__DelayedDone = new P._DelayedDone();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.Easing_0 = new L.Easing(0);
C.Easing_1 = new L.Easing(1);
C.Easing_10 = new L.Easing(10);
C.Easing_11 = new L.Easing(11);
C.Easing_12 = new L.Easing(12);
C.Easing_13 = new L.Easing(13);
C.Easing_14 = new L.Easing(14);
C.Easing_15 = new L.Easing(15);
C.Easing_16 = new L.Easing(16);
C.Easing_17 = new L.Easing(17);
C.Easing_18 = new L.Easing(18);
C.Easing_19 = new L.Easing(19);
C.Easing_2 = new L.Easing(2);
C.Easing_20 = new L.Easing(20);
C.Easing_21 = new L.Easing(21);
C.Easing_3 = new L.Easing(3);
C.Easing_4 = new L.Easing(4);
C.Easing_5 = new L.Easing(5);
C.Easing_6 = new L.Easing(6);
C.Easing_7 = new L.Easing(7);
C.Easing_8 = new L.Easing(8);
C.Easing_9 = new L.Easing(9);
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_contextmenu = new W.EventStreamProvider("contextmenu");
C.EventStreamProvider_error = new W.EventStreamProvider("error");
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove");
C.EventStreamProvider_mouseup = new W.EventStreamProvider("mouseup");
C.EventStreamProvider_resize = new W.EventStreamProvider("resize");
C.EventStreamProvider_unload = new W.EventStreamProvider("unload");
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_oRe = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
C.JsonCodec_null_null = new P.JsonCodec(null, null);
C.JsonDecoder_null = new P.JsonDecoder(null);
C.JsonEncoder_null_null = new P.JsonEncoder(null, null);
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
C.List_empty = Isolate.makeConstantList([]);
C.List_scrollTop_scrollLeft = Isolate.makeConstantList(["scrollTop", "scrollLeft"]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
C.Symbol_call = new H.Symbol0("call");
C._BeforeUnloadEventStreamProvider_beforeunload = new W._BeforeUnloadEventStreamProvider("beforeunload");
C._CustomEventStreamProvider__determineMouseWheelEventType = new W._CustomEventStreamProvider(W.Element__determineMouseWheelEventType$closure());
init.isHunkLoaded = function(hunkHash) {
  return !!$dart_deferred_initializers[hunkHash];
};
init.initializeLoadedHunk = function(hunkHash) {
  $dart_deferred_initializers[hunkHash](globalsHolder, $);
};
init.deferredLibraryUris = {};
init.deferredLibraryHashes = {};
$.Chapter_chapters = null;
$.GameEngine_scale = 85;
$.GameWizard_currentBox = null;
$.GameWizard_showing = false;
$.GameWizard_showingRotation = false;
$.Input_canvasX = null;
$.Input_canvasY = null;
$.Input_canvasWidth = null;
$.Input_canvasHeight = null;
$.Input_mouseX = 0;
$.Input_mouseY = 0;
$.Input_mouseDeltaX = 0;
$.Input_mouseDeltaY = 0;
$.Input_isAltDown = false;
$.Input_isAltClicked = false;
$.Input_isCmdDown = false;
$.Input_isCmdClicked = false;
$.Input_isMouseLeftDown = false;
$.Input_isMouseLeftClicked = false;
$.Input_isMouseRightDown = false;
$.Input_isMouseRightClicked = false;
$.Input_wheelDirection = 0;
$.Input_mouseMoved = false;
$.Input_wheelEvent = null;
$.Input_camera = null;
$.Input_keyDown = null;
$.Level_targetLevel = null;
$.Level_last = null;
$.Level_eng = null;
$.PromptWindow_id = 1;
$.PromptWindow_opened = false;
$.RatingShower_oldRating = null;
$.RatingShower_newRating = null;
$.RatingShower_e = null;
$.RatingShower_wasJustPaused = false;
$.RatingShower_pauseState = false;
$.StarManager_total = 0;
$.StarManager_byChapters = null;
$.Tooltip_index = 0;
$.WebApi_startTime = null;
$.WebApi_chapter = null;
$.WebApi_level = null;
$.IsolateNatives_enableSpawnWorker = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$.lastAttemptsUsed = -1;
$.canvas = null;
$.engine = null;
$.parallax = null;
$.manager = null;
$.hints = null;
$.featureManager = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$._lastPriorityCallback = null;
$._isInCallbackLoop = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
Isolate.$lazy($, "storage", "GameWizard_storage", "get$GameWizard_storage", function() {
  return window.localStorage;
});
Isolate.$lazy($, "progress", "GameWizard_progress", "get$GameWizard_progress", function() {
  return document.querySelector(".tutorial-progress");
});
Isolate.$lazy($, "keys", "Input_keys", "get$Input_keys", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal(["space", new A.Key(32, false, false), "enter", new A.Key(13, false, false), "delete", new A.Key(46, false, false), "z", new A.Key(90, false, false), "w", new A.Key(87, false, false), "a", new A.Key(65, false, false), "s", new A.Key(83, false, false), "d", new A.Key(68, false, false), "n", new A.Key(78, false, false), "p", new A.Key(80, false, false), "1", new A.Key(49, false, false), "2", new A.Key(50, false, false), "esc", new A.Key(27, false, false), "shift", new A.Key(16, false, false), "ctrl", new A.Key(17, false, false), "arrow_left", new A.Key(37, false, false), "arrow_right", new A.Key(39, false, false), "arrow_up", new A.Key(38, false, false), "arrow_down", new A.Key(40, false, false), "alt", new A.Key(18, false, false), "q", new A.Key(81, false, false), "e", new A.Key(69, false, false)], null, null);
});
Isolate.$lazy($, "random", "random", "get$random", function() {
  return C.C__JSRandom;
});
Isolate.$lazy($, "YELLOW", "YELLOW", "get$YELLOW", function() {
  return new V.Color3(254, 251, 224);
});
Isolate.$lazy($, "CYAN", "CYAN", "get$CYAN", function() {
  return new V.Color3(125, 165, 253);
});
Isolate.$lazy($, "closeListener", "Tooltip_closeListener", "get$Tooltip_closeListener", function() {
  return new A.closure4();
});
Isolate.$lazy($, "opened", "Tooltip_opened", "get$Tooltip_opened", function() {
  return H.setRuntimeTypeInfo([], [P.$int]);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "valueUnitRegex", "ElementAnimation_valueUnitRegex", "get$ElementAnimation_valueUnitRegex", function() {
  return new H.JSSyntaxRegExp("^(-?[0-9\\.]+)([a-zA-Z%]+)$", H.JSSyntaxRegExp_makeNative("^(-?[0-9\\.]+)([a-zA-Z%]+)$", false, true, false), null, null);
});
Isolate.$lazy($, "scheduleImmediateClosure", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
});
Isolate.$lazy($, "_toStringVisiting", "IterableBase__toStringVisiting", "get$IterableBase__toStringVisiting", function() {
  return [];
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(0, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "context", "context", "get$context", function() {
  return P._wrapToDart(self);
});
Isolate.$lazy($, "_DART_OBJECT_PROPERTY_NAME", "_DART_OBJECT_PROPERTY_NAME", "get$_DART_OBJECT_PROPERTY_NAME", function() {
  return H.getIsolateAffinityTag("_$dart_dartObject");
});
Isolate.$lazy($, "_DART_CLOSURE_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", "get$_DART_CLOSURE_PROPERTY_NAME", function() {
  return H.getIsolateAffinityTag("_$dart_dartClosure");
});
Isolate.$lazy($, "_dartProxyCtor", "_dartProxyCtor", "get$_dartProxyCtor", function() {
  return function DartObject(o) {
    this.o = o;
  };
});
Isolate.$lazy($, "sprintf", "sprintf", "get$sprintf", function() {
  return new O.PrintFormat(P.LinkedHashMap_LinkedHashMap$_literal(["i", new O.closure5(), "d", new O.closure6(), "x", new O.closure7(), "X", new O.closure8(), "o", new O.closure9(), "O", new O.closure10(), "e", new O.closure11(), "E", new O.closure12(), "f", new O.closure13(), "F", new O.closure14(), "g", new O.closure15(), "G", new O.closure16(), "s", new O.closure17()], null, null));
});
Isolate.$lazy($, "_number_rx", "FloatFormatter__number_rx", "get$FloatFormatter__number_rx", function() {
  return new H.JSSyntaxRegExp("^[\\-\\+]?(\\d+)\\.(\\d+)$", H.JSSyntaxRegExp_makeNative("^[\\-\\+]?(\\d+)\\.(\\d+)$", false, true, false), null, null);
});
Isolate.$lazy($, "_expo_rx", "FloatFormatter__expo_rx", "get$FloatFormatter__expo_rx", function() {
  return new H.JSSyntaxRegExp("^[\\-\\+]?(\\d)\\.(\\d+)e([\\-\\+]?\\d+)$", H.JSSyntaxRegExp_makeNative("^[\\-\\+]?(\\d)\\.(\\d+)e([\\-\\+]?\\d+)$", false, true, false), null, null);
});
Isolate.$lazy($, "_leading_zeroes_rx", "FloatFormatter__leading_zeroes_rx", "get$FloatFormatter__leading_zeroes_rx", function() {
  return new H.JSSyntaxRegExp("^(0*)[1-9]+", H.JSSyntaxRegExp_makeNative("^(0*)[1-9]+", false, true, false), null, null);
});
Isolate.$lazy($, "specifier", "PrintFormat_specifier", "get$PrintFormat_specifier", function() {
  return new H.JSSyntaxRegExp("%(?:(\\d+)\\$)?([\\+\\-\\#0 ]*)(\\d+|\\*)?(?:\\.(\\d+|\\*))?([a-z%])", H.JSSyntaxRegExp_makeNative("%(?:(\\d+)\\$)?([\\+\\-\\#0 ]*)(\\d+|\\*)?(?:\\.(\\d+|\\*))?([a-z%])", false, false, false), null, null);
});
Isolate.$lazy($, "uppercase_rx", "PrintFormat_uppercase_rx", "get$PrintFormat_uppercase_rx", function() {
  return new H.JSSyntaxRegExp("[A-Z]", H.JSSyntaxRegExp_makeNative("[A-Z]", false, true, false), null, null);
});

// Native classes

init.metadata = [{func: "void_", void: true},
{func: "String__String", ret: P.String, args: [P.String]},
{func: "void__List", void: true, args: [P.List]},
{func: "void__MouseEvent", void: true, args: [W.MouseEvent]},
"event",
{func: "void__WheelEvent", void: true, args: [W.WheelEvent]},
{func: "void__KeyboardEvent", void: true, args: [W.KeyboardEvent]},
{func: "void__Event", void: true, args: [W.Event]},
{func: "void__dynamic", void: true, args: [null]},
"e",
"evt",
"object",
"sender",
{func: "dynamic__String", args: [P.String]},
"closure",
"isolate",
"numberOfArguments",
"arg1",
"arg2",
"arg3",
"arg4",
{func: "void___Event", void: true, opt: [W.Event]},
,
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
"value",
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
"error",
"stackTrace",
{func: "bool__dynamic_dynamic", ret: P.bool, args: [null, null]},
{func: "int__dynamic", ret: P.$int, args: [null]},
"a",
{func: "Object__dynamic", ret: P.Object, args: [null]},
{func: "int__Comparable_Comparable", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: P.bool, args: [P.Object, P.Object]},
{func: "int__Object", ret: P.$int, args: [P.Object]},
{func: "String__EventTarget", ret: P.String, args: [W.EventTarget]},
{func: "bool__Element_String_String__Html5NodeValidator", ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]},
"element",
"attributeName",
"context",
"callback",
"captureThis",
"self",
"arguments",
{func: "args1", args: [null]},
"o",
{func: "args0"},
"obj",
"str",
{func: "dynamic__JsObject_String", args: [null, P.String]},
"x",
"y",
{func: "args2", args: [null, null]},
"canvas",
{func: "dynamic__CanvasElement", args: [W.CanvasElement]},
{func: "dynamic__DivElement", args: [W.DivElement]},
{func: "double_", ret: P.$double},
"params",
{func: "dynamic___bool", opt: [P.bool]},
{func: "dynamic__Timer", args: [P.Timer]},
{func: "dynamic__Event", args: [W.Event]},
{func: "dynamic__bool", args: [P.bool]},
"hints",
{func: "dynamic__Map", args: [P.Map]},
{func: "dynamic__String_Key", args: [P.String, A.Key]},
{func: "dynamic__KeyboardEvent", args: [W.KeyboardEvent]},
{func: "dynamic__Element", args: [W.Element]},
{func: "void__num", void: true, args: [P.num]},
"time",
{func: "dynamic__int", args: [P.$int]},
{func: "dynamic__JsObject", args: [P.JsObject]},
"invocation",
{func: "bool__Object", ret: P.bool, args: [P.Object]},
{func: "dynamic__String_dynamic", args: [P.String, null]},
{func: "dynamic__dynamic_String", args: [null, P.String]},
{func: "dynamic__num", args: [P.num]},
"highResTime",
{func: "void__Fixture_Fixture", void: true, args: [V.Fixture, V.Fixture]},
{func: "dynamic__List", args: [P.List]},
"_",
{func: "dynamic__void_", args: [{func: "void_", void: true}]},
"data",
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: P.bool},
"ignored",
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
"arg",
"each",
{func: "dynamic__Object", args: [P.Object]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "int__String", ret: P.$int, args: [P.String]},
{func: "double__String", ret: P.$double, args: [P.String]},
{func: "String__int", ret: P.String, args: [P.$int]},
"xhr",
{func: "dynamic__String_String", args: [P.String, P.String]},
"name",
"attr",
{func: "void__Node", void: true, args: [W.Node]},
"s",
{func: "String__String_dynamic", ret: P.String, args: [P.String, null]},
{func: "int__int_int", ret: P.$int, args: [P.$int, P.$int]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
function init() {
  Isolate.$isolateProperties = Object.create(null);
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties) {
        if (hasOwnProperty.call(properties, member)) {
          object[member] = properties[member];
        }
      }
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = Object.create(null);
    var allClasses = init.allClasses;
    var constructors;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      var desc = collectedClasses[cls];
      if (desc instanceof Array)
        desc = desc[1];
      var classData = desc["^"], supr, name = cls, fields = classData;
      if (typeof classData == "string") {
        var split = classData.split("/");
        if (split.length == 2) {
          name = split[0];
          fields = split[1];
        }
      }
      var s = fields.split(";");
      fields = s[1] == "" ? [] : s[1].split(",");
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          desc.$signature = function(s) {
            return function() {
              return init.metadata[s];
            };
          }(functionSignature);
      }
      if (supr && supr.indexOf("+") > 0) {
        s = supr.split("+");
        supr = s[0];
        var mixin = collectedClasses[s[1]];
        if (mixin instanceof Array)
          mixin = mixin[1];
        for (var d in mixin) {
          if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
            desc[d] = mixin[d];
        }
      }
      if (typeof dart_precompiled != "function") {
        combinedConstructorFunction += defineClass(name, cls, fields);
        constructorsList.push(cls);
      }
      if (supr)
        pendingClasses[cls] = supr;
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = init.finishedClasses;
    function finishClass(cls) {
      if (finishedClasses[cls])
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  (function() {
    init.allClasses = Object.create(null);
    init.interceptorsByTag = Object.create(null);
    init.leafTags = Object.create(null);
    init.finishedClasses = Object.create(null);
  })();
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = Object.create(null);
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              $[fieldName] = null;
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      var lazies = init.lazies;
      for (var lazyInit in lazies) {
        this[lazies[lazyInit]] = null;
      }
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
      for (var lazyInit in lazies) {
        var lazyInitName = lazies[lazyInit];
        this[lazyInitName] = isolateProperties[lazyInitName];
      }
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function(a) {
      H.startRootIsolate(T.main$closure(), a);
    }, []);
  } else {
    (function(a) {
      H.startRootIsolate(T.main$closure(), a);
    })([]);
  }
});
;
// END invoke [main].
})()

//# sourceMappingURL=cards.dart.js.map
